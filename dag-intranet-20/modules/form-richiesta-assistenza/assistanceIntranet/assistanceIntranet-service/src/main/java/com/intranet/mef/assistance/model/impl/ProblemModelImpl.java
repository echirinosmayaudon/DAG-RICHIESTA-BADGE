/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.assistance.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.assistance.model.Problem;
import com.intranet.mef.assistance.model.ProblemModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Problem service. Represents a row in the &quot;Assistance_Problem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProblemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProblemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProblemImpl
 * @see Problem
 * @see ProblemModel
 * @generated
 */
@ProviderType
public class ProblemModelImpl extends BaseModelImpl<Problem>
	implements ProblemModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a problem model instance should use the {@link Problem} interface instead.
	 */
	public static final String TABLE_NAME = "Assistance_Problem";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "problemId", Types.VARCHAR },
			{ "problemName", Types.VARCHAR },
			{ "topicId", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("problemId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("problemName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("topicId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table Assistance_Problem (uuid_ VARCHAR(75) null,problemId VARCHAR(75) not null primary key,problemName VARCHAR(200) null,topicId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Assistance_Problem";
	public static final String ORDER_BY_JPQL = " ORDER BY problem.problemId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Assistance_Problem.problemId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.assistance.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.intranet.mef.assistance.model.Problem"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.assistance.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.intranet.mef.assistance.model.Problem"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.intranet.mef.assistance.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.intranet.mef.assistance.model.Problem"),
			true);
	public static final long TOPICID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long PROBLEMID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.assistance.service.util.ServiceProps.get(
				"lock.expiration.time.com.intranet.mef.assistance.model.Problem"));

	public ProblemModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _problemId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setProblemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _problemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Problem.class;
	}

	@Override
	public String getModelClassName() {
		return Problem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("problemId", getProblemId());
		attributes.put("problemName", getProblemName());
		attributes.put("topicId", getTopicId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String problemId = (String)attributes.get("problemId");

		if (problemId != null) {
			setProblemId(problemId);
		}

		String problemName = (String)attributes.get("problemName");

		if (problemName != null) {
			setProblemName(problemName);
		}

		String topicId = (String)attributes.get("topicId");

		if (topicId != null) {
			setTopicId(topicId);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public String getProblemId() {
		if (_problemId == null) {
			return StringPool.BLANK;
		}
		else {
			return _problemId;
		}
	}

	@Override
	public void setProblemId(String problemId) {
		_columnBitmask = -1L;

		_problemId = problemId;
	}

	@Override
	public String getProblemName() {
		if (_problemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _problemName;
		}
	}

	@Override
	public void setProblemName(String problemName) {
		_problemName = problemName;
	}

	@Override
	public String getTopicId() {
		if (_topicId == null) {
			return StringPool.BLANK;
		}
		else {
			return _topicId;
		}
	}

	@Override
	public void setTopicId(String topicId) {
		_columnBitmask |= TOPICID_COLUMN_BITMASK;

		if (_originalTopicId == null) {
			_originalTopicId = _topicId;
		}

		_topicId = topicId;
	}

	public String getOriginalTopicId() {
		return GetterUtil.getString(_originalTopicId);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Problem toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Problem)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProblemImpl problemImpl = new ProblemImpl();

		problemImpl.setUuid(getUuid());
		problemImpl.setProblemId(getProblemId());
		problemImpl.setProblemName(getProblemName());
		problemImpl.setTopicId(getTopicId());

		problemImpl.resetOriginalValues();

		return problemImpl;
	}

	@Override
	public int compareTo(Problem problem) {
		int value = 0;

		value = getProblemId().compareTo(problem.getProblemId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Problem)) {
			return false;
		}

		Problem problem = (Problem)obj;

		String primaryKey = problem.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProblemModelImpl problemModelImpl = this;

		problemModelImpl._originalUuid = problemModelImpl._uuid;

		problemModelImpl._originalTopicId = problemModelImpl._topicId;

		problemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Problem> toCacheModel() {
		ProblemCacheModel problemCacheModel = new ProblemCacheModel();

		problemCacheModel.uuid = getUuid();

		String uuid = problemCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			problemCacheModel.uuid = null;
		}

		problemCacheModel.problemId = getProblemId();

		String problemId = problemCacheModel.problemId;

		if ((problemId != null) && (problemId.length() == 0)) {
			problemCacheModel.problemId = null;
		}

		problemCacheModel.problemName = getProblemName();

		String problemName = problemCacheModel.problemName;

		if ((problemName != null) && (problemName.length() == 0)) {
			problemCacheModel.problemName = null;
		}

		problemCacheModel.topicId = getTopicId();

		String topicId = problemCacheModel.topicId;

		if ((topicId != null) && (topicId.length() == 0)) {
			problemCacheModel.topicId = null;
		}

		return problemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", problemId=");
		sb.append(getProblemId());
		sb.append(", problemName=");
		sb.append(getProblemName());
		sb.append(", topicId=");
		sb.append(getTopicId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.assistance.model.Problem");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>problemId</column-name><column-value><![CDATA[");
		sb.append(getProblemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>problemName</column-name><column-value><![CDATA[");
		sb.append(getProblemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>topicId</column-name><column-value><![CDATA[");
		sb.append(getTopicId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Problem.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Problem.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _problemId;
	private String _problemName;
	private String _topicId;
	private String _originalTopicId;
	private long _columnBitmask;
	private Problem _escapedModel;
}