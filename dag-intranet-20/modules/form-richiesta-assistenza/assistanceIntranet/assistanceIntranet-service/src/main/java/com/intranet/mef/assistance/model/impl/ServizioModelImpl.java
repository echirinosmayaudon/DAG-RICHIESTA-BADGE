/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.assistance.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.assistance.model.Servizio;
import com.intranet.mef.assistance.model.ServizioModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Servizio service. Represents a row in the &quot;Assistance_Servizio&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ServizioModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServizioImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ServizioImpl
 * @see Servizio
 * @see ServizioModel
 * @generated
 */
@ProviderType
public class ServizioModelImpl extends BaseModelImpl<Servizio>
	implements ServizioModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a servizio model instance should use the {@link Servizio} interface instead.
	 */
	public static final String TABLE_NAME = "Assistance_Servizio";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "assServiceId", Types.VARCHAR },
			{ "serviceName", Types.VARCHAR },
			{ "assScopeId", Types.VARCHAR },
			{ "levelAssistance", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assServiceId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serviceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assScopeId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("levelAssistance", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table Assistance_Servizio (uuid_ VARCHAR(75) null,assServiceId VARCHAR(75) not null primary key,serviceName VARCHAR(200) null,assScopeId VARCHAR(75) null,levelAssistance VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Assistance_Servizio";
	public static final String ORDER_BY_JPQL = " ORDER BY servizio.assServiceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Assistance_Servizio.assServiceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.assistance.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.intranet.mef.assistance.model.Servizio"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.assistance.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.intranet.mef.assistance.model.Servizio"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.intranet.mef.assistance.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.intranet.mef.assistance.model.Servizio"),
			true);
	public static final long ASSSCOPEID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long ASSSERVICEID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.assistance.service.util.ServiceProps.get(
				"lock.expiration.time.com.intranet.mef.assistance.model.Servizio"));

	public ServizioModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _assServiceId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setAssServiceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _assServiceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Servizio.class;
	}

	@Override
	public String getModelClassName() {
		return Servizio.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("assServiceId", getAssServiceId());
		attributes.put("serviceName", getServiceName());
		attributes.put("assScopeId", getAssScopeId());
		attributes.put("levelAssistance", getLevelAssistance());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String assServiceId = (String)attributes.get("assServiceId");

		if (assServiceId != null) {
			setAssServiceId(assServiceId);
		}

		String serviceName = (String)attributes.get("serviceName");

		if (serviceName != null) {
			setServiceName(serviceName);
		}

		String assScopeId = (String)attributes.get("assScopeId");

		if (assScopeId != null) {
			setAssScopeId(assScopeId);
		}

		String levelAssistance = (String)attributes.get("levelAssistance");

		if (levelAssistance != null) {
			setLevelAssistance(levelAssistance);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public String getAssServiceId() {
		if (_assServiceId == null) {
			return StringPool.BLANK;
		}
		else {
			return _assServiceId;
		}
	}

	@Override
	public void setAssServiceId(String assServiceId) {
		_columnBitmask = -1L;

		_assServiceId = assServiceId;
	}

	@Override
	public String getServiceName() {
		if (_serviceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceName;
		}
	}

	@Override
	public void setServiceName(String serviceName) {
		_serviceName = serviceName;
	}

	@Override
	public String getAssScopeId() {
		if (_assScopeId == null) {
			return StringPool.BLANK;
		}
		else {
			return _assScopeId;
		}
	}

	@Override
	public void setAssScopeId(String assScopeId) {
		_columnBitmask |= ASSSCOPEID_COLUMN_BITMASK;

		if (_originalAssScopeId == null) {
			_originalAssScopeId = _assScopeId;
		}

		_assScopeId = assScopeId;
	}

	public String getOriginalAssScopeId() {
		return GetterUtil.getString(_originalAssScopeId);
	}

	@Override
	public String getLevelAssistance() {
		if (_levelAssistance == null) {
			return StringPool.BLANK;
		}
		else {
			return _levelAssistance;
		}
	}

	@Override
	public void setLevelAssistance(String levelAssistance) {
		_levelAssistance = levelAssistance;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Servizio toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Servizio)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServizioImpl servizioImpl = new ServizioImpl();

		servizioImpl.setUuid(getUuid());
		servizioImpl.setAssServiceId(getAssServiceId());
		servizioImpl.setServiceName(getServiceName());
		servizioImpl.setAssScopeId(getAssScopeId());
		servizioImpl.setLevelAssistance(getLevelAssistance());

		servizioImpl.resetOriginalValues();

		return servizioImpl;
	}

	@Override
	public int compareTo(Servizio servizio) {
		int value = 0;

		value = getAssServiceId().compareTo(servizio.getAssServiceId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Servizio)) {
			return false;
		}

		Servizio servizio = (Servizio)obj;

		String primaryKey = servizio.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ServizioModelImpl servizioModelImpl = this;

		servizioModelImpl._originalUuid = servizioModelImpl._uuid;

		servizioModelImpl._originalAssScopeId = servizioModelImpl._assScopeId;

		servizioModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Servizio> toCacheModel() {
		ServizioCacheModel servizioCacheModel = new ServizioCacheModel();

		servizioCacheModel.uuid = getUuid();

		String uuid = servizioCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			servizioCacheModel.uuid = null;
		}

		servizioCacheModel.assServiceId = getAssServiceId();

		String assServiceId = servizioCacheModel.assServiceId;

		if ((assServiceId != null) && (assServiceId.length() == 0)) {
			servizioCacheModel.assServiceId = null;
		}

		servizioCacheModel.serviceName = getServiceName();

		String serviceName = servizioCacheModel.serviceName;

		if ((serviceName != null) && (serviceName.length() == 0)) {
			servizioCacheModel.serviceName = null;
		}

		servizioCacheModel.assScopeId = getAssScopeId();

		String assScopeId = servizioCacheModel.assScopeId;

		if ((assScopeId != null) && (assScopeId.length() == 0)) {
			servizioCacheModel.assScopeId = null;
		}

		servizioCacheModel.levelAssistance = getLevelAssistance();

		String levelAssistance = servizioCacheModel.levelAssistance;

		if ((levelAssistance != null) && (levelAssistance.length() == 0)) {
			servizioCacheModel.levelAssistance = null;
		}

		return servizioCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", assServiceId=");
		sb.append(getAssServiceId());
		sb.append(", serviceName=");
		sb.append(getServiceName());
		sb.append(", assScopeId=");
		sb.append(getAssScopeId());
		sb.append(", levelAssistance=");
		sb.append(getLevelAssistance());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.assistance.model.Servizio");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assServiceId</column-name><column-value><![CDATA[");
		sb.append(getAssServiceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceName</column-name><column-value><![CDATA[");
		sb.append(getServiceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assScopeId</column-name><column-value><![CDATA[");
		sb.append(getAssScopeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>levelAssistance</column-name><column-value><![CDATA[");
		sb.append(getLevelAssistance());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Servizio.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Servizio.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _assServiceId;
	private String _serviceName;
	private String _assScopeId;
	private String _originalAssScopeId;
	private String _levelAssistance;
	private long _columnBitmask;
	private Servizio _escapedModel;
}