/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servizio.prenotazione.aule.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import servizio.prenotazione.aule.mef.model.ServizioLog;
import servizio.prenotazione.aule.mef.model.ServizioLogModel;
import servizio.prenotazione.aule.mef.model.ServizioLogSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ServizioLog service. Represents a row in the &quot;MEFAULE_ServizioLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ServizioLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServizioLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ServizioLogImpl
 * @see ServizioLog
 * @see ServizioLogModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ServizioLogModelImpl extends BaseModelImpl<ServizioLog>
	implements ServizioLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a servizio log model instance should use the {@link ServizioLog} interface instead.
	 */
	public static final String TABLE_NAME = "MEFAULE_ServizioLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_servizio", Types.BIGINT },
			{ "desc_servizio", Types.VARCHAR },
			{ "email_ref", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_servizio", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("desc_servizio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email_ref", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFAULE_ServizioLog (id_servizio LONG not null primary key,desc_servizio VARCHAR(75) null,email_ref VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MEFAULE_ServizioLog";
	public static final String ORDER_BY_JPQL = " ORDER BY servizioLog.id_servizio ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFAULE_ServizioLog.id_servizio ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(servizio.prenotazione.aule.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.servizio.prenotazione.aule.mef.model.ServizioLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(servizio.prenotazione.aule.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.servizio.prenotazione.aule.mef.model.ServizioLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(servizio.prenotazione.aule.mef.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.servizio.prenotazione.aule.mef.model.ServizioLog"),
			true);
	public static final long DESC_SERVIZIO_COLUMN_BITMASK = 1L;
	public static final long ID_SERVIZIO_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ServizioLog toModel(ServizioLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ServizioLog model = new ServizioLogImpl();

		model.setId_servizio(soapModel.getId_servizio());
		model.setDesc_servizio(soapModel.getDesc_servizio());
		model.setEmail_ref(soapModel.getEmail_ref());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ServizioLog> toModels(ServizioLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ServizioLog> models = new ArrayList<ServizioLog>(soapModels.length);

		for (ServizioLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(servizio.prenotazione.aule.mef.service.util.PropsUtil.get(
				"lock.expiration.time.servizio.prenotazione.aule.mef.model.ServizioLog"));

	public ServizioLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_servizio;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_servizio(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_servizio;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServizioLog.class;
	}

	@Override
	public String getModelClassName() {
		return ServizioLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_servizio", getId_servizio());
		attributes.put("desc_servizio", getDesc_servizio());
		attributes.put("email_ref", getEmail_ref());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_servizio = (Long)attributes.get("id_servizio");

		if (id_servizio != null) {
			setId_servizio(id_servizio);
		}

		String desc_servizio = (String)attributes.get("desc_servizio");

		if (desc_servizio != null) {
			setDesc_servizio(desc_servizio);
		}

		String email_ref = (String)attributes.get("email_ref");

		if (email_ref != null) {
			setEmail_ref(email_ref);
		}
	}

	@JSON
	@Override
	public long getId_servizio() {
		return _id_servizio;
	}

	@Override
	public void setId_servizio(long id_servizio) {
		_id_servizio = id_servizio;
	}

	@JSON
	@Override
	public String getDesc_servizio() {
		if (_desc_servizio == null) {
			return StringPool.BLANK;
		}
		else {
			return _desc_servizio;
		}
	}

	@Override
	public void setDesc_servizio(String desc_servizio) {
		_columnBitmask |= DESC_SERVIZIO_COLUMN_BITMASK;

		if (_originalDesc_servizio == null) {
			_originalDesc_servizio = _desc_servizio;
		}

		_desc_servizio = desc_servizio;
	}

	public String getOriginalDesc_servizio() {
		return GetterUtil.getString(_originalDesc_servizio);
	}

	@JSON
	@Override
	public String getEmail_ref() {
		if (_email_ref == null) {
			return StringPool.BLANK;
		}
		else {
			return _email_ref;
		}
	}

	@Override
	public void setEmail_ref(String email_ref) {
		_email_ref = email_ref;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ServizioLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServizioLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ServizioLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServizioLogImpl servizioLogImpl = new ServizioLogImpl();

		servizioLogImpl.setId_servizio(getId_servizio());
		servizioLogImpl.setDesc_servizio(getDesc_servizio());
		servizioLogImpl.setEmail_ref(getEmail_ref());

		servizioLogImpl.resetOriginalValues();

		return servizioLogImpl;
	}

	@Override
	public int compareTo(ServizioLog servizioLog) {
		long primaryKey = servizioLog.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ServizioLog)) {
			return false;
		}

		ServizioLog servizioLog = (ServizioLog)obj;

		long primaryKey = servizioLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ServizioLogModelImpl servizioLogModelImpl = this;

		servizioLogModelImpl._originalDesc_servizio = servizioLogModelImpl._desc_servizio;

		servizioLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ServizioLog> toCacheModel() {
		ServizioLogCacheModel servizioLogCacheModel = new ServizioLogCacheModel();

		servizioLogCacheModel.id_servizio = getId_servizio();

		servizioLogCacheModel.desc_servizio = getDesc_servizio();

		String desc_servizio = servizioLogCacheModel.desc_servizio;

		if ((desc_servizio != null) && (desc_servizio.length() == 0)) {
			servizioLogCacheModel.desc_servizio = null;
		}

		servizioLogCacheModel.email_ref = getEmail_ref();

		String email_ref = servizioLogCacheModel.email_ref;

		if ((email_ref != null) && (email_ref.length() == 0)) {
			servizioLogCacheModel.email_ref = null;
		}

		return servizioLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id_servizio=");
		sb.append(getId_servizio());
		sb.append(", desc_servizio=");
		sb.append(getDesc_servizio());
		sb.append(", email_ref=");
		sb.append(getEmail_ref());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("servizio.prenotazione.aule.mef.model.ServizioLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_servizio</column-name><column-value><![CDATA[");
		sb.append(getId_servizio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>desc_servizio</column-name><column-value><![CDATA[");
		sb.append(getDesc_servizio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email_ref</column-name><column-value><![CDATA[");
		sb.append(getEmail_ref());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ServizioLog.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ServizioLog.class
		};
	private long _id_servizio;
	private String _desc_servizio;
	private String _originalDesc_servizio;
	private String _email_ref;
	private long _columnBitmask;
	private ServizioLog _escapedModel;
}