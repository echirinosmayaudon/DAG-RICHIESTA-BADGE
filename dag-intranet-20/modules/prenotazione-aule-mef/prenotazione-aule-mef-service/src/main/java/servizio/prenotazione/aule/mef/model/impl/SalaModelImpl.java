/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servizio.prenotazione.aule.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import servizio.prenotazione.aule.mef.model.Sala;
import servizio.prenotazione.aule.mef.model.SalaModel;
import servizio.prenotazione.aule.mef.model.SalaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Sala service. Represents a row in the &quot;MEFAULE_Sala&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SalaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SalaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SalaImpl
 * @see Sala
 * @see SalaModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SalaModelImpl extends BaseModelImpl<Sala> implements SalaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sala model instance should use the {@link Sala} interface instead.
	 */
	public static final String TABLE_NAME = "MEFAULE_Sala";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_sala", Types.BIGINT },
			{ "desc_sala", Types.VARCHAR },
			{ "indirizzo", Types.VARCHAR },
			{ "citta", Types.VARCHAR },
			{ "cap", Types.VARCHAR },
			{ "cod_prov", Types.VARCHAR },
			{ "piano", Types.VARCHAR },
			{ "stanza", Types.VARCHAR },
			{ "posti", Types.INTEGER },
			{ "video_conferenza", Types.BOOLEAN },
			{ "proiettore", Types.BOOLEAN },
			{ "postazione_rete", Types.BOOLEAN },
			{ "autorizzazione", Types.BOOLEAN },
			{ "email_ref", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_sala", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("desc_sala", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("indirizzo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("citta", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cap", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cod_prov", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("piano", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stanza", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("posti", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("video_conferenza", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("proiettore", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("postazione_rete", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("autorizzazione", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("email_ref", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFAULE_Sala (id_sala LONG not null primary key,desc_sala VARCHAR(75) null,indirizzo VARCHAR(75) null,citta VARCHAR(75) null,cap VARCHAR(5) null,cod_prov VARCHAR(2) null,piano VARCHAR(75) null,stanza VARCHAR(75) null,posti INTEGER,video_conferenza BOOLEAN,proiettore BOOLEAN,postazione_rete BOOLEAN,autorizzazione BOOLEAN,email_ref VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MEFAULE_Sala";
	public static final String ORDER_BY_JPQL = " ORDER BY sala.id_sala ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFAULE_Sala.id_sala ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(servizio.prenotazione.aule.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.servizio.prenotazione.aule.mef.model.Sala"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(servizio.prenotazione.aule.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.servizio.prenotazione.aule.mef.model.Sala"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Sala toModel(SalaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Sala model = new SalaImpl();

		model.setId_sala(soapModel.getId_sala());
		model.setDesc_sala(soapModel.getDesc_sala());
		model.setIndirizzo(soapModel.getIndirizzo());
		model.setCitta(soapModel.getCitta());
		model.setCap(soapModel.getCap());
		model.setCod_prov(soapModel.getCod_prov());
		model.setPiano(soapModel.getPiano());
		model.setStanza(soapModel.getStanza());
		model.setPosti(soapModel.getPosti());
		model.setVideo_conferenza(soapModel.getVideo_conferenza());
		model.setProiettore(soapModel.getProiettore());
		model.setPostazione_rete(soapModel.getPostazione_rete());
		model.setAutorizzazione(soapModel.getAutorizzazione());
		model.setEmail_ref(soapModel.getEmail_ref());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Sala> toModels(SalaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Sala> models = new ArrayList<Sala>(soapModels.length);

		for (SalaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(servizio.prenotazione.aule.mef.service.util.PropsUtil.get(
				"lock.expiration.time.servizio.prenotazione.aule.mef.model.Sala"));

	public SalaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_sala;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_sala(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_sala;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Sala.class;
	}

	@Override
	public String getModelClassName() {
		return Sala.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_sala", getId_sala());
		attributes.put("desc_sala", getDesc_sala());
		attributes.put("indirizzo", getIndirizzo());
		attributes.put("citta", getCitta());
		attributes.put("cap", getCap());
		attributes.put("cod_prov", getCod_prov());
		attributes.put("piano", getPiano());
		attributes.put("stanza", getStanza());
		attributes.put("posti", getPosti());
		attributes.put("video_conferenza", getVideo_conferenza());
		attributes.put("proiettore", getProiettore());
		attributes.put("postazione_rete", getPostazione_rete());
		attributes.put("autorizzazione", getAutorizzazione());
		attributes.put("email_ref", getEmail_ref());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_sala = (Long)attributes.get("id_sala");

		if (id_sala != null) {
			setId_sala(id_sala);
		}

		String desc_sala = (String)attributes.get("desc_sala");

		if (desc_sala != null) {
			setDesc_sala(desc_sala);
		}

		String indirizzo = (String)attributes.get("indirizzo");

		if (indirizzo != null) {
			setIndirizzo(indirizzo);
		}

		String citta = (String)attributes.get("citta");

		if (citta != null) {
			setCitta(citta);
		}

		String cap = (String)attributes.get("cap");

		if (cap != null) {
			setCap(cap);
		}

		String cod_prov = (String)attributes.get("cod_prov");

		if (cod_prov != null) {
			setCod_prov(cod_prov);
		}

		String piano = (String)attributes.get("piano");

		if (piano != null) {
			setPiano(piano);
		}

		String stanza = (String)attributes.get("stanza");

		if (stanza != null) {
			setStanza(stanza);
		}

		Integer posti = (Integer)attributes.get("posti");

		if (posti != null) {
			setPosti(posti);
		}

		Boolean video_conferenza = (Boolean)attributes.get("video_conferenza");

		if (video_conferenza != null) {
			setVideo_conferenza(video_conferenza);
		}

		Boolean proiettore = (Boolean)attributes.get("proiettore");

		if (proiettore != null) {
			setProiettore(proiettore);
		}

		Boolean postazione_rete = (Boolean)attributes.get("postazione_rete");

		if (postazione_rete != null) {
			setPostazione_rete(postazione_rete);
		}

		Boolean autorizzazione = (Boolean)attributes.get("autorizzazione");

		if (autorizzazione != null) {
			setAutorizzazione(autorizzazione);
		}

		String email_ref = (String)attributes.get("email_ref");

		if (email_ref != null) {
			setEmail_ref(email_ref);
		}
	}

	@JSON
	@Override
	public long getId_sala() {
		return _id_sala;
	}

	@Override
	public void setId_sala(long id_sala) {
		_id_sala = id_sala;
	}

	@JSON
	@Override
	public String getDesc_sala() {
		if (_desc_sala == null) {
			return StringPool.BLANK;
		}
		else {
			return _desc_sala;
		}
	}

	@Override
	public void setDesc_sala(String desc_sala) {
		_desc_sala = desc_sala;
	}

	@JSON
	@Override
	public String getIndirizzo() {
		if (_indirizzo == null) {
			return StringPool.BLANK;
		}
		else {
			return _indirizzo;
		}
	}

	@Override
	public void setIndirizzo(String indirizzo) {
		_indirizzo = indirizzo;
	}

	@JSON
	@Override
	public String getCitta() {
		if (_citta == null) {
			return StringPool.BLANK;
		}
		else {
			return _citta;
		}
	}

	@Override
	public void setCitta(String citta) {
		_citta = citta;
	}

	@JSON
	@Override
	public String getCap() {
		if (_cap == null) {
			return StringPool.BLANK;
		}
		else {
			return _cap;
		}
	}

	@Override
	public void setCap(String cap) {
		_cap = cap;
	}

	@JSON
	@Override
	public String getCod_prov() {
		if (_cod_prov == null) {
			return StringPool.BLANK;
		}
		else {
			return _cod_prov;
		}
	}

	@Override
	public void setCod_prov(String cod_prov) {
		_cod_prov = cod_prov;
	}

	@JSON
	@Override
	public String getPiano() {
		if (_piano == null) {
			return StringPool.BLANK;
		}
		else {
			return _piano;
		}
	}

	@Override
	public void setPiano(String piano) {
		_piano = piano;
	}

	@JSON
	@Override
	public String getStanza() {
		if (_stanza == null) {
			return StringPool.BLANK;
		}
		else {
			return _stanza;
		}
	}

	@Override
	public void setStanza(String stanza) {
		_stanza = stanza;
	}

	@JSON
	@Override
	public int getPosti() {
		return _posti;
	}

	@Override
	public void setPosti(int posti) {
		_posti = posti;
	}

	@JSON
	@Override
	public boolean getVideo_conferenza() {
		return _video_conferenza;
	}

	@JSON
	@Override
	public boolean isVideo_conferenza() {
		return _video_conferenza;
	}

	@Override
	public void setVideo_conferenza(boolean video_conferenza) {
		_video_conferenza = video_conferenza;
	}

	@JSON
	@Override
	public boolean getProiettore() {
		return _proiettore;
	}

	@JSON
	@Override
	public boolean isProiettore() {
		return _proiettore;
	}

	@Override
	public void setProiettore(boolean proiettore) {
		_proiettore = proiettore;
	}

	@JSON
	@Override
	public boolean getPostazione_rete() {
		return _postazione_rete;
	}

	@JSON
	@Override
	public boolean isPostazione_rete() {
		return _postazione_rete;
	}

	@Override
	public void setPostazione_rete(boolean postazione_rete) {
		_postazione_rete = postazione_rete;
	}

	@JSON
	@Override
	public boolean getAutorizzazione() {
		return _autorizzazione;
	}

	@JSON
	@Override
	public boolean isAutorizzazione() {
		return _autorizzazione;
	}

	@Override
	public void setAutorizzazione(boolean autorizzazione) {
		_autorizzazione = autorizzazione;
	}

	@JSON
	@Override
	public String getEmail_ref() {
		if (_email_ref == null) {
			return StringPool.BLANK;
		}
		else {
			return _email_ref;
		}
	}

	@Override
	public void setEmail_ref(String email_ref) {
		_email_ref = email_ref;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Sala.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Sala toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Sala)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SalaImpl salaImpl = new SalaImpl();

		salaImpl.setId_sala(getId_sala());
		salaImpl.setDesc_sala(getDesc_sala());
		salaImpl.setIndirizzo(getIndirizzo());
		salaImpl.setCitta(getCitta());
		salaImpl.setCap(getCap());
		salaImpl.setCod_prov(getCod_prov());
		salaImpl.setPiano(getPiano());
		salaImpl.setStanza(getStanza());
		salaImpl.setPosti(getPosti());
		salaImpl.setVideo_conferenza(getVideo_conferenza());
		salaImpl.setProiettore(getProiettore());
		salaImpl.setPostazione_rete(getPostazione_rete());
		salaImpl.setAutorizzazione(getAutorizzazione());
		salaImpl.setEmail_ref(getEmail_ref());

		salaImpl.resetOriginalValues();

		return salaImpl;
	}

	@Override
	public int compareTo(Sala sala) {
		long primaryKey = sala.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Sala)) {
			return false;
		}

		Sala sala = (Sala)obj;

		long primaryKey = sala.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Sala> toCacheModel() {
		SalaCacheModel salaCacheModel = new SalaCacheModel();

		salaCacheModel.id_sala = getId_sala();

		salaCacheModel.desc_sala = getDesc_sala();

		String desc_sala = salaCacheModel.desc_sala;

		if ((desc_sala != null) && (desc_sala.length() == 0)) {
			salaCacheModel.desc_sala = null;
		}

		salaCacheModel.indirizzo = getIndirizzo();

		String indirizzo = salaCacheModel.indirizzo;

		if ((indirizzo != null) && (indirizzo.length() == 0)) {
			salaCacheModel.indirizzo = null;
		}

		salaCacheModel.citta = getCitta();

		String citta = salaCacheModel.citta;

		if ((citta != null) && (citta.length() == 0)) {
			salaCacheModel.citta = null;
		}

		salaCacheModel.cap = getCap();

		String cap = salaCacheModel.cap;

		if ((cap != null) && (cap.length() == 0)) {
			salaCacheModel.cap = null;
		}

		salaCacheModel.cod_prov = getCod_prov();

		String cod_prov = salaCacheModel.cod_prov;

		if ((cod_prov != null) && (cod_prov.length() == 0)) {
			salaCacheModel.cod_prov = null;
		}

		salaCacheModel.piano = getPiano();

		String piano = salaCacheModel.piano;

		if ((piano != null) && (piano.length() == 0)) {
			salaCacheModel.piano = null;
		}

		salaCacheModel.stanza = getStanza();

		String stanza = salaCacheModel.stanza;

		if ((stanza != null) && (stanza.length() == 0)) {
			salaCacheModel.stanza = null;
		}

		salaCacheModel.posti = getPosti();

		salaCacheModel.video_conferenza = getVideo_conferenza();

		salaCacheModel.proiettore = getProiettore();

		salaCacheModel.postazione_rete = getPostazione_rete();

		salaCacheModel.autorizzazione = getAutorizzazione();

		salaCacheModel.email_ref = getEmail_ref();

		String email_ref = salaCacheModel.email_ref;

		if ((email_ref != null) && (email_ref.length() == 0)) {
			salaCacheModel.email_ref = null;
		}

		return salaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{id_sala=");
		sb.append(getId_sala());
		sb.append(", desc_sala=");
		sb.append(getDesc_sala());
		sb.append(", indirizzo=");
		sb.append(getIndirizzo());
		sb.append(", citta=");
		sb.append(getCitta());
		sb.append(", cap=");
		sb.append(getCap());
		sb.append(", cod_prov=");
		sb.append(getCod_prov());
		sb.append(", piano=");
		sb.append(getPiano());
		sb.append(", stanza=");
		sb.append(getStanza());
		sb.append(", posti=");
		sb.append(getPosti());
		sb.append(", video_conferenza=");
		sb.append(getVideo_conferenza());
		sb.append(", proiettore=");
		sb.append(getProiettore());
		sb.append(", postazione_rete=");
		sb.append(getPostazione_rete());
		sb.append(", autorizzazione=");
		sb.append(getAutorizzazione());
		sb.append(", email_ref=");
		sb.append(getEmail_ref());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("servizio.prenotazione.aule.mef.model.Sala");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_sala</column-name><column-value><![CDATA[");
		sb.append(getId_sala());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>desc_sala</column-name><column-value><![CDATA[");
		sb.append(getDesc_sala());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indirizzo</column-name><column-value><![CDATA[");
		sb.append(getIndirizzo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>citta</column-name><column-value><![CDATA[");
		sb.append(getCitta());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cap</column-name><column-value><![CDATA[");
		sb.append(getCap());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cod_prov</column-name><column-value><![CDATA[");
		sb.append(getCod_prov());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>piano</column-name><column-value><![CDATA[");
		sb.append(getPiano());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stanza</column-name><column-value><![CDATA[");
		sb.append(getStanza());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>posti</column-name><column-value><![CDATA[");
		sb.append(getPosti());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>video_conferenza</column-name><column-value><![CDATA[");
		sb.append(getVideo_conferenza());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proiettore</column-name><column-value><![CDATA[");
		sb.append(getProiettore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postazione_rete</column-name><column-value><![CDATA[");
		sb.append(getPostazione_rete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>autorizzazione</column-name><column-value><![CDATA[");
		sb.append(getAutorizzazione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email_ref</column-name><column-value><![CDATA[");
		sb.append(getEmail_ref());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Sala.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Sala.class
		};
	private long _id_sala;
	private String _desc_sala;
	private String _indirizzo;
	private String _citta;
	private String _cap;
	private String _cod_prov;
	private String _piano;
	private String _stanza;
	private int _posti;
	private boolean _video_conferenza;
	private boolean _proiettore;
	private boolean _postazione_rete;
	private boolean _autorizzazione;
	private String _email_ref;
	private Sala _escapedModel;
}