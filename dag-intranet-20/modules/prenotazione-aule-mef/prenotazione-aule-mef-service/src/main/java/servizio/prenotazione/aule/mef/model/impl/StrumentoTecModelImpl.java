/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servizio.prenotazione.aule.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import servizio.prenotazione.aule.mef.model.StrumentoTec;
import servizio.prenotazione.aule.mef.model.StrumentoTecModel;
import servizio.prenotazione.aule.mef.model.StrumentoTecSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the StrumentoTec service. Represents a row in the &quot;MEFAULE_StrumentoTec&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StrumentoTecModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StrumentoTecImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StrumentoTecImpl
 * @see StrumentoTec
 * @see StrumentoTecModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class StrumentoTecModelImpl extends BaseModelImpl<StrumentoTec>
	implements StrumentoTecModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a strumento tec model instance should use the {@link StrumentoTec} interface instead.
	 */
	public static final String TABLE_NAME = "MEFAULE_StrumentoTec";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_strumento", Types.BIGINT },
			{ "desc_strumento", Types.VARCHAR },
			{ "email_ref", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_strumento", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("desc_strumento", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email_ref", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFAULE_StrumentoTec (id_strumento LONG not null primary key,desc_strumento VARCHAR(75) null,email_ref VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MEFAULE_StrumentoTec";
	public static final String ORDER_BY_JPQL = " ORDER BY strumentoTec.id_strumento ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFAULE_StrumentoTec.id_strumento ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(servizio.prenotazione.aule.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.servizio.prenotazione.aule.mef.model.StrumentoTec"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(servizio.prenotazione.aule.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.servizio.prenotazione.aule.mef.model.StrumentoTec"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(servizio.prenotazione.aule.mef.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.servizio.prenotazione.aule.mef.model.StrumentoTec"),
			true);
	public static final long DESC_STRUMENTO_COLUMN_BITMASK = 1L;
	public static final long ID_STRUMENTO_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static StrumentoTec toModel(StrumentoTecSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		StrumentoTec model = new StrumentoTecImpl();

		model.setId_strumento(soapModel.getId_strumento());
		model.setDesc_strumento(soapModel.getDesc_strumento());
		model.setEmail_ref(soapModel.getEmail_ref());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<StrumentoTec> toModels(StrumentoTecSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<StrumentoTec> models = new ArrayList<StrumentoTec>(soapModels.length);

		for (StrumentoTecSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(servizio.prenotazione.aule.mef.service.util.PropsUtil.get(
				"lock.expiration.time.servizio.prenotazione.aule.mef.model.StrumentoTec"));

	public StrumentoTecModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_strumento;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_strumento(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_strumento;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StrumentoTec.class;
	}

	@Override
	public String getModelClassName() {
		return StrumentoTec.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_strumento", getId_strumento());
		attributes.put("desc_strumento", getDesc_strumento());
		attributes.put("email_ref", getEmail_ref());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_strumento = (Long)attributes.get("id_strumento");

		if (id_strumento != null) {
			setId_strumento(id_strumento);
		}

		String desc_strumento = (String)attributes.get("desc_strumento");

		if (desc_strumento != null) {
			setDesc_strumento(desc_strumento);
		}

		String email_ref = (String)attributes.get("email_ref");

		if (email_ref != null) {
			setEmail_ref(email_ref);
		}
	}

	@JSON
	@Override
	public long getId_strumento() {
		return _id_strumento;
	}

	@Override
	public void setId_strumento(long id_strumento) {
		_id_strumento = id_strumento;
	}

	@JSON
	@Override
	public String getDesc_strumento() {
		if (_desc_strumento == null) {
			return StringPool.BLANK;
		}
		else {
			return _desc_strumento;
		}
	}

	@Override
	public void setDesc_strumento(String desc_strumento) {
		_columnBitmask |= DESC_STRUMENTO_COLUMN_BITMASK;

		if (_originalDesc_strumento == null) {
			_originalDesc_strumento = _desc_strumento;
		}

		_desc_strumento = desc_strumento;
	}

	public String getOriginalDesc_strumento() {
		return GetterUtil.getString(_originalDesc_strumento);
	}

	@JSON
	@Override
	public String getEmail_ref() {
		if (_email_ref == null) {
			return StringPool.BLANK;
		}
		else {
			return _email_ref;
		}
	}

	@Override
	public void setEmail_ref(String email_ref) {
		_email_ref = email_ref;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			StrumentoTec.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StrumentoTec toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StrumentoTec)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StrumentoTecImpl strumentoTecImpl = new StrumentoTecImpl();

		strumentoTecImpl.setId_strumento(getId_strumento());
		strumentoTecImpl.setDesc_strumento(getDesc_strumento());
		strumentoTecImpl.setEmail_ref(getEmail_ref());

		strumentoTecImpl.resetOriginalValues();

		return strumentoTecImpl;
	}

	@Override
	public int compareTo(StrumentoTec strumentoTec) {
		long primaryKey = strumentoTec.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StrumentoTec)) {
			return false;
		}

		StrumentoTec strumentoTec = (StrumentoTec)obj;

		long primaryKey = strumentoTec.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		StrumentoTecModelImpl strumentoTecModelImpl = this;

		strumentoTecModelImpl._originalDesc_strumento = strumentoTecModelImpl._desc_strumento;

		strumentoTecModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StrumentoTec> toCacheModel() {
		StrumentoTecCacheModel strumentoTecCacheModel = new StrumentoTecCacheModel();

		strumentoTecCacheModel.id_strumento = getId_strumento();

		strumentoTecCacheModel.desc_strumento = getDesc_strumento();

		String desc_strumento = strumentoTecCacheModel.desc_strumento;

		if ((desc_strumento != null) && (desc_strumento.length() == 0)) {
			strumentoTecCacheModel.desc_strumento = null;
		}

		strumentoTecCacheModel.email_ref = getEmail_ref();

		String email_ref = strumentoTecCacheModel.email_ref;

		if ((email_ref != null) && (email_ref.length() == 0)) {
			strumentoTecCacheModel.email_ref = null;
		}

		return strumentoTecCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id_strumento=");
		sb.append(getId_strumento());
		sb.append(", desc_strumento=");
		sb.append(getDesc_strumento());
		sb.append(", email_ref=");
		sb.append(getEmail_ref());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("servizio.prenotazione.aule.mef.model.StrumentoTec");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_strumento</column-name><column-value><![CDATA[");
		sb.append(getId_strumento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>desc_strumento</column-name><column-value><![CDATA[");
		sb.append(getDesc_strumento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email_ref</column-name><column-value><![CDATA[");
		sb.append(getEmail_ref());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = StrumentoTec.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			StrumentoTec.class
		};
	private long _id_strumento;
	private String _desc_strumento;
	private String _originalDesc_strumento;
	private String _email_ref;
	private long _columnBitmask;
	private StrumentoTec _escapedModel;
}