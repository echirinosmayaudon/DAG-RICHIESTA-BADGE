/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servizio.beni.facile.consumo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import servizio.beni.facile.consumo.model.CambioStatoDirigente;
import servizio.beni.facile.consumo.model.CambioStatoDirigenteModel;
import servizio.beni.facile.consumo.model.CambioStatoDirigenteSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CambioStatoDirigente service. Represents a row in the &quot;MEFBFC_CambioStatoDirigente&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CambioStatoDirigenteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CambioStatoDirigenteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CambioStatoDirigenteImpl
 * @see CambioStatoDirigente
 * @see CambioStatoDirigenteModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CambioStatoDirigenteModelImpl extends BaseModelImpl<CambioStatoDirigente>
	implements CambioStatoDirigenteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cambio stato dirigente model instance should use the {@link CambioStatoDirigente} interface instead.
	 */
	public static final String TABLE_NAME = "MEFBFC_CambioStatoDirigente";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "id_rich", Types.BIGINT },
			{ "data_", Types.TIMESTAMP },
			{ "utente", Types.VARCHAR },
			{ "id_stato", Types.BIGINT },
			{ "note", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_rich", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("utente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_stato", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFBFC_CambioStatoDirigente (id_ LONG not null primary key,id_rich LONG,data_ DATE null,utente VARCHAR(75) null,id_stato LONG,note VARCHAR(500) null)";
	public static final String TABLE_SQL_DROP = "drop table MEFBFC_CambioStatoDirigente";
	public static final String ORDER_BY_JPQL = " ORDER BY cambioStatoDirigente.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFBFC_CambioStatoDirigente.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(servizio.beni.facile.consumo.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.servizio.beni.facile.consumo.model.CambioStatoDirigente"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(servizio.beni.facile.consumo.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.servizio.beni.facile.consumo.model.CambioStatoDirigente"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(servizio.beni.facile.consumo.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.servizio.beni.facile.consumo.model.CambioStatoDirigente"),
			true);
	public static final long ID_RICH_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CambioStatoDirigente toModel(
		CambioStatoDirigenteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CambioStatoDirigente model = new CambioStatoDirigenteImpl();

		model.setId(soapModel.getId());
		model.setId_rich(soapModel.getId_rich());
		model.setData(soapModel.getData());
		model.setUtente(soapModel.getUtente());
		model.setId_stato(soapModel.getId_stato());
		model.setNote(soapModel.getNote());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CambioStatoDirigente> toModels(
		CambioStatoDirigenteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CambioStatoDirigente> models = new ArrayList<CambioStatoDirigente>(soapModels.length);

		for (CambioStatoDirigenteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(servizio.beni.facile.consumo.service.util.PropsUtil.get(
				"lock.expiration.time.servizio.beni.facile.consumo.model.CambioStatoDirigente"));

	public CambioStatoDirigenteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CambioStatoDirigente.class;
	}

	@Override
	public String getModelClassName() {
		return CambioStatoDirigente.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("id_rich", getId_rich());
		attributes.put("data", getData());
		attributes.put("utente", getUtente());
		attributes.put("id_stato", getId_stato());
		attributes.put("note", getNote());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long id_rich = (Long)attributes.get("id_rich");

		if (id_rich != null) {
			setId_rich(id_rich);
		}

		Date data = (Date)attributes.get("data");

		if (data != null) {
			setData(data);
		}

		String utente = (String)attributes.get("utente");

		if (utente != null) {
			setUtente(utente);
		}

		Long id_stato = (Long)attributes.get("id_stato");

		if (id_stato != null) {
			setId_stato(id_stato);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getId_rich() {
		return _id_rich;
	}

	@Override
	public void setId_rich(long id_rich) {
		_columnBitmask |= ID_RICH_COLUMN_BITMASK;

		if (!_setOriginalId_rich) {
			_setOriginalId_rich = true;

			_originalId_rich = _id_rich;
		}

		_id_rich = id_rich;
	}

	public long getOriginalId_rich() {
		return _originalId_rich;
	}

	@JSON
	@Override
	public Date getData() {
		return _data;
	}

	@Override
	public void setData(Date data) {
		_data = data;
	}

	@JSON
	@Override
	public String getUtente() {
		if (_utente == null) {
			return StringPool.BLANK;
		}
		else {
			return _utente;
		}
	}

	@Override
	public void setUtente(String utente) {
		_utente = utente;
	}

	@JSON
	@Override
	public long getId_stato() {
		return _id_stato;
	}

	@Override
	public void setId_stato(long id_stato) {
		_id_stato = id_stato;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CambioStatoDirigente.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CambioStatoDirigente toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CambioStatoDirigente)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CambioStatoDirigenteImpl cambioStatoDirigenteImpl = new CambioStatoDirigenteImpl();

		cambioStatoDirigenteImpl.setId(getId());
		cambioStatoDirigenteImpl.setId_rich(getId_rich());
		cambioStatoDirigenteImpl.setData(getData());
		cambioStatoDirigenteImpl.setUtente(getUtente());
		cambioStatoDirigenteImpl.setId_stato(getId_stato());
		cambioStatoDirigenteImpl.setNote(getNote());

		cambioStatoDirigenteImpl.resetOriginalValues();

		return cambioStatoDirigenteImpl;
	}

	@Override
	public int compareTo(CambioStatoDirigente cambioStatoDirigente) {
		long primaryKey = cambioStatoDirigente.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CambioStatoDirigente)) {
			return false;
		}

		CambioStatoDirigente cambioStatoDirigente = (CambioStatoDirigente)obj;

		long primaryKey = cambioStatoDirigente.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CambioStatoDirigenteModelImpl cambioStatoDirigenteModelImpl = this;

		cambioStatoDirigenteModelImpl._originalId_rich = cambioStatoDirigenteModelImpl._id_rich;

		cambioStatoDirigenteModelImpl._setOriginalId_rich = false;

		cambioStatoDirigenteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CambioStatoDirigente> toCacheModel() {
		CambioStatoDirigenteCacheModel cambioStatoDirigenteCacheModel = new CambioStatoDirigenteCacheModel();

		cambioStatoDirigenteCacheModel.id = getId();

		cambioStatoDirigenteCacheModel.id_rich = getId_rich();

		Date data = getData();

		if (data != null) {
			cambioStatoDirigenteCacheModel.data = data.getTime();
		}
		else {
			cambioStatoDirigenteCacheModel.data = Long.MIN_VALUE;
		}

		cambioStatoDirigenteCacheModel.utente = getUtente();

		String utente = cambioStatoDirigenteCacheModel.utente;

		if ((utente != null) && (utente.length() == 0)) {
			cambioStatoDirigenteCacheModel.utente = null;
		}

		cambioStatoDirigenteCacheModel.id_stato = getId_stato();

		cambioStatoDirigenteCacheModel.note = getNote();

		String note = cambioStatoDirigenteCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			cambioStatoDirigenteCacheModel.note = null;
		}

		return cambioStatoDirigenteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", id_rich=");
		sb.append(getId_rich());
		sb.append(", data=");
		sb.append(getData());
		sb.append(", utente=");
		sb.append(getUtente());
		sb.append(", id_stato=");
		sb.append(getId_stato());
		sb.append(", note=");
		sb.append(getNote());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("servizio.beni.facile.consumo.model.CambioStatoDirigente");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_rich</column-name><column-value><![CDATA[");
		sb.append(getId_rich());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data</column-name><column-value><![CDATA[");
		sb.append(getData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>utente</column-name><column-value><![CDATA[");
		sb.append(getUtente());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_stato</column-name><column-value><![CDATA[");
		sb.append(getId_stato());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CambioStatoDirigente.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CambioStatoDirigente.class
		};
	private long _id;
	private long _id_rich;
	private long _originalId_rich;
	private boolean _setOriginalId_rich;
	private Date _data;
	private String _utente;
	private long _id_stato;
	private String _note;
	private long _columnBitmask;
	private CambioStatoDirigente _escapedModel;
}