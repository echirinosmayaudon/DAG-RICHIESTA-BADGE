/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servizio.prenotazione.aule.servizi.mef.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import servizio.prenotazione.aule.servizi.mef.model.StrumTec;
import servizio.prenotazione.aule.servizi.mef.service.StrumTecLocalService;
import servizio.prenotazione.aule.servizi.mef.service.persistence.ServLogPersistence;
import servizio.prenotazione.aule.servizi.mef.service.persistence.StrumEventoPersistence;
import servizio.prenotazione.aule.servizi.mef.service.persistence.StrumTecPK;
import servizio.prenotazione.aule.servizi.mef.service.persistence.StrumTecPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the strum tec local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link servizio.prenotazione.aule.servizi.mef.service.impl.StrumTecLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see servizio.prenotazione.aule.servizi.mef.service.impl.StrumTecLocalServiceImpl
 * @see servizio.prenotazione.aule.servizi.mef.service.StrumTecLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class StrumTecLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements StrumTecLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link servizio.prenotazione.aule.servizi.mef.service.StrumTecLocalServiceUtil} to access the strum tec local service.
	 */

	/**
	 * Adds the strum tec to the database. Also notifies the appropriate model listeners.
	 *
	 * @param strumTec the strum tec
	 * @return the strum tec that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public StrumTec addStrumTec(StrumTec strumTec) {
		strumTec.setNew(true);

		return strumTecPersistence.update(strumTec);
	}

	/**
	 * Creates a new strum tec with the primary key. Does not add the strum tec to the database.
	 *
	 * @param strumTecPK the primary key for the new strum tec
	 * @return the new strum tec
	 */
	@Override
	public StrumTec createStrumTec(StrumTecPK strumTecPK) {
		return strumTecPersistence.create(strumTecPK);
	}

	/**
	 * Deletes the strum tec with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param strumTecPK the primary key of the strum tec
	 * @return the strum tec that was removed
	 * @throws PortalException if a strum tec with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public StrumTec deleteStrumTec(StrumTecPK strumTecPK)
		throws PortalException {
		return strumTecPersistence.remove(strumTecPK);
	}

	/**
	 * Deletes the strum tec from the database. Also notifies the appropriate model listeners.
	 *
	 * @param strumTec the strum tec
	 * @return the strum tec that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public StrumTec deleteStrumTec(StrumTec strumTec) {
		return strumTecPersistence.remove(strumTec);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(StrumTec.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return strumTecPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link servizio.prenotazione.aule.servizi.mef.model.impl.StrumTecModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return strumTecPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link servizio.prenotazione.aule.servizi.mef.model.impl.StrumTecModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return strumTecPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return strumTecPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return strumTecPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public StrumTec fetchStrumTec(StrumTecPK strumTecPK) {
		return strumTecPersistence.fetchByPrimaryKey(strumTecPK);
	}

	/**
	 * Returns the strum tec with the primary key.
	 *
	 * @param strumTecPK the primary key of the strum tec
	 * @return the strum tec
	 * @throws PortalException if a strum tec with the primary key could not be found
	 */
	@Override
	public StrumTec getStrumTec(StrumTecPK strumTecPK)
		throws PortalException {
		return strumTecPersistence.findByPrimaryKey(strumTecPK);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(strumTecLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(StrumTec.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("primaryKey.id_strum");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(strumTecLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(StrumTec.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"primaryKey.id_strum");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(strumTecLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(StrumTec.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("primaryKey.id_strum");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return strumTecLocalService.deleteStrumTec((StrumTec)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return strumTecPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the strum tecs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link servizio.prenotazione.aule.servizi.mef.model.impl.StrumTecModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of strum tecs
	 * @param end the upper bound of the range of strum tecs (not inclusive)
	 * @return the range of strum tecs
	 */
	@Override
	public List<StrumTec> getStrumTecs(int start, int end) {
		return strumTecPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of strum tecs.
	 *
	 * @return the number of strum tecs
	 */
	@Override
	public int getStrumTecsCount() {
		return strumTecPersistence.countAll();
	}

	/**
	 * Updates the strum tec in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param strumTec the strum tec
	 * @return the strum tec that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public StrumTec updateStrumTec(StrumTec strumTec) {
		return strumTecPersistence.update(strumTec);
	}

	/**
	 * Returns the serv log local service.
	 *
	 * @return the serv log local service
	 */
	public servizio.prenotazione.aule.servizi.mef.service.ServLogLocalService getServLogLocalService() {
		return servLogLocalService;
	}

	/**
	 * Sets the serv log local service.
	 *
	 * @param servLogLocalService the serv log local service
	 */
	public void setServLogLocalService(
		servizio.prenotazione.aule.servizi.mef.service.ServLogLocalService servLogLocalService) {
		this.servLogLocalService = servLogLocalService;
	}

	/**
	 * Returns the serv log persistence.
	 *
	 * @return the serv log persistence
	 */
	public ServLogPersistence getServLogPersistence() {
		return servLogPersistence;
	}

	/**
	 * Sets the serv log persistence.
	 *
	 * @param servLogPersistence the serv log persistence
	 */
	public void setServLogPersistence(ServLogPersistence servLogPersistence) {
		this.servLogPersistence = servLogPersistence;
	}

	/**
	 * Returns the strum evento local service.
	 *
	 * @return the strum evento local service
	 */
	public servizio.prenotazione.aule.servizi.mef.service.StrumEventoLocalService getStrumEventoLocalService() {
		return strumEventoLocalService;
	}

	/**
	 * Sets the strum evento local service.
	 *
	 * @param strumEventoLocalService the strum evento local service
	 */
	public void setStrumEventoLocalService(
		servizio.prenotazione.aule.servizi.mef.service.StrumEventoLocalService strumEventoLocalService) {
		this.strumEventoLocalService = strumEventoLocalService;
	}

	/**
	 * Returns the strum evento persistence.
	 *
	 * @return the strum evento persistence
	 */
	public StrumEventoPersistence getStrumEventoPersistence() {
		return strumEventoPersistence;
	}

	/**
	 * Sets the strum evento persistence.
	 *
	 * @param strumEventoPersistence the strum evento persistence
	 */
	public void setStrumEventoPersistence(
		StrumEventoPersistence strumEventoPersistence) {
		this.strumEventoPersistence = strumEventoPersistence;
	}

	/**
	 * Returns the strum tec local service.
	 *
	 * @return the strum tec local service
	 */
	public StrumTecLocalService getStrumTecLocalService() {
		return strumTecLocalService;
	}

	/**
	 * Sets the strum tec local service.
	 *
	 * @param strumTecLocalService the strum tec local service
	 */
	public void setStrumTecLocalService(
		StrumTecLocalService strumTecLocalService) {
		this.strumTecLocalService = strumTecLocalService;
	}

	/**
	 * Returns the strum tec persistence.
	 *
	 * @return the strum tec persistence
	 */
	public StrumTecPersistence getStrumTecPersistence() {
		return strumTecPersistence;
	}

	/**
	 * Sets the strum tec persistence.
	 *
	 * @param strumTecPersistence the strum tec persistence
	 */
	public void setStrumTecPersistence(StrumTecPersistence strumTecPersistence) {
		this.strumTecPersistence = strumTecPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("servizio.prenotazione.aule.servizi.mef.model.StrumTec",
			strumTecLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"servizio.prenotazione.aule.servizi.mef.model.StrumTec");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return StrumTecLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return StrumTec.class;
	}

	protected String getModelClassName() {
		return StrumTec.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = strumTecPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = servizio.prenotazione.aule.servizi.mef.service.ServLogLocalService.class)
	protected servizio.prenotazione.aule.servizi.mef.service.ServLogLocalService servLogLocalService;
	@BeanReference(type = ServLogPersistence.class)
	protected ServLogPersistence servLogPersistence;
	@BeanReference(type = servizio.prenotazione.aule.servizi.mef.service.StrumEventoLocalService.class)
	protected servizio.prenotazione.aule.servizi.mef.service.StrumEventoLocalService strumEventoLocalService;
	@BeanReference(type = StrumEventoPersistence.class)
	protected StrumEventoPersistence strumEventoPersistence;
	@BeanReference(type = StrumTecLocalService.class)
	protected StrumTecLocalService strumTecLocalService;
	@BeanReference(type = StrumTecPersistence.class)
	protected StrumTecPersistence strumTecPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}