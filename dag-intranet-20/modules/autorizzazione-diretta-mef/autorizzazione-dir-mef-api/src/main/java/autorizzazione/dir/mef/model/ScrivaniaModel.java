/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package autorizzazione.dir.mef.model;

import aQute.bnd.annotation.ProviderType;

import autorizzazione.dir.mef.service.persistence.ScrivaniaPK;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Scrivania service. Represents a row in the &quot;MEFSERV_Scrivania&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link autorizzazione.dir.mef.model.impl.ScrivaniaModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link autorizzazione.dir.mef.model.impl.ScrivaniaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Scrivania
 * @see autorizzazione.dir.mef.model.impl.ScrivaniaImpl
 * @see autorizzazione.dir.mef.model.impl.ScrivaniaModelImpl
 * @generated
 */
@ProviderType
public interface ScrivaniaModel extends BaseModel<Scrivania> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a scrivania model instance should use the {@link Scrivania} interface instead.
	 */

	/**
	 * Returns the primary key of this scrivania.
	 *
	 * @return the primary key of this scrivania
	 */
	public ScrivaniaPK getPrimaryKey();

	/**
	 * Sets the primary key of this scrivania.
	 *
	 * @param primaryKey the primary key of this scrivania
	 */
	public void setPrimaryKey(ScrivaniaPK primaryKey);

	/**
	 * Returns the row ID of this scrivania.
	 *
	 * @return the row ID of this scrivania
	 */
	public long getRowId();

	/**
	 * Sets the row ID of this scrivania.
	 *
	 * @param rowId the row ID of this scrivania
	 */
	public void setRowId(long rowId);

	/**
	 * Returns the create date of this scrivania.
	 *
	 * @return the create date of this scrivania
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this scrivania.
	 *
	 * @param createDate the create date of this scrivania
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Returns the user ID of this scrivania.
	 *
	 * @return the user ID of this scrivania
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this scrivania.
	 *
	 * @param userId the user ID of this scrivania
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this scrivania.
	 *
	 * @return the user uuid of this scrivania
	 */
	public String getUserUuid();

	/**
	 * Sets the user uuid of this scrivania.
	 *
	 * @param userUuid the user uuid of this scrivania
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the application ID of this scrivania.
	 *
	 * @return the application ID of this scrivania
	 */
	public long getApplicationId();

	/**
	 * Sets the application ID of this scrivania.
	 *
	 * @param applicationId the application ID of this scrivania
	 */
	public void setApplicationId(long applicationId);

	/**
	 * Returns the home flag of this scrivania.
	 *
	 * @return the home flag of this scrivania
	 */
	public boolean getHomeFlag();

	/**
	 * Returns <code>true</code> if this scrivania is home flag.
	 *
	 * @return <code>true</code> if this scrivania is home flag; <code>false</code> otherwise
	 */
	public boolean isHomeFlag();

	/**
	 * Sets whether this scrivania is home flag.
	 *
	 * @param homeFlag the home flag of this scrivania
	 */
	public void setHomeFlag(boolean homeFlag);

	/**
	 * Returns the profile flag of this scrivania.
	 *
	 * @return the profile flag of this scrivania
	 */
	public boolean getProfileFlag();

	/**
	 * Returns <code>true</code> if this scrivania is profile flag.
	 *
	 * @return <code>true</code> if this scrivania is profile flag; <code>false</code> otherwise
	 */
	public boolean isProfileFlag();

	/**
	 * Sets whether this scrivania is profile flag.
	 *
	 * @param profileFlag the profile flag of this scrivania
	 */
	public void setProfileFlag(boolean profileFlag);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(autorizzazione.dir.mef.model.Scrivania scrivania);

	@Override
	public int hashCode();

	@Override
	public CacheModel<autorizzazione.dir.mef.model.Scrivania> toCacheModel();

	@Override
	public autorizzazione.dir.mef.model.Scrivania toEscapedModel();

	@Override
	public autorizzazione.dir.mef.model.Scrivania toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}