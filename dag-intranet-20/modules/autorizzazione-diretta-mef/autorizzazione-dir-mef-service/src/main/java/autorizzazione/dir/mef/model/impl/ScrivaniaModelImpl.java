/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package autorizzazione.dir.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import autorizzazione.dir.mef.model.Scrivania;
import autorizzazione.dir.mef.model.ScrivaniaModel;
import autorizzazione.dir.mef.model.ScrivaniaSoap;
import autorizzazione.dir.mef.service.persistence.ScrivaniaPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Scrivania service. Represents a row in the &quot;MEFSERV_Scrivania&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ScrivaniaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScrivaniaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ScrivaniaImpl
 * @see Scrivania
 * @see ScrivaniaModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ScrivaniaModelImpl extends BaseModelImpl<Scrivania>
	implements ScrivaniaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a scrivania model instance should use the {@link Scrivania} interface instead.
	 */
	public static final String TABLE_NAME = "MEFSERV_Scrivania";
	public static final Object[][] TABLE_COLUMNS = {
			{ "rowId_", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "applicationId", Types.BIGINT },
			{ "homeFlag", Types.BOOLEAN },
			{ "profileFlag", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("rowId_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("homeFlag", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("profileFlag", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFSERV_Scrivania (rowId_ LONG,createDate DATE null,userId LONG not null,applicationId LONG not null,homeFlag BOOLEAN,profileFlag BOOLEAN,primary key (userId, applicationId))";
	public static final String TABLE_SQL_DROP = "drop table MEFSERV_Scrivania";
	public static final String ORDER_BY_JPQL = " ORDER BY scrivania.id.userId ASC, scrivania.id.applicationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFSERV_Scrivania.userId ASC, MEFSERV_Scrivania.applicationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(autorizzazione.dir.mef.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.autorizzazione.dir.mef.model.Scrivania"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(autorizzazione.dir.mef.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.autorizzazione.dir.mef.model.Scrivania"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(autorizzazione.dir.mef.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.autorizzazione.dir.mef.model.Scrivania"),
			true);
	public static final long HOMEFLAG_COLUMN_BITMASK = 1L;
	public static final long PROFILEFLAG_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;
	public static final long APPLICATIONID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Scrivania toModel(ScrivaniaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Scrivania model = new ScrivaniaImpl();

		model.setRowId(soapModel.getRowId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setUserId(soapModel.getUserId());
		model.setApplicationId(soapModel.getApplicationId());
		model.setHomeFlag(soapModel.getHomeFlag());
		model.setProfileFlag(soapModel.getProfileFlag());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Scrivania> toModels(ScrivaniaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Scrivania> models = new ArrayList<Scrivania>(soapModels.length);

		for (ScrivaniaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(autorizzazione.dir.mef.service.util.ServiceProps.get(
				"lock.expiration.time.autorizzazione.dir.mef.model.Scrivania"));

	public ScrivaniaModelImpl() {
	}

	@Override
	public ScrivaniaPK getPrimaryKey() {
		return new ScrivaniaPK(_userId, _applicationId);
	}

	@Override
	public void setPrimaryKey(ScrivaniaPK primaryKey) {
		setUserId(primaryKey.userId);
		setApplicationId(primaryKey.applicationId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ScrivaniaPK(_userId, _applicationId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ScrivaniaPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Scrivania.class;
	}

	@Override
	public String getModelClassName() {
		return Scrivania.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("rowId", getRowId());
		attributes.put("createDate", getCreateDate());
		attributes.put("userId", getUserId());
		attributes.put("applicationId", getApplicationId());
		attributes.put("homeFlag", getHomeFlag());
		attributes.put("profileFlag", getProfileFlag());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long rowId = (Long)attributes.get("rowId");

		if (rowId != null) {
			setRowId(rowId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long applicationId = (Long)attributes.get("applicationId");

		if (applicationId != null) {
			setApplicationId(applicationId);
		}

		Boolean homeFlag = (Boolean)attributes.get("homeFlag");

		if (homeFlag != null) {
			setHomeFlag(homeFlag);
		}

		Boolean profileFlag = (Boolean)attributes.get("profileFlag");

		if (profileFlag != null) {
			setProfileFlag(profileFlag);
		}
	}

	@JSON
	@Override
	public long getRowId() {
		return _rowId;
	}

	@Override
	public void setRowId(long rowId) {
		_rowId = rowId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getApplicationId() {
		return _applicationId;
	}

	@Override
	public void setApplicationId(long applicationId) {
		_applicationId = applicationId;
	}

	@JSON
	@Override
	public boolean getHomeFlag() {
		return _homeFlag;
	}

	@JSON
	@Override
	public boolean isHomeFlag() {
		return _homeFlag;
	}

	@Override
	public void setHomeFlag(boolean homeFlag) {
		_columnBitmask |= HOMEFLAG_COLUMN_BITMASK;

		if (!_setOriginalHomeFlag) {
			_setOriginalHomeFlag = true;

			_originalHomeFlag = _homeFlag;
		}

		_homeFlag = homeFlag;
	}

	public boolean getOriginalHomeFlag() {
		return _originalHomeFlag;
	}

	@JSON
	@Override
	public boolean getProfileFlag() {
		return _profileFlag;
	}

	@JSON
	@Override
	public boolean isProfileFlag() {
		return _profileFlag;
	}

	@Override
	public void setProfileFlag(boolean profileFlag) {
		_columnBitmask |= PROFILEFLAG_COLUMN_BITMASK;

		if (!_setOriginalProfileFlag) {
			_setOriginalProfileFlag = true;

			_originalProfileFlag = _profileFlag;
		}

		_profileFlag = profileFlag;
	}

	public boolean getOriginalProfileFlag() {
		return _originalProfileFlag;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Scrivania toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Scrivania)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScrivaniaImpl scrivaniaImpl = new ScrivaniaImpl();

		scrivaniaImpl.setRowId(getRowId());
		scrivaniaImpl.setCreateDate(getCreateDate());
		scrivaniaImpl.setUserId(getUserId());
		scrivaniaImpl.setApplicationId(getApplicationId());
		scrivaniaImpl.setHomeFlag(getHomeFlag());
		scrivaniaImpl.setProfileFlag(getProfileFlag());

		scrivaniaImpl.resetOriginalValues();

		return scrivaniaImpl;
	}

	@Override
	public int compareTo(Scrivania scrivania) {
		ScrivaniaPK primaryKey = scrivania.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Scrivania)) {
			return false;
		}

		Scrivania scrivania = (Scrivania)obj;

		ScrivaniaPK primaryKey = scrivania.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ScrivaniaModelImpl scrivaniaModelImpl = this;

		scrivaniaModelImpl._originalUserId = scrivaniaModelImpl._userId;

		scrivaniaModelImpl._setOriginalUserId = false;

		scrivaniaModelImpl._originalHomeFlag = scrivaniaModelImpl._homeFlag;

		scrivaniaModelImpl._setOriginalHomeFlag = false;

		scrivaniaModelImpl._originalProfileFlag = scrivaniaModelImpl._profileFlag;

		scrivaniaModelImpl._setOriginalProfileFlag = false;

		scrivaniaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Scrivania> toCacheModel() {
		ScrivaniaCacheModel scrivaniaCacheModel = new ScrivaniaCacheModel();

		scrivaniaCacheModel.scrivaniaPK = getPrimaryKey();

		scrivaniaCacheModel.rowId = getRowId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			scrivaniaCacheModel.createDate = createDate.getTime();
		}
		else {
			scrivaniaCacheModel.createDate = Long.MIN_VALUE;
		}

		scrivaniaCacheModel.userId = getUserId();

		scrivaniaCacheModel.applicationId = getApplicationId();

		scrivaniaCacheModel.homeFlag = getHomeFlag();

		scrivaniaCacheModel.profileFlag = getProfileFlag();

		return scrivaniaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{rowId=");
		sb.append(getRowId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", applicationId=");
		sb.append(getApplicationId());
		sb.append(", homeFlag=");
		sb.append(getHomeFlag());
		sb.append(", profileFlag=");
		sb.append(getProfileFlag());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("autorizzazione.dir.mef.model.Scrivania");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>rowId</column-name><column-value><![CDATA[");
		sb.append(getRowId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationId</column-name><column-value><![CDATA[");
		sb.append(getApplicationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>homeFlag</column-name><column-value><![CDATA[");
		sb.append(getHomeFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profileFlag</column-name><column-value><![CDATA[");
		sb.append(getProfileFlag());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Scrivania.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Scrivania.class
		};
	private long _rowId;
	private Date _createDate;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _applicationId;
	private boolean _homeFlag;
	private boolean _originalHomeFlag;
	private boolean _setOriginalHomeFlag;
	private boolean _profileFlag;
	private boolean _originalProfileFlag;
	private boolean _setOriginalProfileFlag;
	private long _columnBitmask;
	private Scrivania _escapedModel;
}