/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package autorizzazione.dir.mef.service.base;

import aQute.bnd.annotation.ProviderType;

import autorizzazione.dir.mef.model.AutorizzazioneDir;
import autorizzazione.dir.mef.service.AutorizzazioneDirLocalService;
import autorizzazione.dir.mef.service.persistence.AutorizzazioneDirFinder;
import autorizzazione.dir.mef.service.persistence.AutorizzazioneDirPersistence;
import autorizzazione.dir.mef.service.persistence.ScrivaniaPersistence;
import autorizzazione.dir.mef.service.persistence.UtilizzoApplicazioniPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the autorizzazione dir local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link autorizzazione.dir.mef.service.impl.AutorizzazioneDirLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see autorizzazione.dir.mef.service.impl.AutorizzazioneDirLocalServiceImpl
 * @see autorizzazione.dir.mef.service.AutorizzazioneDirLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class AutorizzazioneDirLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements AutorizzazioneDirLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link autorizzazione.dir.mef.service.AutorizzazioneDirLocalServiceUtil} to access the autorizzazione dir local service.
	 */

	/**
	 * Adds the autorizzazione dir to the database. Also notifies the appropriate model listeners.
	 *
	 * @param autorizzazioneDir the autorizzazione dir
	 * @return the autorizzazione dir that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AutorizzazioneDir addAutorizzazioneDir(
		AutorizzazioneDir autorizzazioneDir) {
		autorizzazioneDir.setNew(true);

		return autorizzazioneDirPersistence.update(autorizzazioneDir);
	}

	/**
	 * Creates a new autorizzazione dir with the primary key. Does not add the autorizzazione dir to the database.
	 *
	 * @param id_autorizzazione the primary key for the new autorizzazione dir
	 * @return the new autorizzazione dir
	 */
	@Override
	public AutorizzazioneDir createAutorizzazioneDir(long id_autorizzazione) {
		return autorizzazioneDirPersistence.create(id_autorizzazione);
	}

	/**
	 * Deletes the autorizzazione dir with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id_autorizzazione the primary key of the autorizzazione dir
	 * @return the autorizzazione dir that was removed
	 * @throws PortalException if a autorizzazione dir with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AutorizzazioneDir deleteAutorizzazioneDir(long id_autorizzazione)
		throws PortalException {
		return autorizzazioneDirPersistence.remove(id_autorizzazione);
	}

	/**
	 * Deletes the autorizzazione dir from the database. Also notifies the appropriate model listeners.
	 *
	 * @param autorizzazioneDir the autorizzazione dir
	 * @return the autorizzazione dir that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AutorizzazioneDir deleteAutorizzazioneDir(
		AutorizzazioneDir autorizzazioneDir) {
		return autorizzazioneDirPersistence.remove(autorizzazioneDir);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(AutorizzazioneDir.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return autorizzazioneDirPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link autorizzazione.dir.mef.model.impl.AutorizzazioneDirModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return autorizzazioneDirPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link autorizzazione.dir.mef.model.impl.AutorizzazioneDirModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return autorizzazioneDirPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return autorizzazioneDirPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return autorizzazioneDirPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public AutorizzazioneDir fetchAutorizzazioneDir(long id_autorizzazione) {
		return autorizzazioneDirPersistence.fetchByPrimaryKey(id_autorizzazione);
	}

	/**
	 * Returns the autorizzazione dir with the primary key.
	 *
	 * @param id_autorizzazione the primary key of the autorizzazione dir
	 * @return the autorizzazione dir
	 * @throws PortalException if a autorizzazione dir with the primary key could not be found
	 */
	@Override
	public AutorizzazioneDir getAutorizzazioneDir(long id_autorizzazione)
		throws PortalException {
		return autorizzazioneDirPersistence.findByPrimaryKey(id_autorizzazione);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(autorizzazioneDirLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AutorizzazioneDir.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id_autorizzazione");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(autorizzazioneDirLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(AutorizzazioneDir.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"id_autorizzazione");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(autorizzazioneDirLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AutorizzazioneDir.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id_autorizzazione");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return autorizzazioneDirLocalService.deleteAutorizzazioneDir((AutorizzazioneDir)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return autorizzazioneDirPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the autorizzazione dirs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link autorizzazione.dir.mef.model.impl.AutorizzazioneDirModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of autorizzazione dirs
	 * @param end the upper bound of the range of autorizzazione dirs (not inclusive)
	 * @return the range of autorizzazione dirs
	 */
	@Override
	public List<AutorizzazioneDir> getAutorizzazioneDirs(int start, int end) {
		return autorizzazioneDirPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of autorizzazione dirs.
	 *
	 * @return the number of autorizzazione dirs
	 */
	@Override
	public int getAutorizzazioneDirsCount() {
		return autorizzazioneDirPersistence.countAll();
	}

	/**
	 * Updates the autorizzazione dir in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param autorizzazioneDir the autorizzazione dir
	 * @return the autorizzazione dir that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AutorizzazioneDir updateAutorizzazioneDir(
		AutorizzazioneDir autorizzazioneDir) {
		return autorizzazioneDirPersistence.update(autorizzazioneDir);
	}

	/**
	 * Returns the autorizzazione dir local service.
	 *
	 * @return the autorizzazione dir local service
	 */
	public AutorizzazioneDirLocalService getAutorizzazioneDirLocalService() {
		return autorizzazioneDirLocalService;
	}

	/**
	 * Sets the autorizzazione dir local service.
	 *
	 * @param autorizzazioneDirLocalService the autorizzazione dir local service
	 */
	public void setAutorizzazioneDirLocalService(
		AutorizzazioneDirLocalService autorizzazioneDirLocalService) {
		this.autorizzazioneDirLocalService = autorizzazioneDirLocalService;
	}

	/**
	 * Returns the autorizzazione dir persistence.
	 *
	 * @return the autorizzazione dir persistence
	 */
	public AutorizzazioneDirPersistence getAutorizzazioneDirPersistence() {
		return autorizzazioneDirPersistence;
	}

	/**
	 * Sets the autorizzazione dir persistence.
	 *
	 * @param autorizzazioneDirPersistence the autorizzazione dir persistence
	 */
	public void setAutorizzazioneDirPersistence(
		AutorizzazioneDirPersistence autorizzazioneDirPersistence) {
		this.autorizzazioneDirPersistence = autorizzazioneDirPersistence;
	}

	/**
	 * Returns the autorizzazione dir finder.
	 *
	 * @return the autorizzazione dir finder
	 */
	public AutorizzazioneDirFinder getAutorizzazioneDirFinder() {
		return autorizzazioneDirFinder;
	}

	/**
	 * Sets the autorizzazione dir finder.
	 *
	 * @param autorizzazioneDirFinder the autorizzazione dir finder
	 */
	public void setAutorizzazioneDirFinder(
		AutorizzazioneDirFinder autorizzazioneDirFinder) {
		this.autorizzazioneDirFinder = autorizzazioneDirFinder;
	}

	/**
	 * Returns the scrivania local service.
	 *
	 * @return the scrivania local service
	 */
	public autorizzazione.dir.mef.service.ScrivaniaLocalService getScrivaniaLocalService() {
		return scrivaniaLocalService;
	}

	/**
	 * Sets the scrivania local service.
	 *
	 * @param scrivaniaLocalService the scrivania local service
	 */
	public void setScrivaniaLocalService(
		autorizzazione.dir.mef.service.ScrivaniaLocalService scrivaniaLocalService) {
		this.scrivaniaLocalService = scrivaniaLocalService;
	}

	/**
	 * Returns the scrivania persistence.
	 *
	 * @return the scrivania persistence
	 */
	public ScrivaniaPersistence getScrivaniaPersistence() {
		return scrivaniaPersistence;
	}

	/**
	 * Sets the scrivania persistence.
	 *
	 * @param scrivaniaPersistence the scrivania persistence
	 */
	public void setScrivaniaPersistence(
		ScrivaniaPersistence scrivaniaPersistence) {
		this.scrivaniaPersistence = scrivaniaPersistence;
	}

	/**
	 * Returns the utilizzo applicazioni local service.
	 *
	 * @return the utilizzo applicazioni local service
	 */
	public autorizzazione.dir.mef.service.UtilizzoApplicazioniLocalService getUtilizzoApplicazioniLocalService() {
		return utilizzoApplicazioniLocalService;
	}

	/**
	 * Sets the utilizzo applicazioni local service.
	 *
	 * @param utilizzoApplicazioniLocalService the utilizzo applicazioni local service
	 */
	public void setUtilizzoApplicazioniLocalService(
		autorizzazione.dir.mef.service.UtilizzoApplicazioniLocalService utilizzoApplicazioniLocalService) {
		this.utilizzoApplicazioniLocalService = utilizzoApplicazioniLocalService;
	}

	/**
	 * Returns the utilizzo applicazioni persistence.
	 *
	 * @return the utilizzo applicazioni persistence
	 */
	public UtilizzoApplicazioniPersistence getUtilizzoApplicazioniPersistence() {
		return utilizzoApplicazioniPersistence;
	}

	/**
	 * Sets the utilizzo applicazioni persistence.
	 *
	 * @param utilizzoApplicazioniPersistence the utilizzo applicazioni persistence
	 */
	public void setUtilizzoApplicazioniPersistence(
		UtilizzoApplicazioniPersistence utilizzoApplicazioniPersistence) {
		this.utilizzoApplicazioniPersistence = utilizzoApplicazioniPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("autorizzazione.dir.mef.model.AutorizzazioneDir",
			autorizzazioneDirLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"autorizzazione.dir.mef.model.AutorizzazioneDir");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return AutorizzazioneDirLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return AutorizzazioneDir.class;
	}

	protected String getModelClassName() {
		return AutorizzazioneDir.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = autorizzazioneDirPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = AutorizzazioneDirLocalService.class)
	protected AutorizzazioneDirLocalService autorizzazioneDirLocalService;
	@BeanReference(type = AutorizzazioneDirPersistence.class)
	protected AutorizzazioneDirPersistence autorizzazioneDirPersistence;
	@BeanReference(type = AutorizzazioneDirFinder.class)
	protected AutorizzazioneDirFinder autorizzazioneDirFinder;
	@BeanReference(type = autorizzazione.dir.mef.service.ScrivaniaLocalService.class)
	protected autorizzazione.dir.mef.service.ScrivaniaLocalService scrivaniaLocalService;
	@BeanReference(type = ScrivaniaPersistence.class)
	protected ScrivaniaPersistence scrivaniaPersistence;
	@BeanReference(type = autorizzazione.dir.mef.service.UtilizzoApplicazioniLocalService.class)
	protected autorizzazione.dir.mef.service.UtilizzoApplicazioniLocalService utilizzoApplicazioniLocalService;
	@BeanReference(type = UtilizzoApplicazioniPersistence.class)
	protected UtilizzoApplicazioniPersistence utilizzoApplicazioniPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}