/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package autorizzazione.dir.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import autorizzazione.dir.mef.model.AutorizzazioneDir;
import autorizzazione.dir.mef.model.AutorizzazioneDirModel;
import autorizzazione.dir.mef.model.AutorizzazioneDirSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AutorizzazioneDir service. Represents a row in the &quot;MEFSERV_AutorizzazioneDir&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AutorizzazioneDirModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AutorizzazioneDirImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AutorizzazioneDirImpl
 * @see AutorizzazioneDir
 * @see AutorizzazioneDirModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AutorizzazioneDirModelImpl extends BaseModelImpl<AutorizzazioneDir>
	implements AutorizzazioneDirModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a autorizzazione dir model instance should use the {@link AutorizzazioneDir} interface instead.
	 */
	public static final String TABLE_NAME = "MEFSERV_AutorizzazioneDir";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_autorizzazione", Types.BIGINT },
			{ "id_applicazione", Types.BIGINT },
			{ "mef", Types.BIGINT },
			{ "dipartimento", Types.BIGINT },
			{ "direzione", Types.BIGINT },
			{ "ufficio", Types.BIGINT },
			{ "codice_fiscale", Types.VARCHAR },
			{ "nega", Types.BOOLEAN },
			{ "tag", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_autorizzazione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_applicazione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mef", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dipartimento", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("direzione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ufficio", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("codice_fiscale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nega", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("tag", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFSERV_AutorizzazioneDir (id_autorizzazione LONG not null primary key IDENTITY,id_applicazione LONG,mef LONG,dipartimento LONG,direzione LONG,ufficio LONG,codice_fiscale VARCHAR(75) null,nega BOOLEAN,tag VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MEFSERV_AutorizzazioneDir";
	public static final String ORDER_BY_JPQL = " ORDER BY autorizzazioneDir.id_autorizzazione ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFSERV_AutorizzazioneDir.id_autorizzazione ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(autorizzazione.dir.mef.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.autorizzazione.dir.mef.model.AutorizzazioneDir"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(autorizzazione.dir.mef.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.autorizzazione.dir.mef.model.AutorizzazioneDir"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AutorizzazioneDir toModel(AutorizzazioneDirSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AutorizzazioneDir model = new AutorizzazioneDirImpl();

		model.setId_autorizzazione(soapModel.getId_autorizzazione());
		model.setId_applicazione(soapModel.getId_applicazione());
		model.setMef(soapModel.getMef());
		model.setDipartimento(soapModel.getDipartimento());
		model.setDirezione(soapModel.getDirezione());
		model.setUfficio(soapModel.getUfficio());
		model.setCodice_fiscale(soapModel.getCodice_fiscale());
		model.setNega(soapModel.getNega());
		model.setTag(soapModel.getTag());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AutorizzazioneDir> toModels(
		AutorizzazioneDirSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AutorizzazioneDir> models = new ArrayList<AutorizzazioneDir>(soapModels.length);

		for (AutorizzazioneDirSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(autorizzazione.dir.mef.service.util.ServiceProps.get(
				"lock.expiration.time.autorizzazione.dir.mef.model.AutorizzazioneDir"));

	public AutorizzazioneDirModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_autorizzazione;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_autorizzazione(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_autorizzazione;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AutorizzazioneDir.class;
	}

	@Override
	public String getModelClassName() {
		return AutorizzazioneDir.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_autorizzazione", getId_autorizzazione());
		attributes.put("id_applicazione", getId_applicazione());
		attributes.put("mef", getMef());
		attributes.put("dipartimento", getDipartimento());
		attributes.put("direzione", getDirezione());
		attributes.put("ufficio", getUfficio());
		attributes.put("codice_fiscale", getCodice_fiscale());
		attributes.put("nega", getNega());
		attributes.put("tag", getTag());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_autorizzazione = (Long)attributes.get("id_autorizzazione");

		if (id_autorizzazione != null) {
			setId_autorizzazione(id_autorizzazione);
		}

		Long id_applicazione = (Long)attributes.get("id_applicazione");

		if (id_applicazione != null) {
			setId_applicazione(id_applicazione);
		}

		Long mef = (Long)attributes.get("mef");

		if (mef != null) {
			setMef(mef);
		}

		Long dipartimento = (Long)attributes.get("dipartimento");

		if (dipartimento != null) {
			setDipartimento(dipartimento);
		}

		Long direzione = (Long)attributes.get("direzione");

		if (direzione != null) {
			setDirezione(direzione);
		}

		Long ufficio = (Long)attributes.get("ufficio");

		if (ufficio != null) {
			setUfficio(ufficio);
		}

		String codice_fiscale = (String)attributes.get("codice_fiscale");

		if (codice_fiscale != null) {
			setCodice_fiscale(codice_fiscale);
		}

		Boolean nega = (Boolean)attributes.get("nega");

		if (nega != null) {
			setNega(nega);
		}

		String tag = (String)attributes.get("tag");

		if (tag != null) {
			setTag(tag);
		}
	}

	@JSON
	@Override
	public long getId_autorizzazione() {
		return _id_autorizzazione;
	}

	@Override
	public void setId_autorizzazione(long id_autorizzazione) {
		_id_autorizzazione = id_autorizzazione;
	}

	@JSON
	@Override
	public long getId_applicazione() {
		return _id_applicazione;
	}

	@Override
	public void setId_applicazione(long id_applicazione) {
		_id_applicazione = id_applicazione;
	}

	@JSON
	@Override
	public long getMef() {
		return _mef;
	}

	@Override
	public void setMef(long mef) {
		_mef = mef;
	}

	@JSON
	@Override
	public long getDipartimento() {
		return _dipartimento;
	}

	@Override
	public void setDipartimento(long dipartimento) {
		_dipartimento = dipartimento;
	}

	@JSON
	@Override
	public long getDirezione() {
		return _direzione;
	}

	@Override
	public void setDirezione(long direzione) {
		_direzione = direzione;
	}

	@JSON
	@Override
	public long getUfficio() {
		return _ufficio;
	}

	@Override
	public void setUfficio(long ufficio) {
		_ufficio = ufficio;
	}

	@JSON
	@Override
	public String getCodice_fiscale() {
		if (_codice_fiscale == null) {
			return StringPool.BLANK;
		}
		else {
			return _codice_fiscale;
		}
	}

	@Override
	public void setCodice_fiscale(String codice_fiscale) {
		_codice_fiscale = codice_fiscale;
	}

	@JSON
	@Override
	public boolean getNega() {
		return _nega;
	}

	@JSON
	@Override
	public boolean isNega() {
		return _nega;
	}

	@Override
	public void setNega(boolean nega) {
		_nega = nega;
	}

	@JSON
	@Override
	public String getTag() {
		if (_tag == null) {
			return StringPool.BLANK;
		}
		else {
			return _tag;
		}
	}

	@Override
	public void setTag(String tag) {
		_tag = tag;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AutorizzazioneDir.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AutorizzazioneDir toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AutorizzazioneDir)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AutorizzazioneDirImpl autorizzazioneDirImpl = new AutorizzazioneDirImpl();

		autorizzazioneDirImpl.setId_autorizzazione(getId_autorizzazione());
		autorizzazioneDirImpl.setId_applicazione(getId_applicazione());
		autorizzazioneDirImpl.setMef(getMef());
		autorizzazioneDirImpl.setDipartimento(getDipartimento());
		autorizzazioneDirImpl.setDirezione(getDirezione());
		autorizzazioneDirImpl.setUfficio(getUfficio());
		autorizzazioneDirImpl.setCodice_fiscale(getCodice_fiscale());
		autorizzazioneDirImpl.setNega(getNega());
		autorizzazioneDirImpl.setTag(getTag());

		autorizzazioneDirImpl.resetOriginalValues();

		return autorizzazioneDirImpl;
	}

	@Override
	public int compareTo(AutorizzazioneDir autorizzazioneDir) {
		long primaryKey = autorizzazioneDir.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AutorizzazioneDir)) {
			return false;
		}

		AutorizzazioneDir autorizzazioneDir = (AutorizzazioneDir)obj;

		long primaryKey = autorizzazioneDir.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AutorizzazioneDir> toCacheModel() {
		AutorizzazioneDirCacheModel autorizzazioneDirCacheModel = new AutorizzazioneDirCacheModel();

		autorizzazioneDirCacheModel.id_autorizzazione = getId_autorizzazione();

		autorizzazioneDirCacheModel.id_applicazione = getId_applicazione();

		autorizzazioneDirCacheModel.mef = getMef();

		autorizzazioneDirCacheModel.dipartimento = getDipartimento();

		autorizzazioneDirCacheModel.direzione = getDirezione();

		autorizzazioneDirCacheModel.ufficio = getUfficio();

		autorizzazioneDirCacheModel.codice_fiscale = getCodice_fiscale();

		String codice_fiscale = autorizzazioneDirCacheModel.codice_fiscale;

		if ((codice_fiscale != null) && (codice_fiscale.length() == 0)) {
			autorizzazioneDirCacheModel.codice_fiscale = null;
		}

		autorizzazioneDirCacheModel.nega = getNega();

		autorizzazioneDirCacheModel.tag = getTag();

		String tag = autorizzazioneDirCacheModel.tag;

		if ((tag != null) && (tag.length() == 0)) {
			autorizzazioneDirCacheModel.tag = null;
		}

		return autorizzazioneDirCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id_autorizzazione=");
		sb.append(getId_autorizzazione());
		sb.append(", id_applicazione=");
		sb.append(getId_applicazione());
		sb.append(", mef=");
		sb.append(getMef());
		sb.append(", dipartimento=");
		sb.append(getDipartimento());
		sb.append(", direzione=");
		sb.append(getDirezione());
		sb.append(", ufficio=");
		sb.append(getUfficio());
		sb.append(", codice_fiscale=");
		sb.append(getCodice_fiscale());
		sb.append(", nega=");
		sb.append(getNega());
		sb.append(", tag=");
		sb.append(getTag());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("autorizzazione.dir.mef.model.AutorizzazioneDir");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_autorizzazione</column-name><column-value><![CDATA[");
		sb.append(getId_autorizzazione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_applicazione</column-name><column-value><![CDATA[");
		sb.append(getId_applicazione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mef</column-name><column-value><![CDATA[");
		sb.append(getMef());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dipartimento</column-name><column-value><![CDATA[");
		sb.append(getDipartimento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>direzione</column-name><column-value><![CDATA[");
		sb.append(getDirezione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ufficio</column-name><column-value><![CDATA[");
		sb.append(getUfficio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codice_fiscale</column-name><column-value><![CDATA[");
		sb.append(getCodice_fiscale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nega</column-name><column-value><![CDATA[");
		sb.append(getNega());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tag</column-name><column-value><![CDATA[");
		sb.append(getTag());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AutorizzazioneDir.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AutorizzazioneDir.class
		};
	private long _id_autorizzazione;
	private long _id_applicazione;
	private long _mef;
	private long _dipartimento;
	private long _direzione;
	private long _ufficio;
	private String _codice_fiscale;
	private boolean _nega;
	private String _tag;
	private AutorizzazioneDir _escapedModel;
}