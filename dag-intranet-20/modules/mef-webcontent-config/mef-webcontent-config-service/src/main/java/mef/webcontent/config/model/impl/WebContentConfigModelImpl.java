/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mef.webcontent.config.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import mef.webcontent.config.model.WebContentConfig;
import mef.webcontent.config.model.WebContentConfigModel;
import mef.webcontent.config.model.WebContentConfigSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WebContentConfig service. Represents a row in the &quot;MEFWCONT_WebContentConfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WebContentConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WebContentConfigImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WebContentConfigImpl
 * @see WebContentConfig
 * @see WebContentConfigModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WebContentConfigModelImpl extends BaseModelImpl<WebContentConfig>
	implements WebContentConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a web content config model instance should use the {@link WebContentConfig} interface instead.
	 */
	public static final String TABLE_NAME = "MEFWCONT_WebContentConfig";
	public static final Object[][] TABLE_COLUMNS = {
			{ "contentid", Types.BIGINT },
			{ "html", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("contentid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("html", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFWCONT_WebContentConfig (contentid LONG not null primary key,html STRING null)";
	public static final String TABLE_SQL_DROP = "drop table MEFWCONT_WebContentConfig";
	public static final String ORDER_BY_JPQL = " ORDER BY webContentConfig.contentid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFWCONT_WebContentConfig.contentid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(mef.webcontent.config.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.mef.webcontent.config.model.WebContentConfig"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(mef.webcontent.config.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.mef.webcontent.config.model.WebContentConfig"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WebContentConfig toModel(WebContentConfigSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WebContentConfig model = new WebContentConfigImpl();

		model.setContentid(soapModel.getContentid());
		model.setHtml(soapModel.getHtml());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WebContentConfig> toModels(
		WebContentConfigSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WebContentConfig> models = new ArrayList<WebContentConfig>(soapModels.length);

		for (WebContentConfigSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(mef.webcontent.config.service.util.PropsUtil.get(
				"lock.expiration.time.mef.webcontent.config.model.WebContentConfig"));

	public WebContentConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contentid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContentid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contentid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WebContentConfig.class;
	}

	@Override
	public String getModelClassName() {
		return WebContentConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contentid", getContentid());
		attributes.put("html", getHtml());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long contentid = (Long)attributes.get("contentid");

		if (contentid != null) {
			setContentid(contentid);
		}

		String html = (String)attributes.get("html");

		if (html != null) {
			setHtml(html);
		}
	}

	@JSON
	@Override
	public long getContentid() {
		return _contentid;
	}

	@Override
	public void setContentid(long contentid) {
		_contentid = contentid;
	}

	@JSON
	@Override
	public String getHtml() {
		if (_html == null) {
			return StringPool.BLANK;
		}
		else {
			return _html;
		}
	}

	@Override
	public void setHtml(String html) {
		_html = html;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			WebContentConfig.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WebContentConfig toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WebContentConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WebContentConfigImpl webContentConfigImpl = new WebContentConfigImpl();

		webContentConfigImpl.setContentid(getContentid());
		webContentConfigImpl.setHtml(getHtml());

		webContentConfigImpl.resetOriginalValues();

		return webContentConfigImpl;
	}

	@Override
	public int compareTo(WebContentConfig webContentConfig) {
		long primaryKey = webContentConfig.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WebContentConfig)) {
			return false;
		}

		WebContentConfig webContentConfig = (WebContentConfig)obj;

		long primaryKey = webContentConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<WebContentConfig> toCacheModel() {
		WebContentConfigCacheModel webContentConfigCacheModel = new WebContentConfigCacheModel();

		webContentConfigCacheModel.contentid = getContentid();

		webContentConfigCacheModel.html = getHtml();

		String html = webContentConfigCacheModel.html;

		if ((html != null) && (html.length() == 0)) {
			webContentConfigCacheModel.html = null;
		}

		return webContentConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{contentid=");
		sb.append(getContentid());
		sb.append(", html=");
		sb.append(getHtml());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("mef.webcontent.config.model.WebContentConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contentid</column-name><column-value><![CDATA[");
		sb.append(getContentid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>html</column-name><column-value><![CDATA[");
		sb.append(getHtml());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = WebContentConfig.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			WebContentConfig.class
		};
	private long _contentid;
	private String _html;
	private WebContentConfig _escapedModel;
}