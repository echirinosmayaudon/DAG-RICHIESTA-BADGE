/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.accenture.lavoro.agile.istanza.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.accenture.lavoro.agile.istanza.mef.model.RichLavAgile;
import com.accenture.lavoro.agile.istanza.mef.model.RichLavAgileModel;
import com.accenture.lavoro.agile.istanza.mef.model.RichLavAgileSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RichLavAgile service. Represents a row in the &quot;MEFISTAGILE_RichLavAgile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RichLavAgileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RichLavAgileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RichLavAgileImpl
 * @see RichLavAgile
 * @see RichLavAgileModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RichLavAgileModelImpl extends BaseModelImpl<RichLavAgile>
	implements RichLavAgileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rich lav agile model instance should use the {@link RichLavAgile} interface instead.
	 */
	public static final String TABLE_NAME = "MEFISTAGILE_RichLavAgile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "id_richiesta", Types.BIGINT },
			{ "cognome", Types.VARCHAR },
			{ "nome", Types.VARCHAR },
			{ "dipartimento", Types.BIGINT },
			{ "direzione", Types.BIGINT },
			{ "ufficio", Types.BIGINT },
			{ "screename", Types.VARCHAR },
			{ "json_richiedente", Types.VARCHAR },
			{ "json_richiesta", Types.VARCHAR },
			{ "peso_tot", Types.INTEGER },
			{ "peso_plus", Types.VARCHAR },
			{ "bando", Types.VARCHAR },
			{ "data_richiesta", Types.TIMESTAMP },
			{ "allegato", Types.VARCHAR },
			{ "pdf", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_richiesta", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cognome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dipartimento", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("direzione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ufficio", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("screename", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("json_richiedente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("json_richiesta", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("peso_tot", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("peso_plus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bando", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_richiesta", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("allegato", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pdf", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFISTAGILE_RichLavAgile (id_ LONG not null primary key,id_richiesta LONG,cognome VARCHAR(75) null,nome VARCHAR(75) null,dipartimento LONG,direzione LONG,ufficio LONG,screename VARCHAR(75) null,json_richiedente VARCHAR(2000) null,json_richiesta VARCHAR(2000) null,peso_tot INTEGER,peso_plus VARCHAR(75) null,bando VARCHAR(75) null,data_richiesta DATE null,allegato VARCHAR(200) null,pdf VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MEFISTAGILE_RichLavAgile";
	public static final String ORDER_BY_JPQL = " ORDER BY richLavAgile.data_richiesta DESC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFISTAGILE_RichLavAgile.data_richiesta DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.accenture.lavoro.agile.istanza.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.accenture.lavoro.agile.istanza.mef.model.RichLavAgile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.accenture.lavoro.agile.istanza.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.accenture.lavoro.agile.istanza.mef.model.RichLavAgile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.accenture.lavoro.agile.istanza.mef.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.accenture.lavoro.agile.istanza.mef.model.RichLavAgile"),
			true);
	public static final long SCREENAME_COLUMN_BITMASK = 1L;
	public static final long DATA_RICHIESTA_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RichLavAgile toModel(RichLavAgileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RichLavAgile model = new RichLavAgileImpl();

		model.setId(soapModel.getId());
		model.setId_richiesta(soapModel.getId_richiesta());
		model.setCognome(soapModel.getCognome());
		model.setNome(soapModel.getNome());
		model.setDipartimento(soapModel.getDipartimento());
		model.setDirezione(soapModel.getDirezione());
		model.setUfficio(soapModel.getUfficio());
		model.setScreename(soapModel.getScreename());
		model.setJson_richiedente(soapModel.getJson_richiedente());
		model.setJson_richiesta(soapModel.getJson_richiesta());
		model.setPeso_tot(soapModel.getPeso_tot());
		model.setPeso_plus(soapModel.getPeso_plus());
		model.setBando(soapModel.getBando());
		model.setData_richiesta(soapModel.getData_richiesta());
		model.setAllegato(soapModel.getAllegato());
		model.setPdf(soapModel.getPdf());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RichLavAgile> toModels(RichLavAgileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RichLavAgile> models = new ArrayList<RichLavAgile>(soapModels.length);

		for (RichLavAgileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.accenture.lavoro.agile.istanza.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.accenture.lavoro.agile.istanza.mef.model.RichLavAgile"));

	public RichLavAgileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RichLavAgile.class;
	}

	@Override
	public String getModelClassName() {
		return RichLavAgile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("id_richiesta", getId_richiesta());
		attributes.put("cognome", getCognome());
		attributes.put("nome", getNome());
		attributes.put("dipartimento", getDipartimento());
		attributes.put("direzione", getDirezione());
		attributes.put("ufficio", getUfficio());
		attributes.put("screename", getScreename());
		attributes.put("json_richiedente", getJson_richiedente());
		attributes.put("json_richiesta", getJson_richiesta());
		attributes.put("peso_tot", getPeso_tot());
		attributes.put("peso_plus", getPeso_plus());
		attributes.put("bando", getBando());
		attributes.put("data_richiesta", getData_richiesta());
		attributes.put("allegato", getAllegato());
		attributes.put("pdf", getPdf());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long id_richiesta = (Long)attributes.get("id_richiesta");

		if (id_richiesta != null) {
			setId_richiesta(id_richiesta);
		}

		String cognome = (String)attributes.get("cognome");

		if (cognome != null) {
			setCognome(cognome);
		}

		String nome = (String)attributes.get("nome");

		if (nome != null) {
			setNome(nome);
		}

		Long dipartimento = (Long)attributes.get("dipartimento");

		if (dipartimento != null) {
			setDipartimento(dipartimento);
		}

		Long direzione = (Long)attributes.get("direzione");

		if (direzione != null) {
			setDirezione(direzione);
		}

		Long ufficio = (Long)attributes.get("ufficio");

		if (ufficio != null) {
			setUfficio(ufficio);
		}

		String screename = (String)attributes.get("screename");

		if (screename != null) {
			setScreename(screename);
		}

		String json_richiedente = (String)attributes.get("json_richiedente");

		if (json_richiedente != null) {
			setJson_richiedente(json_richiedente);
		}

		String json_richiesta = (String)attributes.get("json_richiesta");

		if (json_richiesta != null) {
			setJson_richiesta(json_richiesta);
		}

		Integer peso_tot = (Integer)attributes.get("peso_tot");

		if (peso_tot != null) {
			setPeso_tot(peso_tot);
		}

		String peso_plus = (String)attributes.get("peso_plus");

		if (peso_plus != null) {
			setPeso_plus(peso_plus);
		}

		String bando = (String)attributes.get("bando");

		if (bando != null) {
			setBando(bando);
		}

		Date data_richiesta = (Date)attributes.get("data_richiesta");

		if (data_richiesta != null) {
			setData_richiesta(data_richiesta);
		}

		String allegato = (String)attributes.get("allegato");

		if (allegato != null) {
			setAllegato(allegato);
		}

		String pdf = (String)attributes.get("pdf");

		if (pdf != null) {
			setPdf(pdf);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getId_richiesta() {
		return _id_richiesta;
	}

	@Override
	public void setId_richiesta(long id_richiesta) {
		_id_richiesta = id_richiesta;
	}

	@JSON
	@Override
	public String getCognome() {
		if (_cognome == null) {
			return "";
		}
		else {
			return _cognome;
		}
	}

	@Override
	public void setCognome(String cognome) {
		_cognome = cognome;
	}

	@JSON
	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_nome = nome;
	}

	@JSON
	@Override
	public long getDipartimento() {
		return _dipartimento;
	}

	@Override
	public void setDipartimento(long dipartimento) {
		_dipartimento = dipartimento;
	}

	@JSON
	@Override
	public long getDirezione() {
		return _direzione;
	}

	@Override
	public void setDirezione(long direzione) {
		_direzione = direzione;
	}

	@JSON
	@Override
	public long getUfficio() {
		return _ufficio;
	}

	@Override
	public void setUfficio(long ufficio) {
		_ufficio = ufficio;
	}

	@JSON
	@Override
	public String getScreename() {
		if (_screename == null) {
			return "";
		}
		else {
			return _screename;
		}
	}

	@Override
	public void setScreename(String screename) {
		_columnBitmask |= SCREENAME_COLUMN_BITMASK;

		if (_originalScreename == null) {
			_originalScreename = _screename;
		}

		_screename = screename;
	}

	public String getOriginalScreename() {
		return GetterUtil.getString(_originalScreename);
	}

	@JSON
	@Override
	public String getJson_richiedente() {
		if (_json_richiedente == null) {
			return "";
		}
		else {
			return _json_richiedente;
		}
	}

	@Override
	public void setJson_richiedente(String json_richiedente) {
		_json_richiedente = json_richiedente;
	}

	@JSON
	@Override
	public String getJson_richiesta() {
		if (_json_richiesta == null) {
			return "";
		}
		else {
			return _json_richiesta;
		}
	}

	@Override
	public void setJson_richiesta(String json_richiesta) {
		_json_richiesta = json_richiesta;
	}

	@JSON
	@Override
	public int getPeso_tot() {
		return _peso_tot;
	}

	@Override
	public void setPeso_tot(int peso_tot) {
		_peso_tot = peso_tot;
	}

	@JSON
	@Override
	public String getPeso_plus() {
		if (_peso_plus == null) {
			return "";
		}
		else {
			return _peso_plus;
		}
	}

	@Override
	public void setPeso_plus(String peso_plus) {
		_peso_plus = peso_plus;
	}

	@JSON
	@Override
	public String getBando() {
		if (_bando == null) {
			return "";
		}
		else {
			return _bando;
		}
	}

	@Override
	public void setBando(String bando) {
		_bando = bando;
	}

	@JSON
	@Override
	public Date getData_richiesta() {
		return _data_richiesta;
	}

	@Override
	public void setData_richiesta(Date data_richiesta) {
		_columnBitmask = -1L;

		_data_richiesta = data_richiesta;
	}

	@JSON
	@Override
	public String getAllegato() {
		if (_allegato == null) {
			return "";
		}
		else {
			return _allegato;
		}
	}

	@Override
	public void setAllegato(String allegato) {
		_allegato = allegato;
	}

	@JSON
	@Override
	public String getPdf() {
		if (_pdf == null) {
			return "";
		}
		else {
			return _pdf;
		}
	}

	@Override
	public void setPdf(String pdf) {
		_pdf = pdf;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RichLavAgile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RichLavAgile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RichLavAgile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RichLavAgileImpl richLavAgileImpl = new RichLavAgileImpl();

		richLavAgileImpl.setId(getId());
		richLavAgileImpl.setId_richiesta(getId_richiesta());
		richLavAgileImpl.setCognome(getCognome());
		richLavAgileImpl.setNome(getNome());
		richLavAgileImpl.setDipartimento(getDipartimento());
		richLavAgileImpl.setDirezione(getDirezione());
		richLavAgileImpl.setUfficio(getUfficio());
		richLavAgileImpl.setScreename(getScreename());
		richLavAgileImpl.setJson_richiedente(getJson_richiedente());
		richLavAgileImpl.setJson_richiesta(getJson_richiesta());
		richLavAgileImpl.setPeso_tot(getPeso_tot());
		richLavAgileImpl.setPeso_plus(getPeso_plus());
		richLavAgileImpl.setBando(getBando());
		richLavAgileImpl.setData_richiesta(getData_richiesta());
		richLavAgileImpl.setAllegato(getAllegato());
		richLavAgileImpl.setPdf(getPdf());

		richLavAgileImpl.resetOriginalValues();

		return richLavAgileImpl;
	}

	@Override
	public int compareTo(RichLavAgile richLavAgile) {
		int value = 0;

		value = DateUtil.compareTo(getData_richiesta(),
				richLavAgile.getData_richiesta());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RichLavAgile)) {
			return false;
		}

		RichLavAgile richLavAgile = (RichLavAgile)obj;

		long primaryKey = richLavAgile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RichLavAgileModelImpl richLavAgileModelImpl = this;

		richLavAgileModelImpl._originalScreename = richLavAgileModelImpl._screename;

		richLavAgileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RichLavAgile> toCacheModel() {
		RichLavAgileCacheModel richLavAgileCacheModel = new RichLavAgileCacheModel();

		richLavAgileCacheModel.id = getId();

		richLavAgileCacheModel.id_richiesta = getId_richiesta();

		richLavAgileCacheModel.cognome = getCognome();

		String cognome = richLavAgileCacheModel.cognome;

		if ((cognome != null) && (cognome.length() == 0)) {
			richLavAgileCacheModel.cognome = null;
		}

		richLavAgileCacheModel.nome = getNome();

		String nome = richLavAgileCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			richLavAgileCacheModel.nome = null;
		}

		richLavAgileCacheModel.dipartimento = getDipartimento();

		richLavAgileCacheModel.direzione = getDirezione();

		richLavAgileCacheModel.ufficio = getUfficio();

		richLavAgileCacheModel.screename = getScreename();

		String screename = richLavAgileCacheModel.screename;

		if ((screename != null) && (screename.length() == 0)) {
			richLavAgileCacheModel.screename = null;
		}

		richLavAgileCacheModel.json_richiedente = getJson_richiedente();

		String json_richiedente = richLavAgileCacheModel.json_richiedente;

		if ((json_richiedente != null) && (json_richiedente.length() == 0)) {
			richLavAgileCacheModel.json_richiedente = null;
		}

		richLavAgileCacheModel.json_richiesta = getJson_richiesta();

		String json_richiesta = richLavAgileCacheModel.json_richiesta;

		if ((json_richiesta != null) && (json_richiesta.length() == 0)) {
			richLavAgileCacheModel.json_richiesta = null;
		}

		richLavAgileCacheModel.peso_tot = getPeso_tot();

		richLavAgileCacheModel.peso_plus = getPeso_plus();

		String peso_plus = richLavAgileCacheModel.peso_plus;

		if ((peso_plus != null) && (peso_plus.length() == 0)) {
			richLavAgileCacheModel.peso_plus = null;
		}

		richLavAgileCacheModel.bando = getBando();

		String bando = richLavAgileCacheModel.bando;

		if ((bando != null) && (bando.length() == 0)) {
			richLavAgileCacheModel.bando = null;
		}

		Date data_richiesta = getData_richiesta();

		if (data_richiesta != null) {
			richLavAgileCacheModel.data_richiesta = data_richiesta.getTime();
		}
		else {
			richLavAgileCacheModel.data_richiesta = Long.MIN_VALUE;
		}

		richLavAgileCacheModel.allegato = getAllegato();

		String allegato = richLavAgileCacheModel.allegato;

		if ((allegato != null) && (allegato.length() == 0)) {
			richLavAgileCacheModel.allegato = null;
		}

		richLavAgileCacheModel.pdf = getPdf();

		String pdf = richLavAgileCacheModel.pdf;

		if ((pdf != null) && (pdf.length() == 0)) {
			richLavAgileCacheModel.pdf = null;
		}

		return richLavAgileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", id_richiesta=");
		sb.append(getId_richiesta());
		sb.append(", cognome=");
		sb.append(getCognome());
		sb.append(", nome=");
		sb.append(getNome());
		sb.append(", dipartimento=");
		sb.append(getDipartimento());
		sb.append(", direzione=");
		sb.append(getDirezione());
		sb.append(", ufficio=");
		sb.append(getUfficio());
		sb.append(", screename=");
		sb.append(getScreename());
		sb.append(", json_richiedente=");
		sb.append(getJson_richiedente());
		sb.append(", json_richiesta=");
		sb.append(getJson_richiesta());
		sb.append(", peso_tot=");
		sb.append(getPeso_tot());
		sb.append(", peso_plus=");
		sb.append(getPeso_plus());
		sb.append(", bando=");
		sb.append(getBando());
		sb.append(", data_richiesta=");
		sb.append(getData_richiesta());
		sb.append(", allegato=");
		sb.append(getAllegato());
		sb.append(", pdf=");
		sb.append(getPdf());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.accenture.lavoro.agile.istanza.mef.model.RichLavAgile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_richiesta</column-name><column-value><![CDATA[");
		sb.append(getId_richiesta());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cognome</column-name><column-value><![CDATA[");
		sb.append(getCognome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nome</column-name><column-value><![CDATA[");
		sb.append(getNome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dipartimento</column-name><column-value><![CDATA[");
		sb.append(getDipartimento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>direzione</column-name><column-value><![CDATA[");
		sb.append(getDirezione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ufficio</column-name><column-value><![CDATA[");
		sb.append(getUfficio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>screename</column-name><column-value><![CDATA[");
		sb.append(getScreename());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>json_richiedente</column-name><column-value><![CDATA[");
		sb.append(getJson_richiedente());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>json_richiesta</column-name><column-value><![CDATA[");
		sb.append(getJson_richiesta());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>peso_tot</column-name><column-value><![CDATA[");
		sb.append(getPeso_tot());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>peso_plus</column-name><column-value><![CDATA[");
		sb.append(getPeso_plus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bando</column-name><column-value><![CDATA[");
		sb.append(getBando());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_richiesta</column-name><column-value><![CDATA[");
		sb.append(getData_richiesta());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allegato</column-name><column-value><![CDATA[");
		sb.append(getAllegato());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdf</column-name><column-value><![CDATA[");
		sb.append(getPdf());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RichLavAgile.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RichLavAgile.class, ModelWrapper.class
		};
	private long _id;
	private long _id_richiesta;
	private String _cognome;
	private String _nome;
	private long _dipartimento;
	private long _direzione;
	private long _ufficio;
	private String _screename;
	private String _originalScreename;
	private String _json_richiedente;
	private String _json_richiesta;
	private int _peso_tot;
	private String _peso_plus;
	private String _bando;
	private Date _data_richiesta;
	private String _allegato;
	private String _pdf;
	private long _columnBitmask;
	private RichLavAgile _escapedModel;
}