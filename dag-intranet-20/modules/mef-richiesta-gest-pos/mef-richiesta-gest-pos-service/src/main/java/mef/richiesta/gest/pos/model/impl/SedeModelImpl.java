/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mef.richiesta.gest.pos.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import mef.richiesta.gest.pos.model.Sede;
import mef.richiesta.gest.pos.model.SedeModel;

/**
 * The base model implementation for the Sede service. Represents a row in the &quot;BADGE_POS_Sede&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>SedeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SedeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SedeImpl
 * @generated
 */
@ProviderType
public class SedeModelImpl extends BaseModelImpl<Sede> implements SedeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sede model instance should use the <code>Sede</code> interface instead.
	 */
	public static final String TABLE_NAME = "BADGE_POS_Sede";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_pk_sede", Types.BIGINT}, {"id_sede", Types.BIGINT},
		{"cod_sede", Types.VARCHAR}, {"desc_", Types.VARCHAR},
		{"data_ins", Types.VARCHAR}, {"data_agg", Types.VARCHAR},
		{"user_ins", Types.VARCHAR}, {"user_agg", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_pk_sede", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_sede", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cod_sede", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("desc_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_ins", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_agg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("user_ins", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("user_agg", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BADGE_POS_Sede (id_pk_sede LONG not null primary key,id_sede LONG,cod_sede VARCHAR(75) null,desc_ VARCHAR(75) null,data_ins VARCHAR(75) null,data_agg VARCHAR(75) null,user_ins VARCHAR(75) null,user_agg VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table BADGE_POS_Sede";

	public static final String ORDER_BY_JPQL = " ORDER BY sede.id_pk_sede ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BADGE_POS_Sede.id_pk_sede ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		mef.richiesta.gest.pos.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.mef.richiesta.gest.pos.model.Sede"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		mef.richiesta.gest.pos.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.mef.richiesta.gest.pos.model.Sede"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		mef.richiesta.gest.pos.service.util.ServiceProps.get(
			"lock.expiration.time.mef.richiesta.gest.pos.model.Sede"));

	public SedeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_pk_sede;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_pk_sede(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_pk_sede;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Sede.class;
	}

	@Override
	public String getModelClassName() {
		return Sede.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Sede, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Sede, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Sede, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Sede)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Sede, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Sede, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Sede)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Sede, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Sede, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Sede>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Sede.class.getClassLoader(), Sede.class, ModelWrapper.class);

		try {
			Constructor<Sede> constructor =
				(Constructor<Sede>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Sede, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Sede, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Sede, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Sede, Object>>();
		Map<String, BiConsumer<Sede, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Sede, ?>>();

		attributeGetterFunctions.put(
			"id_pk_sede",
			new Function<Sede, Object>() {

				@Override
				public Object apply(Sede sede) {
					return sede.getId_pk_sede();
				}

			});
		attributeSetterBiConsumers.put(
			"id_pk_sede",
			new BiConsumer<Sede, Object>() {

				@Override
				public void accept(Sede sede, Object id_pk_sede) {
					sede.setId_pk_sede((Long)id_pk_sede);
				}

			});
		attributeGetterFunctions.put(
			"id_sede",
			new Function<Sede, Object>() {

				@Override
				public Object apply(Sede sede) {
					return sede.getId_sede();
				}

			});
		attributeSetterBiConsumers.put(
			"id_sede",
			new BiConsumer<Sede, Object>() {

				@Override
				public void accept(Sede sede, Object id_sede) {
					sede.setId_sede((Long)id_sede);
				}

			});
		attributeGetterFunctions.put(
			"cod_sede",
			new Function<Sede, Object>() {

				@Override
				public Object apply(Sede sede) {
					return sede.getCod_sede();
				}

			});
		attributeSetterBiConsumers.put(
			"cod_sede",
			new BiConsumer<Sede, Object>() {

				@Override
				public void accept(Sede sede, Object cod_sede) {
					sede.setCod_sede((String)cod_sede);
				}

			});
		attributeGetterFunctions.put(
			"desc",
			new Function<Sede, Object>() {

				@Override
				public Object apply(Sede sede) {
					return sede.getDesc();
				}

			});
		attributeSetterBiConsumers.put(
			"desc",
			new BiConsumer<Sede, Object>() {

				@Override
				public void accept(Sede sede, Object desc) {
					sede.setDesc((String)desc);
				}

			});
		attributeGetterFunctions.put(
			"data_ins",
			new Function<Sede, Object>() {

				@Override
				public Object apply(Sede sede) {
					return sede.getData_ins();
				}

			});
		attributeSetterBiConsumers.put(
			"data_ins",
			new BiConsumer<Sede, Object>() {

				@Override
				public void accept(Sede sede, Object data_ins) {
					sede.setData_ins((String)data_ins);
				}

			});
		attributeGetterFunctions.put(
			"data_agg",
			new Function<Sede, Object>() {

				@Override
				public Object apply(Sede sede) {
					return sede.getData_agg();
				}

			});
		attributeSetterBiConsumers.put(
			"data_agg",
			new BiConsumer<Sede, Object>() {

				@Override
				public void accept(Sede sede, Object data_agg) {
					sede.setData_agg((String)data_agg);
				}

			});
		attributeGetterFunctions.put(
			"user_ins",
			new Function<Sede, Object>() {

				@Override
				public Object apply(Sede sede) {
					return sede.getUser_ins();
				}

			});
		attributeSetterBiConsumers.put(
			"user_ins",
			new BiConsumer<Sede, Object>() {

				@Override
				public void accept(Sede sede, Object user_ins) {
					sede.setUser_ins((String)user_ins);
				}

			});
		attributeGetterFunctions.put(
			"user_agg",
			new Function<Sede, Object>() {

				@Override
				public Object apply(Sede sede) {
					return sede.getUser_agg();
				}

			});
		attributeSetterBiConsumers.put(
			"user_agg",
			new BiConsumer<Sede, Object>() {

				@Override
				public void accept(Sede sede, Object user_agg) {
					sede.setUser_agg((String)user_agg);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId_pk_sede() {
		return _id_pk_sede;
	}

	@Override
	public void setId_pk_sede(long id_pk_sede) {
		_id_pk_sede = id_pk_sede;
	}

	@Override
	public long getId_sede() {
		return _id_sede;
	}

	@Override
	public void setId_sede(long id_sede) {
		_id_sede = id_sede;
	}

	@Override
	public String getCod_sede() {
		if (_cod_sede == null) {
			return "";
		}
		else {
			return _cod_sede;
		}
	}

	@Override
	public void setCod_sede(String cod_sede) {
		_cod_sede = cod_sede;
	}

	@Override
	public String getDesc() {
		if (_desc == null) {
			return "";
		}
		else {
			return _desc;
		}
	}

	@Override
	public void setDesc(String desc) {
		_desc = desc;
	}

	@Override
	public String getData_ins() {
		if (_data_ins == null) {
			return "";
		}
		else {
			return _data_ins;
		}
	}

	@Override
	public void setData_ins(String data_ins) {
		_data_ins = data_ins;
	}

	@Override
	public String getData_agg() {
		if (_data_agg == null) {
			return "";
		}
		else {
			return _data_agg;
		}
	}

	@Override
	public void setData_agg(String data_agg) {
		_data_agg = data_agg;
	}

	@Override
	public String getUser_ins() {
		if (_user_ins == null) {
			return "";
		}
		else {
			return _user_ins;
		}
	}

	@Override
	public void setUser_ins(String user_ins) {
		_user_ins = user_ins;
	}

	@Override
	public String getUser_agg() {
		if (_user_agg == null) {
			return "";
		}
		else {
			return _user_agg;
		}
	}

	@Override
	public void setUser_agg(String user_agg) {
		_user_agg = user_agg;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Sede.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Sede toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SedeImpl sedeImpl = new SedeImpl();

		sedeImpl.setId_pk_sede(getId_pk_sede());
		sedeImpl.setId_sede(getId_sede());
		sedeImpl.setCod_sede(getCod_sede());
		sedeImpl.setDesc(getDesc());
		sedeImpl.setData_ins(getData_ins());
		sedeImpl.setData_agg(getData_agg());
		sedeImpl.setUser_ins(getUser_ins());
		sedeImpl.setUser_agg(getUser_agg());

		sedeImpl.resetOriginalValues();

		return sedeImpl;
	}

	@Override
	public int compareTo(Sede sede) {
		long primaryKey = sede.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Sede)) {
			return false;
		}

		Sede sede = (Sede)obj;

		long primaryKey = sede.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Sede> toCacheModel() {
		SedeCacheModel sedeCacheModel = new SedeCacheModel();

		sedeCacheModel.id_pk_sede = getId_pk_sede();

		sedeCacheModel.id_sede = getId_sede();

		sedeCacheModel.cod_sede = getCod_sede();

		String cod_sede = sedeCacheModel.cod_sede;

		if ((cod_sede != null) && (cod_sede.length() == 0)) {
			sedeCacheModel.cod_sede = null;
		}

		sedeCacheModel.desc = getDesc();

		String desc = sedeCacheModel.desc;

		if ((desc != null) && (desc.length() == 0)) {
			sedeCacheModel.desc = null;
		}

		sedeCacheModel.data_ins = getData_ins();

		String data_ins = sedeCacheModel.data_ins;

		if ((data_ins != null) && (data_ins.length() == 0)) {
			sedeCacheModel.data_ins = null;
		}

		sedeCacheModel.data_agg = getData_agg();

		String data_agg = sedeCacheModel.data_agg;

		if ((data_agg != null) && (data_agg.length() == 0)) {
			sedeCacheModel.data_agg = null;
		}

		sedeCacheModel.user_ins = getUser_ins();

		String user_ins = sedeCacheModel.user_ins;

		if ((user_ins != null) && (user_ins.length() == 0)) {
			sedeCacheModel.user_ins = null;
		}

		sedeCacheModel.user_agg = getUser_agg();

		String user_agg = sedeCacheModel.user_agg;

		if ((user_agg != null) && (user_agg.length() == 0)) {
			sedeCacheModel.user_agg = null;
		}

		return sedeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Sede, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Sede, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Sede, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Sede)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Sede, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Sede, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Sede, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Sede)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Sede>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _id_pk_sede;
	private long _id_sede;
	private String _cod_sede;
	private String _desc;
	private String _data_ins;
	private String _data_agg;
	private String _user_ins;
	private String _user_agg;
	private Sede _escapedModel;

}