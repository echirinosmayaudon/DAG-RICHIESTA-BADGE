/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mef.richiesta.gest.pos.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import mef.richiesta.gest.pos.model.Piano;
import mef.richiesta.gest.pos.service.PianoLocalService;
import mef.richiesta.gest.pos.service.persistence.CorridoioPersistence;
import mef.richiesta.gest.pos.service.persistence.FuoriPortaPersistence;
import mef.richiesta.gest.pos.service.persistence.PianoPersistence;
import mef.richiesta.gest.pos.service.persistence.SedePersistence;

/**
 * Provides the base implementation for the piano local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link mef.richiesta.gest.pos.service.impl.PianoLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see mef.richiesta.gest.pos.service.impl.PianoLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class PianoLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements PianoLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>PianoLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>mef.richiesta.gest.pos.service.PianoLocalServiceUtil</code>.
	 */

	/**
	 * Adds the piano to the database. Also notifies the appropriate model listeners.
	 *
	 * @param piano the piano
	 * @return the piano that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Piano addPiano(Piano piano) {
		piano.setNew(true);

		return pianoPersistence.update(piano);
	}

	/**
	 * Creates a new piano with the primary key. Does not add the piano to the database.
	 *
	 * @param id_pk_piano the primary key for the new piano
	 * @return the new piano
	 */
	@Override
	@Transactional(enabled = false)
	public Piano createPiano(long id_pk_piano) {
		return pianoPersistence.create(id_pk_piano);
	}

	/**
	 * Deletes the piano with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id_pk_piano the primary key of the piano
	 * @return the piano that was removed
	 * @throws PortalException if a piano with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Piano deletePiano(long id_pk_piano) throws PortalException {
		return pianoPersistence.remove(id_pk_piano);
	}

	/**
	 * Deletes the piano from the database. Also notifies the appropriate model listeners.
	 *
	 * @param piano the piano
	 * @return the piano that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Piano deletePiano(Piano piano) {
		return pianoPersistence.remove(piano);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			Piano.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return pianoPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>mef.richiesta.gest.pos.model.impl.PianoModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return pianoPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>mef.richiesta.gest.pos.model.impl.PianoModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return pianoPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return pianoPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return pianoPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Piano fetchPiano(long id_pk_piano) {
		return pianoPersistence.fetchByPrimaryKey(id_pk_piano);
	}

	/**
	 * Returns the piano with the primary key.
	 *
	 * @param id_pk_piano the primary key of the piano
	 * @return the piano
	 * @throws PortalException if a piano with the primary key could not be found
	 */
	@Override
	public Piano getPiano(long id_pk_piano) throws PortalException {
		return pianoPersistence.findByPrimaryKey(id_pk_piano);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(pianoLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Piano.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id_pk_piano");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(pianoLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Piano.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"id_pk_piano");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(pianoLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Piano.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id_pk_piano");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return pianoLocalService.deletePiano((Piano)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return pianoPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the pianos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>mef.richiesta.gest.pos.model.impl.PianoModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of pianos
	 * @param end the upper bound of the range of pianos (not inclusive)
	 * @return the range of pianos
	 */
	@Override
	public List<Piano> getPianos(int start, int end) {
		return pianoPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of pianos.
	 *
	 * @return the number of pianos
	 */
	@Override
	public int getPianosCount() {
		return pianoPersistence.countAll();
	}

	/**
	 * Updates the piano in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param piano the piano
	 * @return the piano that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Piano updatePiano(Piano piano) {
		return pianoPersistence.update(piano);
	}

	/**
	 * Returns the corridoio local service.
	 *
	 * @return the corridoio local service
	 */
	public mef.richiesta.gest.pos.service.CorridoioLocalService
		getCorridoioLocalService() {

		return corridoioLocalService;
	}

	/**
	 * Sets the corridoio local service.
	 *
	 * @param corridoioLocalService the corridoio local service
	 */
	public void setCorridoioLocalService(
		mef.richiesta.gest.pos.service.CorridoioLocalService
			corridoioLocalService) {

		this.corridoioLocalService = corridoioLocalService;
	}

	/**
	 * Returns the corridoio persistence.
	 *
	 * @return the corridoio persistence
	 */
	public CorridoioPersistence getCorridoioPersistence() {
		return corridoioPersistence;
	}

	/**
	 * Sets the corridoio persistence.
	 *
	 * @param corridoioPersistence the corridoio persistence
	 */
	public void setCorridoioPersistence(
		CorridoioPersistence corridoioPersistence) {

		this.corridoioPersistence = corridoioPersistence;
	}

	/**
	 * Returns the fuori porta local service.
	 *
	 * @return the fuori porta local service
	 */
	public mef.richiesta.gest.pos.service.FuoriPortaLocalService
		getFuoriPortaLocalService() {

		return fuoriPortaLocalService;
	}

	/**
	 * Sets the fuori porta local service.
	 *
	 * @param fuoriPortaLocalService the fuori porta local service
	 */
	public void setFuoriPortaLocalService(
		mef.richiesta.gest.pos.service.FuoriPortaLocalService
			fuoriPortaLocalService) {

		this.fuoriPortaLocalService = fuoriPortaLocalService;
	}

	/**
	 * Returns the fuori porta persistence.
	 *
	 * @return the fuori porta persistence
	 */
	public FuoriPortaPersistence getFuoriPortaPersistence() {
		return fuoriPortaPersistence;
	}

	/**
	 * Sets the fuori porta persistence.
	 *
	 * @param fuoriPortaPersistence the fuori porta persistence
	 */
	public void setFuoriPortaPersistence(
		FuoriPortaPersistence fuoriPortaPersistence) {

		this.fuoriPortaPersistence = fuoriPortaPersistence;
	}

	/**
	 * Returns the piano local service.
	 *
	 * @return the piano local service
	 */
	public PianoLocalService getPianoLocalService() {
		return pianoLocalService;
	}

	/**
	 * Sets the piano local service.
	 *
	 * @param pianoLocalService the piano local service
	 */
	public void setPianoLocalService(PianoLocalService pianoLocalService) {
		this.pianoLocalService = pianoLocalService;
	}

	/**
	 * Returns the piano persistence.
	 *
	 * @return the piano persistence
	 */
	public PianoPersistence getPianoPersistence() {
		return pianoPersistence;
	}

	/**
	 * Sets the piano persistence.
	 *
	 * @param pianoPersistence the piano persistence
	 */
	public void setPianoPersistence(PianoPersistence pianoPersistence) {
		this.pianoPersistence = pianoPersistence;
	}

	/**
	 * Returns the sede local service.
	 *
	 * @return the sede local service
	 */
	public mef.richiesta.gest.pos.service.SedeLocalService
		getSedeLocalService() {

		return sedeLocalService;
	}

	/**
	 * Sets the sede local service.
	 *
	 * @param sedeLocalService the sede local service
	 */
	public void setSedeLocalService(
		mef.richiesta.gest.pos.service.SedeLocalService sedeLocalService) {

		this.sedeLocalService = sedeLocalService;
	}

	/**
	 * Returns the sede persistence.
	 *
	 * @return the sede persistence
	 */
	public SedePersistence getSedePersistence() {
		return sedePersistence;
	}

	/**
	 * Sets the sede persistence.
	 *
	 * @param sedePersistence the sede persistence
	 */
	public void setSedePersistence(SedePersistence sedePersistence) {
		this.sedePersistence = sedePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"mef.richiesta.gest.pos.model.Piano", pianoLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"mef.richiesta.gest.pos.model.Piano");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return PianoLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Piano.class;
	}

	protected String getModelClassName() {
		return Piano.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = pianoPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(
		type = mef.richiesta.gest.pos.service.CorridoioLocalService.class
	)
	protected mef.richiesta.gest.pos.service.CorridoioLocalService
		corridoioLocalService;

	@BeanReference(type = CorridoioPersistence.class)
	protected CorridoioPersistence corridoioPersistence;

	@BeanReference(
		type = mef.richiesta.gest.pos.service.FuoriPortaLocalService.class
	)
	protected mef.richiesta.gest.pos.service.FuoriPortaLocalService
		fuoriPortaLocalService;

	@BeanReference(type = FuoriPortaPersistence.class)
	protected FuoriPortaPersistence fuoriPortaPersistence;

	@BeanReference(type = PianoLocalService.class)
	protected PianoLocalService pianoLocalService;

	@BeanReference(type = PianoPersistence.class)
	protected PianoPersistence pianoPersistence;

	@BeanReference(type = mef.richiesta.gest.pos.service.SedeLocalService.class)
	protected mef.richiesta.gest.pos.service.SedeLocalService sedeLocalService;

	@BeanReference(type = SedePersistence.class)
	protected SedePersistence sedePersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}