/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.job.siap.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.job.siap.model.ProfilePicture;
import com.intranet.mef.job.siap.model.ProfilePictureFileBlobModel;
import com.intranet.mef.job.siap.model.ProfilePictureModel;
import com.intranet.mef.job.siap.model.ProfilePictureSoap;
import com.intranet.mef.job.siap.service.ProfilePictureLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProfilePicture service. Represents a row in the &quot;LF_PHOTO&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProfilePictureModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProfilePictureImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProfilePictureImpl
 * @see ProfilePicture
 * @see ProfilePictureModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProfilePictureModelImpl extends BaseModelImpl<ProfilePicture>
	implements ProfilePictureModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a profile picture model instance should use the {@link ProfilePicture} interface instead.
	 */
	public static final String TABLE_NAME = "LF_PHOTO";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PERSON_ID", Types.BIGINT },
			{ "IMAGE", Types.BLOB }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PERSON_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("IMAGE", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE = "create table LF_PHOTO (PERSON_ID LONG not null primary key,IMAGE BLOB)";
	public static final String TABLE_SQL_DROP = "drop table LF_PHOTO";
	public static final String ORDER_BY_JPQL = " ORDER BY profilePicture.personID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LF_PHOTO.PERSON_ID ASC";
	public static final String DATA_SOURCE = "stage";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.job.siap.model.ProfilePicture"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.job.siap.model.ProfilePicture"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProfilePicture toModel(ProfilePictureSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProfilePicture model = new ProfilePictureImpl();

		model.setPersonID(soapModel.getPersonID());
		model.setFile(soapModel.getFile());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProfilePicture> toModels(ProfilePictureSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProfilePicture> models = new ArrayList<ProfilePicture>(soapModels.length);

		for (ProfilePictureSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.job.siap.model.ProfilePicture"));

	public ProfilePictureModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _personID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPersonID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _personID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProfilePicture.class;
	}

	@Override
	public String getModelClassName() {
		return ProfilePicture.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("personID", getPersonID());
		attributes.put("file", getFile());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long personID = (Long)attributes.get("personID");

		if (personID != null) {
			setPersonID(personID);
		}

		Blob file = (Blob)attributes.get("file");

		if (file != null) {
			setFile(file);
		}
	}

	@JSON
	@Override
	public long getPersonID() {
		return _personID;
	}

	@Override
	public void setPersonID(long personID) {
		_personID = personID;
	}

	@JSON
	@Override
	public Blob getFile() {
		if (_fileBlobModel == null) {
			try {
				_fileBlobModel = ProfilePictureLocalServiceUtil.getFileBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
				_log.error("Error: " + e);
			}
		}

		Blob blob = null;

		if (_fileBlobModel != null) {
			blob = _fileBlobModel.getFileBlob();
		}

		return blob;
	}

	@Override
	public void setFile(Blob file) {
		if (_fileBlobModel == null) {
			_fileBlobModel = new ProfilePictureFileBlobModel(getPrimaryKey(),
					file);
		}
		else {
			_fileBlobModel.setFileBlob(file);
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ProfilePicture.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProfilePicture toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProfilePicture)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProfilePictureImpl profilePictureImpl = new ProfilePictureImpl();

		profilePictureImpl.setPersonID(getPersonID());

		profilePictureImpl.resetOriginalValues();

		return profilePictureImpl;
	}

	@Override
	public int compareTo(ProfilePicture profilePicture) {
		long primaryKey = profilePicture.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProfilePicture)) {
			return false;
		}

		ProfilePicture profilePicture = (ProfilePicture)obj;

		long primaryKey = profilePicture.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProfilePictureModelImpl profilePictureModelImpl = this;

		profilePictureModelImpl._fileBlobModel = null;
	}

	@Override
	public CacheModel<ProfilePicture> toCacheModel() {
		ProfilePictureCacheModel profilePictureCacheModel = new ProfilePictureCacheModel();

		profilePictureCacheModel.personID = getPersonID();

		return profilePictureCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{personID=");
		sb.append(getPersonID());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.job.siap.model.ProfilePicture");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>personID</column-name><column-value><![CDATA[");
		sb.append(getPersonID());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProfilePicture.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProfilePicture.class
		};
	private long _personID;
	private ProfilePictureFileBlobModel _fileBlobModel;
	private ProfilePicture _escapedModel;
	
	private static final Log _log = LogFactoryUtil.getLog(ProfilePictureModelImpl.class);
}