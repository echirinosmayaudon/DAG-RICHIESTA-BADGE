/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.job.siap.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.job.siap.model.ManagerOfficesBind;
import com.intranet.mef.job.siap.model.ManagerOfficesBindModel;
import com.intranet.mef.job.siap.model.ManagerOfficesBindSoap;
import com.intranet.mef.job.siap.service.persistence.ManagerOfficesBindPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ManagerOfficesBind service. Represents a row in the &quot;LF_DIRIGENTI&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ManagerOfficesBindModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ManagerOfficesBindImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ManagerOfficesBindImpl
 * @see ManagerOfficesBind
 * @see ManagerOfficesBindModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ManagerOfficesBindModelImpl extends BaseModelImpl<ManagerOfficesBind>
	implements ManagerOfficesBindModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a manager offices bind model instance should use the {@link ManagerOfficesBind} interface instead.
	 */
	public static final String TABLE_NAME = "LF_DIRIGENTI";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PERSON_ID", Types.BIGINT },
			{ "ORGANIZATION_ID", Types.BIGINT },
			{ "FLAG_PRIMARIO", Types.VARCHAR },
			{ "FLAG_REGGENZA", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PERSON_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ORGANIZATION_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("FLAG_PRIMARIO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FLAG_REGGENZA", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LF_DIRIGENTI (PERSON_ID LONG not null,ORGANIZATION_ID LONG not null,FLAG_PRIMARIO VARCHAR(75) null,FLAG_REGGENZA VARCHAR(75) null,primary key (PERSON_ID, ORGANIZATION_ID))";
	public static final String TABLE_SQL_DROP = "drop table LF_DIRIGENTI";
	public static final String ORDER_BY_JPQL = " ORDER BY managerOfficesBind.id.personalId ASC, managerOfficesBind.id.idOrgChart ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LF_DIRIGENTI.PERSON_ID ASC, LF_DIRIGENTI.ORGANIZATION_ID ASC";
	public static final String DATA_SOURCE = "stage";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.job.siap.model.ManagerOfficesBind"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.job.siap.model.ManagerOfficesBind"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.intranet.mef.job.siap.model.ManagerOfficesBind"),
			true);
	public static final long PERSONALID_COLUMN_BITMASK = 1L;
	public static final long IDORGCHART_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ManagerOfficesBind toModel(ManagerOfficesBindSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ManagerOfficesBind model = new ManagerOfficesBindImpl();

		model.setPersonalId(soapModel.getPersonalId());
		model.setIdOrgChart(soapModel.getIdOrgChart());
		model.setPrimary(soapModel.getPrimary());
		model.setRegency(soapModel.getRegency());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ManagerOfficesBind> toModels(
		ManagerOfficesBindSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ManagerOfficesBind> models = new ArrayList<ManagerOfficesBind>(soapModels.length);

		for (ManagerOfficesBindSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.job.siap.model.ManagerOfficesBind"));

	public ManagerOfficesBindModelImpl() {
	}

	@Override
	public ManagerOfficesBindPK getPrimaryKey() {
		return new ManagerOfficesBindPK(_personalId, _idOrgChart);
	}

	@Override
	public void setPrimaryKey(ManagerOfficesBindPK primaryKey) {
		setPersonalId(primaryKey.personalId);
		setIdOrgChart(primaryKey.idOrgChart);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ManagerOfficesBindPK(_personalId, _idOrgChart);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ManagerOfficesBindPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ManagerOfficesBind.class;
	}

	@Override
	public String getModelClassName() {
		return ManagerOfficesBind.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("personalId", getPersonalId());
		attributes.put("idOrgChart", getIdOrgChart());
		attributes.put("primary", getPrimary());
		attributes.put("regency", getRegency());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long personalId = (Long)attributes.get("personalId");

		if (personalId != null) {
			setPersonalId(personalId);
		}

		Long idOrgChart = (Long)attributes.get("idOrgChart");

		if (idOrgChart != null) {
			setIdOrgChart(idOrgChart);
		}

		String primary = (String)attributes.get("primary");

		if (primary != null) {
			setPrimary(primary);
		}

		String regency = (String)attributes.get("regency");

		if (regency != null) {
			setRegency(regency);
		}
	}

	@JSON
	@Override
	public long getPersonalId() {
		return _personalId;
	}

	@Override
	public void setPersonalId(long personalId) {
		_columnBitmask |= PERSONALID_COLUMN_BITMASK;

		if (!_setOriginalPersonalId) {
			_setOriginalPersonalId = true;

			_originalPersonalId = _personalId;
		}

		_personalId = personalId;
	}

	public long getOriginalPersonalId() {
		return _originalPersonalId;
	}

	@JSON
	@Override
	public long getIdOrgChart() {
		return _idOrgChart;
	}

	@Override
	public void setIdOrgChart(long idOrgChart) {
		_idOrgChart = idOrgChart;
	}

	@JSON
	@Override
	public String getPrimary() {
		if (_primary == null) {
			return StringPool.BLANK;
		}
		else {
			return _primary;
		}
	}

	@Override
	public void setPrimary(String primary) {
		_primary = primary;
	}

	@JSON
	@Override
	public String getRegency() {
		if (_regency == null) {
			return StringPool.BLANK;
		}
		else {
			return _regency;
		}
	}

	@Override
	public void setRegency(String regency) {
		_regency = regency;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ManagerOfficesBind toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ManagerOfficesBind)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ManagerOfficesBindImpl managerOfficesBindImpl = new ManagerOfficesBindImpl();

		managerOfficesBindImpl.setPersonalId(getPersonalId());
		managerOfficesBindImpl.setIdOrgChart(getIdOrgChart());
		managerOfficesBindImpl.setPrimary(getPrimary());
		managerOfficesBindImpl.setRegency(getRegency());

		managerOfficesBindImpl.resetOriginalValues();

		return managerOfficesBindImpl;
	}

	@Override
	public int compareTo(ManagerOfficesBind managerOfficesBind) {
		ManagerOfficesBindPK primaryKey = managerOfficesBind.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ManagerOfficesBind)) {
			return false;
		}

		ManagerOfficesBind managerOfficesBind = (ManagerOfficesBind)obj;

		ManagerOfficesBindPK primaryKey = managerOfficesBind.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ManagerOfficesBindModelImpl managerOfficesBindModelImpl = this;

		managerOfficesBindModelImpl._originalPersonalId = managerOfficesBindModelImpl._personalId;

		managerOfficesBindModelImpl._setOriginalPersonalId = false;

		managerOfficesBindModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ManagerOfficesBind> toCacheModel() {
		ManagerOfficesBindCacheModel managerOfficesBindCacheModel = new ManagerOfficesBindCacheModel();

		managerOfficesBindCacheModel.managerOfficesBindPK = getPrimaryKey();

		managerOfficesBindCacheModel.personalId = getPersonalId();

		managerOfficesBindCacheModel.idOrgChart = getIdOrgChart();

		managerOfficesBindCacheModel.primary = getPrimary();

		String primary = managerOfficesBindCacheModel.primary;

		if ((primary != null) && (primary.length() == 0)) {
			managerOfficesBindCacheModel.primary = null;
		}

		managerOfficesBindCacheModel.regency = getRegency();

		String regency = managerOfficesBindCacheModel.regency;

		if ((regency != null) && (regency.length() == 0)) {
			managerOfficesBindCacheModel.regency = null;
		}

		return managerOfficesBindCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{personalId=");
		sb.append(getPersonalId());
		sb.append(", idOrgChart=");
		sb.append(getIdOrgChart());
		sb.append(", primary=");
		sb.append(getPrimary());
		sb.append(", regency=");
		sb.append(getRegency());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.job.siap.model.ManagerOfficesBind");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>personalId</column-name><column-value><![CDATA[");
		sb.append(getPersonalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idOrgChart</column-name><column-value><![CDATA[");
		sb.append(getIdOrgChart());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primary</column-name><column-value><![CDATA[");
		sb.append(getPrimary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regency</column-name><column-value><![CDATA[");
		sb.append(getRegency());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ManagerOfficesBind.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ManagerOfficesBind.class
		};
	private long _personalId;
	private long _originalPersonalId;
	private boolean _setOriginalPersonalId;
	private long _idOrgChart;
	private String _primary;
	private String _regency;
	private long _columnBitmask;
	private ManagerOfficesBind _escapedModel;
}