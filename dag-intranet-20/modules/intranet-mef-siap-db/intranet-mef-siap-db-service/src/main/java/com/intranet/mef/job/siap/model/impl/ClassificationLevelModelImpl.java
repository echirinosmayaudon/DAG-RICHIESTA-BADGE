/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.job.siap.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.job.siap.model.ClassificationLevel;
import com.intranet.mef.job.siap.model.ClassificationLevelModel;
import com.intranet.mef.job.siap.model.ClassificationLevelSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ClassificationLevel service. Represents a row in the &quot;LF_LIVELLO_INQ&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ClassificationLevelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClassificationLevelImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClassificationLevelImpl
 * @see ClassificationLevel
 * @see ClassificationLevelModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ClassificationLevelModelImpl extends BaseModelImpl<ClassificationLevel>
	implements ClassificationLevelModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a classification level model instance should use the {@link ClassificationLevel} interface instead.
	 */
	public static final String TABLE_NAME = "LF_LIVELLO_INQ";
	public static final Object[][] TABLE_COLUMNS = {
			{ "LEVEL_ID", Types.BIGINT },
			{ "COD_POS_GIUR", Types.VARCHAR },
			{ "DESC_POS_GIUR", Types.VARCHAR },
			{ "COD_POS_ECON", Types.VARCHAR },
			{ "DESC_POS_ECON", Types.VARCHAR },
			{ "AREA", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("LEVEL_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("COD_POS_GIUR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DESC_POS_GIUR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COD_POS_ECON", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DESC_POS_ECON", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("AREA", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LF_LIVELLO_INQ (LEVEL_ID LONG not null primary key,COD_POS_GIUR VARCHAR(75) null,DESC_POS_GIUR VARCHAR(75) null,COD_POS_ECON VARCHAR(75) null,DESC_POS_ECON VARCHAR(75) null,AREA VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LF_LIVELLO_INQ";
	public static final String ORDER_BY_JPQL = " ORDER BY classificationLevel.levelID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LF_LIVELLO_INQ.LEVEL_ID ASC";
	public static final String DATA_SOURCE = "stage";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.job.siap.model.ClassificationLevel"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.job.siap.model.ClassificationLevel"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ClassificationLevel toModel(ClassificationLevelSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ClassificationLevel model = new ClassificationLevelImpl();

		model.setLevelID(soapModel.getLevelID());
		model.setCodLegalPos(soapModel.getCodLegalPos());
		model.setDescLegalPos(soapModel.getDescLegalPos());
		model.setCodEconomicPos(soapModel.getCodEconomicPos());
		model.setDescEconomicPos(soapModel.getDescEconomicPos());
		model.setArea(soapModel.getArea());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ClassificationLevel> toModels(
		ClassificationLevelSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ClassificationLevel> models = new ArrayList<ClassificationLevel>(soapModels.length);

		for (ClassificationLevelSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.job.siap.model.ClassificationLevel"));

	public ClassificationLevelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _levelID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLevelID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _levelID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ClassificationLevel.class;
	}

	@Override
	public String getModelClassName() {
		return ClassificationLevel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("levelID", getLevelID());
		attributes.put("codLegalPos", getCodLegalPos());
		attributes.put("descLegalPos", getDescLegalPos());
		attributes.put("codEconomicPos", getCodEconomicPos());
		attributes.put("descEconomicPos", getDescEconomicPos());
		attributes.put("area", getArea());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long levelID = (Long)attributes.get("levelID");

		if (levelID != null) {
			setLevelID(levelID);
		}

		String codLegalPos = (String)attributes.get("codLegalPos");

		if (codLegalPos != null) {
			setCodLegalPos(codLegalPos);
		}

		String descLegalPos = (String)attributes.get("descLegalPos");

		if (descLegalPos != null) {
			setDescLegalPos(descLegalPos);
		}

		String codEconomicPos = (String)attributes.get("codEconomicPos");

		if (codEconomicPos != null) {
			setCodEconomicPos(codEconomicPos);
		}

		String descEconomicPos = (String)attributes.get("descEconomicPos");

		if (descEconomicPos != null) {
			setDescEconomicPos(descEconomicPos);
		}

		String area = (String)attributes.get("area");

		if (area != null) {
			setArea(area);
		}
	}

	@JSON
	@Override
	public long getLevelID() {
		return _levelID;
	}

	@Override
	public void setLevelID(long levelID) {
		_levelID = levelID;
	}

	@JSON
	@Override
	public String getCodLegalPos() {
		if (_codLegalPos == null) {
			return StringPool.BLANK;
		}
		else {
			return _codLegalPos;
		}
	}

	@Override
	public void setCodLegalPos(String codLegalPos) {
		_codLegalPos = codLegalPos;
	}

	@JSON
	@Override
	public String getDescLegalPos() {
		if (_descLegalPos == null) {
			return StringPool.BLANK;
		}
		else {
			return _descLegalPos;
		}
	}

	@Override
	public void setDescLegalPos(String descLegalPos) {
		_descLegalPos = descLegalPos;
	}

	@JSON
	@Override
	public String getCodEconomicPos() {
		if (_codEconomicPos == null) {
			return StringPool.BLANK;
		}
		else {
			return _codEconomicPos;
		}
	}

	@Override
	public void setCodEconomicPos(String codEconomicPos) {
		_codEconomicPos = codEconomicPos;
	}

	@JSON
	@Override
	public String getDescEconomicPos() {
		if (_descEconomicPos == null) {
			return StringPool.BLANK;
		}
		else {
			return _descEconomicPos;
		}
	}

	@Override
	public void setDescEconomicPos(String descEconomicPos) {
		_descEconomicPos = descEconomicPos;
	}

	@JSON
	@Override
	public String getArea() {
		if (_area == null) {
			return StringPool.BLANK;
		}
		else {
			return _area;
		}
	}

	@Override
	public void setArea(String area) {
		_area = area;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ClassificationLevel.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ClassificationLevel toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ClassificationLevel)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClassificationLevelImpl classificationLevelImpl = new ClassificationLevelImpl();

		classificationLevelImpl.setLevelID(getLevelID());
		classificationLevelImpl.setCodLegalPos(getCodLegalPos());
		classificationLevelImpl.setDescLegalPos(getDescLegalPos());
		classificationLevelImpl.setCodEconomicPos(getCodEconomicPos());
		classificationLevelImpl.setDescEconomicPos(getDescEconomicPos());
		classificationLevelImpl.setArea(getArea());

		classificationLevelImpl.resetOriginalValues();

		return classificationLevelImpl;
	}

	@Override
	public int compareTo(ClassificationLevel classificationLevel) {
		long primaryKey = classificationLevel.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ClassificationLevel)) {
			return false;
		}

		ClassificationLevel classificationLevel = (ClassificationLevel)obj;

		long primaryKey = classificationLevel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ClassificationLevel> toCacheModel() {
		ClassificationLevelCacheModel classificationLevelCacheModel = new ClassificationLevelCacheModel();

		classificationLevelCacheModel.levelID = getLevelID();

		classificationLevelCacheModel.codLegalPos = getCodLegalPos();

		String codLegalPos = classificationLevelCacheModel.codLegalPos;

		if ((codLegalPos != null) && (codLegalPos.length() == 0)) {
			classificationLevelCacheModel.codLegalPos = null;
		}

		classificationLevelCacheModel.descLegalPos = getDescLegalPos();

		String descLegalPos = classificationLevelCacheModel.descLegalPos;

		if ((descLegalPos != null) && (descLegalPos.length() == 0)) {
			classificationLevelCacheModel.descLegalPos = null;
		}

		classificationLevelCacheModel.codEconomicPos = getCodEconomicPos();

		String codEconomicPos = classificationLevelCacheModel.codEconomicPos;

		if ((codEconomicPos != null) && (codEconomicPos.length() == 0)) {
			classificationLevelCacheModel.codEconomicPos = null;
		}

		classificationLevelCacheModel.descEconomicPos = getDescEconomicPos();

		String descEconomicPos = classificationLevelCacheModel.descEconomicPos;

		if ((descEconomicPos != null) && (descEconomicPos.length() == 0)) {
			classificationLevelCacheModel.descEconomicPos = null;
		}

		classificationLevelCacheModel.area = getArea();

		String area = classificationLevelCacheModel.area;

		if ((area != null) && (area.length() == 0)) {
			classificationLevelCacheModel.area = null;
		}

		return classificationLevelCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{levelID=");
		sb.append(getLevelID());
		sb.append(", codLegalPos=");
		sb.append(getCodLegalPos());
		sb.append(", descLegalPos=");
		sb.append(getDescLegalPos());
		sb.append(", codEconomicPos=");
		sb.append(getCodEconomicPos());
		sb.append(", descEconomicPos=");
		sb.append(getDescEconomicPos());
		sb.append(", area=");
		sb.append(getArea());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.job.siap.model.ClassificationLevel");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>levelID</column-name><column-value><![CDATA[");
		sb.append(getLevelID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codLegalPos</column-name><column-value><![CDATA[");
		sb.append(getCodLegalPos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descLegalPos</column-name><column-value><![CDATA[");
		sb.append(getDescLegalPos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codEconomicPos</column-name><column-value><![CDATA[");
		sb.append(getCodEconomicPos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descEconomicPos</column-name><column-value><![CDATA[");
		sb.append(getDescEconomicPos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>area</column-name><column-value><![CDATA[");
		sb.append(getArea());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ClassificationLevel.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ClassificationLevel.class
		};
	private long _levelID;
	private String _codLegalPos;
	private String _descLegalPos;
	private String _codEconomicPos;
	private String _descEconomicPos;
	private String _area;
	private ClassificationLevel _escapedModel;
}