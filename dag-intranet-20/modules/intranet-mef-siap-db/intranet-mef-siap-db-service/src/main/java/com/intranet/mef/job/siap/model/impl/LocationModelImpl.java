/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.job.siap.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.job.siap.model.Location;
import com.intranet.mef.job.siap.model.LocationModel;
import com.intranet.mef.job.siap.model.LocationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Location service. Represents a row in the &quot;LF_SEDE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LocationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LocationImpl
 * @see Location
 * @see LocationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LocationModelImpl extends BaseModelImpl<Location>
	implements LocationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a location model instance should use the {@link Location} interface instead.
	 */
	public static final String TABLE_NAME = "LF_SEDE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "LOCATION_ID", Types.BIGINT },
			{ "NAME", Types.VARCHAR },
			{ "STREET", Types.VARCHAR },
			{ "CITY", Types.VARCHAR },
			{ "POSTAL_CODE", Types.VARCHAR },
			{ "TIPOLOGIA_SEDE", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("LOCATION_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("STREET", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CITY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("POSTAL_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TIPOLOGIA_SEDE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LF_SEDE (LOCATION_ID LONG not null primary key,NAME VARCHAR(75) null,STREET VARCHAR(75) null,CITY VARCHAR(75) null,POSTAL_CODE VARCHAR(75) null,TIPOLOGIA_SEDE VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LF_SEDE";
	public static final String ORDER_BY_JPQL = " ORDER BY location.locationID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LF_SEDE.LOCATION_ID ASC";
	public static final String DATA_SOURCE = "stage";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.job.siap.model.Location"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.job.siap.model.Location"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Location toModel(LocationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Location model = new LocationImpl();

		model.setLocationID(soapModel.getLocationID());
		model.setName(soapModel.getName());
		model.setStreet(soapModel.getStreet());
		model.setCity(soapModel.getCity());
		model.setPostalCode(soapModel.getPostalCode());
		model.setLocationType(soapModel.getLocationType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Location> toModels(LocationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Location> models = new ArrayList<Location>(soapModels.length);

		for (LocationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.job.siap.model.Location"));

	public LocationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _locationID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLocationID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _locationID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Location.class;
	}

	@Override
	public String getModelClassName() {
		return Location.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("locationID", getLocationID());
		attributes.put("name", getName());
		attributes.put("street", getStreet());
		attributes.put("city", getCity());
		attributes.put("postalCode", getPostalCode());
		attributes.put("locationType", getLocationType());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long locationID = (Long)attributes.get("locationID");

		if (locationID != null) {
			setLocationID(locationID);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String street = (String)attributes.get("street");

		if (street != null) {
			setStreet(street);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String postalCode = (String)attributes.get("postalCode");

		if (postalCode != null) {
			setPostalCode(postalCode);
		}

		String locationType = (String)attributes.get("locationType");

		if (locationType != null) {
			setLocationType(locationType);
		}
	}

	@JSON
	@Override
	public long getLocationID() {
		return _locationID;
	}

	@Override
	public void setLocationID(long locationID) {
		_locationID = locationID;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getStreet() {
		if (_street == null) {
			return StringPool.BLANK;
		}
		else {
			return _street;
		}
	}

	@Override
	public void setStreet(String street) {
		_street = street;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getPostalCode() {
		if (_postalCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _postalCode;
		}
	}

	@Override
	public void setPostalCode(String postalCode) {
		_postalCode = postalCode;
	}

	@JSON
	@Override
	public String getLocationType() {
		if (_locationType == null) {
			return StringPool.BLANK;
		}
		else {
			return _locationType;
		}
	}

	@Override
	public void setLocationType(String locationType) {
		_locationType = locationType;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Location.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Location toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Location)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LocationImpl locationImpl = new LocationImpl();

		locationImpl.setLocationID(getLocationID());
		locationImpl.setName(getName());
		locationImpl.setStreet(getStreet());
		locationImpl.setCity(getCity());
		locationImpl.setPostalCode(getPostalCode());
		locationImpl.setLocationType(getLocationType());

		locationImpl.resetOriginalValues();

		return locationImpl;
	}

	@Override
	public int compareTo(Location location) {
		long primaryKey = location.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Location)) {
			return false;
		}

		Location location = (Location)obj;

		long primaryKey = location.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Location> toCacheModel() {
		LocationCacheModel locationCacheModel = new LocationCacheModel();

		locationCacheModel.locationID = getLocationID();

		locationCacheModel.name = getName();

		String name = locationCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			locationCacheModel.name = null;
		}

		locationCacheModel.street = getStreet();

		String street = locationCacheModel.street;

		if ((street != null) && (street.length() == 0)) {
			locationCacheModel.street = null;
		}

		locationCacheModel.city = getCity();

		String city = locationCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			locationCacheModel.city = null;
		}

		locationCacheModel.postalCode = getPostalCode();

		String postalCode = locationCacheModel.postalCode;

		if ((postalCode != null) && (postalCode.length() == 0)) {
			locationCacheModel.postalCode = null;
		}

		locationCacheModel.locationType = getLocationType();

		String locationType = locationCacheModel.locationType;

		if ((locationType != null) && (locationType.length() == 0)) {
			locationCacheModel.locationType = null;
		}

		return locationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{locationID=");
		sb.append(getLocationID());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", street=");
		sb.append(getStreet());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", postalCode=");
		sb.append(getPostalCode());
		sb.append(", locationType=");
		sb.append(getLocationType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.job.siap.model.Location");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>locationID</column-name><column-value><![CDATA[");
		sb.append(getLocationID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>street</column-name><column-value><![CDATA[");
		sb.append(getStreet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postalCode</column-name><column-value><![CDATA[");
		sb.append(getPostalCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationType</column-name><column-value><![CDATA[");
		sb.append(getLocationType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Location.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Location.class
		};
	private long _locationID;
	private String _name;
	private String _street;
	private String _city;
	private String _postalCode;
	private String _locationType;
	private Location _escapedModel;
}