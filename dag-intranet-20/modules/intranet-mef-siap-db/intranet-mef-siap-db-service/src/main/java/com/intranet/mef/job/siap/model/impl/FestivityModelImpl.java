/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.job.siap.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.job.siap.model.Festivity;
import com.intranet.mef.job.siap.model.FestivityModel;
import com.intranet.mef.job.siap.model.FestivitySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Festivity service. Represents a row in the &quot;LF_VIEW_FESTIVITA&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FestivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FestivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FestivityImpl
 * @see Festivity
 * @see FestivityModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FestivityModelImpl extends BaseModelImpl<Festivity>
	implements FestivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a festivity model instance should use the {@link Festivity} interface instead.
	 */
	public static final String TABLE_NAME = "LF_VIEW_FESTIVITA";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PERSON_ID", Types.BIGINT },
			{ "FESTIVITA_SPETT_ANNO_CORR", Types.INTEGER },
			{ "FESTIVITA_USUFRUITE_ANNO_CORR", Types.INTEGER },
			{ "FESTIVITA_RESIDUE_ANNO_CORR", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PERSON_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("FESTIVITA_SPETT_ANNO_CORR", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("FESTIVITA_USUFRUITE_ANNO_CORR", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("FESTIVITA_RESIDUE_ANNO_CORR", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table LF_VIEW_FESTIVITA (PERSON_ID LONG not null primary key,FESTIVITA_SPETT_ANNO_CORR INTEGER,FESTIVITA_USUFRUITE_ANNO_CORR INTEGER,FESTIVITA_RESIDUE_ANNO_CORR INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table LF_VIEW_FESTIVITA";
	public static final String ORDER_BY_JPQL = " ORDER BY festivity.personId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LF_VIEW_FESTIVITA.PERSON_ID ASC";
	public static final String DATA_SOURCE = "stage";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.job.siap.model.Festivity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.job.siap.model.Festivity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Festivity toModel(FestivitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Festivity model = new FestivityImpl();

		model.setPersonId(soapModel.getPersonId());
		model.setFestivityDueCurrYear(soapModel.getFestivityDueCurrYear());
		model.setFestivitySpentCurrYear(soapModel.getFestivitySpentCurrYear());
		model.setFestivityRemainCurrYear(soapModel.getFestivityRemainCurrYear());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Festivity> toModels(FestivitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Festivity> models = new ArrayList<Festivity>(soapModels.length);

		for (FestivitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.job.siap.model.Festivity"));

	public FestivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _personId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPersonId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _personId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Festivity.class;
	}

	@Override
	public String getModelClassName() {
		return Festivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("personId", getPersonId());
		attributes.put("festivityDueCurrYear", getFestivityDueCurrYear());
		attributes.put("festivitySpentCurrYear", getFestivitySpentCurrYear());
		attributes.put("festivityRemainCurrYear", getFestivityRemainCurrYear());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long personId = (Long)attributes.get("personId");

		if (personId != null) {
			setPersonId(personId);
		}

		Integer festivityDueCurrYear = (Integer)attributes.get(
				"festivityDueCurrYear");

		if (festivityDueCurrYear != null) {
			setFestivityDueCurrYear(festivityDueCurrYear);
		}

		Integer festivitySpentCurrYear = (Integer)attributes.get(
				"festivitySpentCurrYear");

		if (festivitySpentCurrYear != null) {
			setFestivitySpentCurrYear(festivitySpentCurrYear);
		}

		Integer festivityRemainCurrYear = (Integer)attributes.get(
				"festivityRemainCurrYear");

		if (festivityRemainCurrYear != null) {
			setFestivityRemainCurrYear(festivityRemainCurrYear);
		}
	}

	@JSON
	@Override
	public long getPersonId() {
		return _personId;
	}

	@Override
	public void setPersonId(long personId) {
		_personId = personId;
	}

	@JSON
	@Override
	public int getFestivityDueCurrYear() {
		return _festivityDueCurrYear;
	}

	@Override
	public void setFestivityDueCurrYear(int festivityDueCurrYear) {
		_festivityDueCurrYear = festivityDueCurrYear;
	}

	@JSON
	@Override
	public int getFestivitySpentCurrYear() {
		return _festivitySpentCurrYear;
	}

	@Override
	public void setFestivitySpentCurrYear(int festivitySpentCurrYear) {
		_festivitySpentCurrYear = festivitySpentCurrYear;
	}

	@JSON
	@Override
	public int getFestivityRemainCurrYear() {
		return _festivityRemainCurrYear;
	}

	@Override
	public void setFestivityRemainCurrYear(int festivityRemainCurrYear) {
		_festivityRemainCurrYear = festivityRemainCurrYear;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Festivity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Festivity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Festivity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FestivityImpl festivityImpl = new FestivityImpl();

		festivityImpl.setPersonId(getPersonId());
		festivityImpl.setFestivityDueCurrYear(getFestivityDueCurrYear());
		festivityImpl.setFestivitySpentCurrYear(getFestivitySpentCurrYear());
		festivityImpl.setFestivityRemainCurrYear(getFestivityRemainCurrYear());

		festivityImpl.resetOriginalValues();

		return festivityImpl;
	}

	@Override
	public int compareTo(Festivity festivity) {
		long primaryKey = festivity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Festivity)) {
			return false;
		}

		Festivity festivity = (Festivity)obj;

		long primaryKey = festivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Festivity> toCacheModel() {
		FestivityCacheModel festivityCacheModel = new FestivityCacheModel();

		festivityCacheModel.personId = getPersonId();

		festivityCacheModel.festivityDueCurrYear = getFestivityDueCurrYear();

		festivityCacheModel.festivitySpentCurrYear = getFestivitySpentCurrYear();

		festivityCacheModel.festivityRemainCurrYear = getFestivityRemainCurrYear();

		return festivityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{personId=");
		sb.append(getPersonId());
		sb.append(", festivityDueCurrYear=");
		sb.append(getFestivityDueCurrYear());
		sb.append(", festivitySpentCurrYear=");
		sb.append(getFestivitySpentCurrYear());
		sb.append(", festivityRemainCurrYear=");
		sb.append(getFestivityRemainCurrYear());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.job.siap.model.Festivity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>personId</column-name><column-value><![CDATA[");
		sb.append(getPersonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>festivityDueCurrYear</column-name><column-value><![CDATA[");
		sb.append(getFestivityDueCurrYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>festivitySpentCurrYear</column-name><column-value><![CDATA[");
		sb.append(getFestivitySpentCurrYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>festivityRemainCurrYear</column-name><column-value><![CDATA[");
		sb.append(getFestivityRemainCurrYear());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Festivity.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Festivity.class
		};
	private long _personId;
	private int _festivityDueCurrYear;
	private int _festivitySpentCurrYear;
	private int _festivityRemainCurrYear;
	private Festivity _escapedModel;
}