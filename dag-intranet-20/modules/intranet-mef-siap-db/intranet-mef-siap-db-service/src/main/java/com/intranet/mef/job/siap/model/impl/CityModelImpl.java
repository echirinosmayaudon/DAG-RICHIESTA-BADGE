/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.job.siap.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.job.siap.model.City;
import com.intranet.mef.job.siap.model.CityModel;
import com.intranet.mef.job.siap.model.CitySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the City service. Represents a row in the &quot;LF_COMUNI&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CityImpl
 * @see City
 * @see CityModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CityModelImpl extends BaseModelImpl<City> implements CityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a city model instance should use the {@link City} interface instead.
	 */
	public static final String TABLE_NAME = "LF_COMUNI";
	public static final Object[][] TABLE_COLUMNS = {
			{ "COD_ISTAT", Types.VARCHAR },
			{ "NOME_COM", Types.VARCHAR },
			{ "SIGLA_PROV", Types.VARCHAR },
			{ "NOME_PROV", Types.VARCHAR },
			{ "REGIONE", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("COD_ISTAT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NOME_COM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SIGLA_PROV", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NOME_PROV", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REGIONE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LF_COMUNI (COD_ISTAT VARCHAR(75) not null primary key,NOME_COM VARCHAR(75) null,SIGLA_PROV VARCHAR(75) null,NOME_PROV VARCHAR(75) null,REGIONE VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LF_COMUNI";
	public static final String ORDER_BY_JPQL = " ORDER BY city.istatCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LF_COMUNI.COD_ISTAT ASC";
	public static final String DATA_SOURCE = "stage";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.job.siap.model.City"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.job.siap.model.City"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static City toModel(CitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		City model = new CityImpl();

		model.setIstatCode(soapModel.getIstatCode());
		model.setName(soapModel.getName());
		model.setProvince(soapModel.getProvince());
		model.setProvinceName(soapModel.getProvinceName());
		model.setDistrict(soapModel.getDistrict());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<City> toModels(CitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<City> models = new ArrayList<City>(soapModels.length);

		for (CitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.job.siap.model.City"));

	public CityModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _istatCode;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setIstatCode(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _istatCode;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return City.class;
	}

	@Override
	public String getModelClassName() {
		return City.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("istatCode", getIstatCode());
		attributes.put("name", getName());
		attributes.put("province", getProvince());
		attributes.put("provinceName", getProvinceName());
		attributes.put("district", getDistrict());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String istatCode = (String)attributes.get("istatCode");

		if (istatCode != null) {
			setIstatCode(istatCode);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String province = (String)attributes.get("province");

		if (province != null) {
			setProvince(province);
		}

		String provinceName = (String)attributes.get("provinceName");

		if (provinceName != null) {
			setProvinceName(provinceName);
		}

		String district = (String)attributes.get("district");

		if (district != null) {
			setDistrict(district);
		}
	}

	@JSON
	@Override
	public String getIstatCode() {
		if (_istatCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _istatCode;
		}
	}

	@Override
	public void setIstatCode(String istatCode) {
		_istatCode = istatCode;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getProvince() {
		if (_province == null) {
			return StringPool.BLANK;
		}
		else {
			return _province;
		}
	}

	@Override
	public void setProvince(String province) {
		_province = province;
	}

	@JSON
	@Override
	public String getProvinceName() {
		if (_provinceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _provinceName;
		}
	}

	@Override
	public void setProvinceName(String provinceName) {
		_provinceName = provinceName;
	}

	@JSON
	@Override
	public String getDistrict() {
		if (_district == null) {
			return StringPool.BLANK;
		}
		else {
			return _district;
		}
	}

	@Override
	public void setDistrict(String district) {
		_district = district;
	}

	@Override
	public City toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (City)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CityImpl cityImpl = new CityImpl();

		cityImpl.setIstatCode(getIstatCode());
		cityImpl.setName(getName());
		cityImpl.setProvince(getProvince());
		cityImpl.setProvinceName(getProvinceName());
		cityImpl.setDistrict(getDistrict());

		cityImpl.resetOriginalValues();

		return cityImpl;
	}

	@Override
	public int compareTo(City city) {
		String primaryKey = city.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof City)) {
			return false;
		}

		City city = (City)obj;

		String primaryKey = city.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<City> toCacheModel() {
		CityCacheModel cityCacheModel = new CityCacheModel();

		cityCacheModel.istatCode = getIstatCode();

		String istatCode = cityCacheModel.istatCode;

		if ((istatCode != null) && (istatCode.length() == 0)) {
			cityCacheModel.istatCode = null;
		}

		cityCacheModel.name = getName();

		String name = cityCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			cityCacheModel.name = null;
		}

		cityCacheModel.province = getProvince();

		String province = cityCacheModel.province;

		if ((province != null) && (province.length() == 0)) {
			cityCacheModel.province = null;
		}

		cityCacheModel.provinceName = getProvinceName();

		String provinceName = cityCacheModel.provinceName;

		if ((provinceName != null) && (provinceName.length() == 0)) {
			cityCacheModel.provinceName = null;
		}

		cityCacheModel.district = getDistrict();

		String district = cityCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			cityCacheModel.district = null;
		}

		return cityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{istatCode=");
		sb.append(getIstatCode());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", province=");
		sb.append(getProvince());
		sb.append(", provinceName=");
		sb.append(getProvinceName());
		sb.append(", district=");
		sb.append(getDistrict());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.job.siap.model.City");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>istatCode</column-name><column-value><![CDATA[");
		sb.append(getIstatCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>province</column-name><column-value><![CDATA[");
		sb.append(getProvince());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>provinceName</column-name><column-value><![CDATA[");
		sb.append(getProvinceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>district</column-name><column-value><![CDATA[");
		sb.append(getDistrict());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = City.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			City.class
		};
	private String _istatCode;
	private String _name;
	private String _province;
	private String _provinceName;
	private String _district;
	private City _escapedModel;
}