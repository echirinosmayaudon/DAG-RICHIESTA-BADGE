/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.job.siap.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.job.siap.model.OvertimeBalacePrevMonth;
import com.intranet.mef.job.siap.model.OvertimeBalacePrevMonthModel;
import com.intranet.mef.job.siap.model.OvertimeBalacePrevMonthSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the OvertimeBalacePrevMonth service. Represents a row in the &quot;LF_VIEW_ORE_MATURATE_PREC&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link OvertimeBalacePrevMonthModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OvertimeBalacePrevMonthImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OvertimeBalacePrevMonthImpl
 * @see OvertimeBalacePrevMonth
 * @see OvertimeBalacePrevMonthModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class OvertimeBalacePrevMonthModelImpl extends BaseModelImpl<OvertimeBalacePrevMonth>
	implements OvertimeBalacePrevMonthModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a overtime balace prev month model instance should use the {@link OvertimeBalacePrevMonth} interface instead.
	 */
	public static final String TABLE_NAME = "LF_VIEW_ORE_MATURATE_PREC";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PERSON_ID", Types.BIGINT },
			{ "STR_ORE_MATURATE_MESE", Types.INTEGER },
			{ "STR_MESE_RIF_PREC", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PERSON_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("STR_ORE_MATURATE_MESE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("STR_MESE_RIF_PREC", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LF_VIEW_ORE_MATURATE_PREC (PERSON_ID LONG not null primary key,STR_ORE_MATURATE_MESE INTEGER,STR_MESE_RIF_PREC VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LF_VIEW_ORE_MATURATE_PREC";
	public static final String ORDER_BY_JPQL = " ORDER BY overtimeBalacePrevMonth.personId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LF_VIEW_ORE_MATURATE_PREC.PERSON_ID ASC";
	public static final String DATA_SOURCE = "stage";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.job.siap.model.OvertimeBalacePrevMonth"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.job.siap.model.OvertimeBalacePrevMonth"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static OvertimeBalacePrevMonth toModel(
		OvertimeBalacePrevMonthSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		OvertimeBalacePrevMonth model = new OvertimeBalacePrevMonthImpl();

		model.setPersonId(soapModel.getPersonId());
		model.setOvertimeDueCurrMonth(soapModel.getOvertimeDueCurrMonth());
		model.setOvertimeMonthPrevRif(soapModel.getOvertimeMonthPrevRif());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<OvertimeBalacePrevMonth> toModels(
		OvertimeBalacePrevMonthSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<OvertimeBalacePrevMonth> models = new ArrayList<OvertimeBalacePrevMonth>(soapModels.length);

		for (OvertimeBalacePrevMonthSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.job.siap.model.OvertimeBalacePrevMonth"));

	public OvertimeBalacePrevMonthModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _personId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPersonId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _personId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OvertimeBalacePrevMonth.class;
	}

	@Override
	public String getModelClassName() {
		return OvertimeBalacePrevMonth.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("personId", getPersonId());
		attributes.put("overtimeDueCurrMonth", getOvertimeDueCurrMonth());
		attributes.put("overtimeMonthPrevRif", getOvertimeMonthPrevRif());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long personId = (Long)attributes.get("personId");

		if (personId != null) {
			setPersonId(personId);
		}

		Integer overtimeDueCurrMonth = (Integer)attributes.get(
				"overtimeDueCurrMonth");

		if (overtimeDueCurrMonth != null) {
			setOvertimeDueCurrMonth(overtimeDueCurrMonth);
		}

		String overtimeMonthPrevRif = (String)attributes.get(
				"overtimeMonthPrevRif");

		if (overtimeMonthPrevRif != null) {
			setOvertimeMonthPrevRif(overtimeMonthPrevRif);
		}
	}

	@JSON
	@Override
	public long getPersonId() {
		return _personId;
	}

	@Override
	public void setPersonId(long personId) {
		_personId = personId;
	}

	@JSON
	@Override
	public int getOvertimeDueCurrMonth() {
		return _overtimeDueCurrMonth;
	}

	@Override
	public void setOvertimeDueCurrMonth(int overtimeDueCurrMonth) {
		_overtimeDueCurrMonth = overtimeDueCurrMonth;
	}

	@JSON
	@Override
	public String getOvertimeMonthPrevRif() {
		if (_overtimeMonthPrevRif == null) {
			return StringPool.BLANK;
		}
		else {
			return _overtimeMonthPrevRif;
		}
	}

	@Override
	public void setOvertimeMonthPrevRif(String overtimeMonthPrevRif) {
		_overtimeMonthPrevRif = overtimeMonthPrevRif;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			OvertimeBalacePrevMonth.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OvertimeBalacePrevMonth toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OvertimeBalacePrevMonth)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OvertimeBalacePrevMonthImpl overtimeBalacePrevMonthImpl = new OvertimeBalacePrevMonthImpl();

		overtimeBalacePrevMonthImpl.setPersonId(getPersonId());
		overtimeBalacePrevMonthImpl.setOvertimeDueCurrMonth(getOvertimeDueCurrMonth());
		overtimeBalacePrevMonthImpl.setOvertimeMonthPrevRif(getOvertimeMonthPrevRif());

		overtimeBalacePrevMonthImpl.resetOriginalValues();

		return overtimeBalacePrevMonthImpl;
	}

	@Override
	public int compareTo(OvertimeBalacePrevMonth overtimeBalacePrevMonth) {
		long primaryKey = overtimeBalacePrevMonth.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OvertimeBalacePrevMonth)) {
			return false;
		}

		OvertimeBalacePrevMonth overtimeBalacePrevMonth = (OvertimeBalacePrevMonth)obj;

		long primaryKey = overtimeBalacePrevMonth.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<OvertimeBalacePrevMonth> toCacheModel() {
		OvertimeBalacePrevMonthCacheModel overtimeBalacePrevMonthCacheModel = new OvertimeBalacePrevMonthCacheModel();

		overtimeBalacePrevMonthCacheModel.personId = getPersonId();

		overtimeBalacePrevMonthCacheModel.overtimeDueCurrMonth = getOvertimeDueCurrMonth();

		overtimeBalacePrevMonthCacheModel.overtimeMonthPrevRif = getOvertimeMonthPrevRif();

		String overtimeMonthPrevRif = overtimeBalacePrevMonthCacheModel.overtimeMonthPrevRif;

		if ((overtimeMonthPrevRif != null) &&
				(overtimeMonthPrevRif.length() == 0)) {
			overtimeBalacePrevMonthCacheModel.overtimeMonthPrevRif = null;
		}

		return overtimeBalacePrevMonthCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{personId=");
		sb.append(getPersonId());
		sb.append(", overtimeDueCurrMonth=");
		sb.append(getOvertimeDueCurrMonth());
		sb.append(", overtimeMonthPrevRif=");
		sb.append(getOvertimeMonthPrevRif());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.job.siap.model.OvertimeBalacePrevMonth");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>personId</column-name><column-value><![CDATA[");
		sb.append(getPersonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overtimeDueCurrMonth</column-name><column-value><![CDATA[");
		sb.append(getOvertimeDueCurrMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overtimeMonthPrevRif</column-name><column-value><![CDATA[");
		sb.append(getOvertimeMonthPrevRif());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = OvertimeBalacePrevMonth.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			OvertimeBalacePrevMonth.class
		};
	private long _personId;
	private int _overtimeDueCurrMonth;
	private String _overtimeMonthPrevRif;
	private OvertimeBalacePrevMonth _escapedModel;
}