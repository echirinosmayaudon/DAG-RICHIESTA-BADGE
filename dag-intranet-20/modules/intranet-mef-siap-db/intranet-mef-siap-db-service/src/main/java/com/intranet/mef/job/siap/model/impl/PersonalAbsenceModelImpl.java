/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.job.siap.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.job.siap.model.PersonalAbsence;
import com.intranet.mef.job.siap.model.PersonalAbsenceModel;
import com.intranet.mef.job.siap.model.PersonalAbsenceSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PersonalAbsence service. Represents a row in the &quot;LF_ASS_PERSONALE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PersonalAbsenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersonalAbsenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PersonalAbsenceImpl
 * @see PersonalAbsence
 * @see PersonalAbsenceModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PersonalAbsenceModelImpl extends BaseModelImpl<PersonalAbsence>
	implements PersonalAbsenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a personal absence model instance should use the {@link PersonalAbsence} interface instead.
	 */
	public static final String TABLE_NAME = "LF_ASS_PERSONALE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CUSTOM_KEY", Types.VARCHAR },
			{ "PERSON_ID", Types.BIGINT },
			{ "DATA_ASSENZA", Types.TIMESTAMP },
			{ "MESE_RIFERIMENTO", Types.VARCHAR },
			{ "CODICE_ASSENZA", Types.VARCHAR },
			{ "INTERA_GIORNATA", Types.VARCHAR },
			{ "DALLE", Types.INTEGER },
			{ "ALLE", Types.INTEGER },
			{ "ORE_ASSENZA", Types.INTEGER },
			{ "DESCRIZIONE", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CUSTOM_KEY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PERSON_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DATA_ASSENZA", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MESE_RIFERIMENTO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CODICE_ASSENZA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INTERA_GIORNATA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DALLE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ALLE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ORE_ASSENZA", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("DESCRIZIONE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LF_ASS_PERSONALE (CUSTOM_KEY VARCHAR(75) not null primary key,PERSON_ID LONG,DATA_ASSENZA DATE null,MESE_RIFERIMENTO VARCHAR(75) null,CODICE_ASSENZA VARCHAR(75) null,INTERA_GIORNATA VARCHAR(75) null,DALLE INTEGER,ALLE INTEGER,ORE_ASSENZA INTEGER,DESCRIZIONE VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LF_ASS_PERSONALE";
	public static final String ORDER_BY_JPQL = " ORDER BY personalAbsence.custom_key ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LF_ASS_PERSONALE.CUSTOM_KEY ASC";
	public static final String DATA_SOURCE = "stage";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.job.siap.model.PersonalAbsence"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.job.siap.model.PersonalAbsence"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.intranet.mef.job.siap.model.PersonalAbsence"),
			true);
	public static final long PERSONID_COLUMN_BITMASK = 1L;
	public static final long REFMONTH_COLUMN_BITMASK = 2L;
	public static final long CUSTOM_KEY_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PersonalAbsence toModel(PersonalAbsenceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PersonalAbsence model = new PersonalAbsenceImpl();

		model.setCustom_key(soapModel.getCustom_key());
		model.setPersonId(soapModel.getPersonId());
		model.setAbsenceDate(soapModel.getAbsenceDate());
		model.setRefMonth(soapModel.getRefMonth());
		model.setAbsenceCode(soapModel.getAbsenceCode());
		model.setCompleteDay(soapModel.getCompleteDay());
		model.setFrom(soapModel.getFrom());
		model.setTo(soapModel.getTo());
		model.setHours(soapModel.getHours());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PersonalAbsence> toModels(
		PersonalAbsenceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PersonalAbsence> models = new ArrayList<PersonalAbsence>(soapModels.length);

		for (PersonalAbsenceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.job.siap.model.PersonalAbsence"));

	public PersonalAbsenceModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _custom_key;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCustom_key(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _custom_key;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return PersonalAbsence.class;
	}

	@Override
	public String getModelClassName() {
		return PersonalAbsence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("custom_key", getCustom_key());
		attributes.put("personId", getPersonId());
		attributes.put("absenceDate", getAbsenceDate());
		attributes.put("refMonth", getRefMonth());
		attributes.put("absenceCode", getAbsenceCode());
		attributes.put("completeDay", getCompleteDay());
		attributes.put("from", getFrom());
		attributes.put("to", getTo());
		attributes.put("hours", getHours());
		attributes.put("description", getDescription());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String custom_key = (String)attributes.get("custom_key");

		if (custom_key != null) {
			setCustom_key(custom_key);
		}

		Long personId = (Long)attributes.get("personId");

		if (personId != null) {
			setPersonId(personId);
		}

		Date absenceDate = (Date)attributes.get("absenceDate");

		if (absenceDate != null) {
			setAbsenceDate(absenceDate);
		}

		String refMonth = (String)attributes.get("refMonth");

		if (refMonth != null) {
			setRefMonth(refMonth);
		}

		String absenceCode = (String)attributes.get("absenceCode");

		if (absenceCode != null) {
			setAbsenceCode(absenceCode);
		}

		String completeDay = (String)attributes.get("completeDay");

		if (completeDay != null) {
			setCompleteDay(completeDay);
		}

		Integer from = (Integer)attributes.get("from");

		if (from != null) {
			setFrom(from);
		}

		Integer to = (Integer)attributes.get("to");

		if (to != null) {
			setTo(to);
		}

		Integer hours = (Integer)attributes.get("hours");

		if (hours != null) {
			setHours(hours);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public String getCustom_key() {
		if (_custom_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _custom_key;
		}
	}

	@Override
	public void setCustom_key(String custom_key) {
		_custom_key = custom_key;
	}

	@JSON
	@Override
	public long getPersonId() {
		return _personId;
	}

	@Override
	public void setPersonId(long personId) {
		_columnBitmask |= PERSONID_COLUMN_BITMASK;

		if (!_setOriginalPersonId) {
			_setOriginalPersonId = true;

			_originalPersonId = _personId;
		}

		_personId = personId;
	}

	public long getOriginalPersonId() {
		return _originalPersonId;
	}

	@JSON
	@Override
	public Date getAbsenceDate() {
		return _absenceDate;
	}

	@Override
	public void setAbsenceDate(Date absenceDate) {
		_absenceDate = absenceDate;
	}

	@JSON
	@Override
	public String getRefMonth() {
		if (_refMonth == null) {
			return StringPool.BLANK;
		}
		else {
			return _refMonth;
		}
	}

	@Override
	public void setRefMonth(String refMonth) {
		_columnBitmask |= REFMONTH_COLUMN_BITMASK;

		if (_originalRefMonth == null) {
			_originalRefMonth = _refMonth;
		}

		_refMonth = refMonth;
	}

	public String getOriginalRefMonth() {
		return GetterUtil.getString(_originalRefMonth);
	}

	@JSON
	@Override
	public String getAbsenceCode() {
		if (_absenceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _absenceCode;
		}
	}

	@Override
	public void setAbsenceCode(String absenceCode) {
		_absenceCode = absenceCode;
	}

	@JSON
	@Override
	public String getCompleteDay() {
		if (_completeDay == null) {
			return StringPool.BLANK;
		}
		else {
			return _completeDay;
		}
	}

	@Override
	public void setCompleteDay(String completeDay) {
		_completeDay = completeDay;
	}

	@JSON
	@Override
	public int getFrom() {
		return _from;
	}

	@Override
	public void setFrom(int from) {
		_from = from;
	}

	@JSON
	@Override
	public int getTo() {
		return _to;
	}

	@Override
	public void setTo(int to) {
		_to = to;
	}

	@JSON
	@Override
	public int getHours() {
		return _hours;
	}

	@Override
	public void setHours(int hours) {
		_hours = hours;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public PersonalAbsence toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PersonalAbsence)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersonalAbsenceImpl personalAbsenceImpl = new PersonalAbsenceImpl();

		personalAbsenceImpl.setCustom_key(getCustom_key());
		personalAbsenceImpl.setPersonId(getPersonId());
		personalAbsenceImpl.setAbsenceDate(getAbsenceDate());
		personalAbsenceImpl.setRefMonth(getRefMonth());
		personalAbsenceImpl.setAbsenceCode(getAbsenceCode());
		personalAbsenceImpl.setCompleteDay(getCompleteDay());
		personalAbsenceImpl.setFrom(getFrom());
		personalAbsenceImpl.setTo(getTo());
		personalAbsenceImpl.setHours(getHours());
		personalAbsenceImpl.setDescription(getDescription());

		personalAbsenceImpl.resetOriginalValues();

		return personalAbsenceImpl;
	}

	@Override
	public int compareTo(PersonalAbsence personalAbsence) {
		String primaryKey = personalAbsence.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PersonalAbsence)) {
			return false;
		}

		PersonalAbsence personalAbsence = (PersonalAbsence)obj;

		String primaryKey = personalAbsence.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PersonalAbsenceModelImpl personalAbsenceModelImpl = this;

		personalAbsenceModelImpl._originalPersonId = personalAbsenceModelImpl._personId;

		personalAbsenceModelImpl._setOriginalPersonId = false;

		personalAbsenceModelImpl._originalRefMonth = personalAbsenceModelImpl._refMonth;

		personalAbsenceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PersonalAbsence> toCacheModel() {
		PersonalAbsenceCacheModel personalAbsenceCacheModel = new PersonalAbsenceCacheModel();

		personalAbsenceCacheModel.custom_key = getCustom_key();

		String custom_key = personalAbsenceCacheModel.custom_key;

		if ((custom_key != null) && (custom_key.length() == 0)) {
			personalAbsenceCacheModel.custom_key = null;
		}

		personalAbsenceCacheModel.personId = getPersonId();

		Date absenceDate = getAbsenceDate();

		if (absenceDate != null) {
			personalAbsenceCacheModel.absenceDate = absenceDate.getTime();
		}
		else {
			personalAbsenceCacheModel.absenceDate = Long.MIN_VALUE;
		}

		personalAbsenceCacheModel.refMonth = getRefMonth();

		String refMonth = personalAbsenceCacheModel.refMonth;

		if ((refMonth != null) && (refMonth.length() == 0)) {
			personalAbsenceCacheModel.refMonth = null;
		}

		personalAbsenceCacheModel.absenceCode = getAbsenceCode();

		String absenceCode = personalAbsenceCacheModel.absenceCode;

		if ((absenceCode != null) && (absenceCode.length() == 0)) {
			personalAbsenceCacheModel.absenceCode = null;
		}

		personalAbsenceCacheModel.completeDay = getCompleteDay();

		String completeDay = personalAbsenceCacheModel.completeDay;

		if ((completeDay != null) && (completeDay.length() == 0)) {
			personalAbsenceCacheModel.completeDay = null;
		}

		personalAbsenceCacheModel.from = getFrom();

		personalAbsenceCacheModel.to = getTo();

		personalAbsenceCacheModel.hours = getHours();

		personalAbsenceCacheModel.description = getDescription();

		String description = personalAbsenceCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			personalAbsenceCacheModel.description = null;
		}

		return personalAbsenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{custom_key=");
		sb.append(getCustom_key());
		sb.append(", personId=");
		sb.append(getPersonId());
		sb.append(", absenceDate=");
		sb.append(getAbsenceDate());
		sb.append(", refMonth=");
		sb.append(getRefMonth());
		sb.append(", absenceCode=");
		sb.append(getAbsenceCode());
		sb.append(", completeDay=");
		sb.append(getCompleteDay());
		sb.append(", from=");
		sb.append(getFrom());
		sb.append(", to=");
		sb.append(getTo());
		sb.append(", hours=");
		sb.append(getHours());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.job.siap.model.PersonalAbsence");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>custom_key</column-name><column-value><![CDATA[");
		sb.append(getCustom_key());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personId</column-name><column-value><![CDATA[");
		sb.append(getPersonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>absenceDate</column-name><column-value><![CDATA[");
		sb.append(getAbsenceDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refMonth</column-name><column-value><![CDATA[");
		sb.append(getRefMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>absenceCode</column-name><column-value><![CDATA[");
		sb.append(getAbsenceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>completeDay</column-name><column-value><![CDATA[");
		sb.append(getCompleteDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>from</column-name><column-value><![CDATA[");
		sb.append(getFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>to</column-name><column-value><![CDATA[");
		sb.append(getTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hours</column-name><column-value><![CDATA[");
		sb.append(getHours());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PersonalAbsence.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PersonalAbsence.class
		};
	private String _custom_key;
	private long _personId;
	private long _originalPersonId;
	private boolean _setOriginalPersonId;
	private Date _absenceDate;
	private String _refMonth;
	private String _originalRefMonth;
	private String _absenceCode;
	private String _completeDay;
	private int _from;
	private int _to;
	private int _hours;
	private String _description;
	private long _columnBitmask;
	private PersonalAbsence _escapedModel;
}