/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package external.bfc.intranet.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import external.bfc.intranet.mef.model.RigheRichieste;
import external.bfc.intranet.mef.model.RigheRichiesteModel;
import external.bfc.intranet.mef.model.RigheRichiesteSoap;
import external.bfc.intranet.mef.service.persistence.RigheRichiestePK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RigheRichieste service. Represents a row in the &quot;NEW_RGS_RIGHE_RICHIESTA_BFC&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RigheRichiesteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RigheRichiesteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RigheRichiesteImpl
 * @see RigheRichieste
 * @see RigheRichiesteModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RigheRichiesteModelImpl extends BaseModelImpl<RigheRichieste>
	implements RigheRichiesteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a righe richieste model instance should use the {@link RigheRichieste} interface instead.
	 */
	public static final String TABLE_NAME = "NEW_RGS_RIGHE_RICHIESTA_BFC";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "ID_MATERIALE", Types.BIGINT },
			{ "NUMERO_RIGA", Types.BIGINT },
			{ "QUANTITA_RICHIESTA", Types.BIGINT },
			{ "QUANTITA_DISPONIBILE", Types.BIGINT },
			{ "UID_INS", Types.BIGINT },
			{ "DATA_INS", Types.TIMESTAMP },
			{ "UID_UPD", Types.BIGINT },
			{ "DATA_UPD", Types.TIMESTAMP },
			{ "IMPORTO", Types.FLOAT },
			{ "SOTTOGRUPPO", Types.VARCHAR },
			{ "GRUPPO", Types.VARCHAR },
			{ "DESCRIZIONE", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ID_MATERIALE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NUMERO_RIGA", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUANTITA_RICHIESTA", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUANTITA_DISPONIBILE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("UID_INS", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DATA_INS", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("UID_UPD", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DATA_UPD", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("IMPORTO", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("SOTTOGRUPPO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GRUPPO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DESCRIZIONE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table NEW_RGS_RIGHE_RICHIESTA_BFC (ID LONG not null,ID_MATERIALE LONG not null,NUMERO_RIGA LONG,QUANTITA_RICHIESTA LONG,QUANTITA_DISPONIBILE LONG,UID_INS LONG,DATA_INS DATE null,UID_UPD LONG,DATA_UPD DATE null,IMPORTO DOUBLE,SOTTOGRUPPO VARCHAR(75) not null,GRUPPO VARCHAR(75) not null,DESCRIZIONE VARCHAR(75) null,primary key (ID, ID_MATERIALE, SOTTOGRUPPO, GRUPPO))";
	public static final String TABLE_SQL_DROP = "drop table NEW_RGS_RIGHE_RICHIESTA_BFC";
	public static final String ORDER_BY_JPQL = " ORDER BY righeRichieste.id.id ASC, righeRichieste.id.idMateriale ASC, righeRichieste.id.sottogruppo ASC, righeRichieste.id.gruppo ASC";
	public static final String ORDER_BY_SQL = " ORDER BY NEW_RGS_RIGHE_RICHIESTA_BFC.ID ASC, NEW_RGS_RIGHE_RICHIESTA_BFC.ID_MATERIALE ASC, NEW_RGS_RIGHE_RICHIESTA_BFC.SOTTOGRUPPO ASC, NEW_RGS_RIGHE_RICHIESTA_BFC.GRUPPO ASC";
	public static final String DATA_SOURCE = "stage";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(external.bfc.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.external.bfc.intranet.mef.model.RigheRichieste"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(external.bfc.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.external.bfc.intranet.mef.model.RigheRichieste"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(external.bfc.intranet.mef.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.external.bfc.intranet.mef.model.RigheRichieste"),
			true);
	public static final long ID_COLUMN_BITMASK = 1L;
	public static final long IDMATERIALE_COLUMN_BITMASK = 2L;
	public static final long SOTTOGRUPPO_COLUMN_BITMASK = 4L;
	public static final long GRUPPO_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RigheRichieste toModel(RigheRichiesteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RigheRichieste model = new RigheRichiesteImpl();

		model.setId(soapModel.getId());
		model.setIdMateriale(soapModel.getIdMateriale());
		model.setNumeroRiga(soapModel.getNumeroRiga());
		model.setQuantitaRichiesta(soapModel.getQuantitaRichiesta());
		model.setQuantitaDisponibile(soapModel.getQuantitaDisponibile());
		model.setUidIns(soapModel.getUidIns());
		model.setDataIns(soapModel.getDataIns());
		model.setUidUpd(soapModel.getUidUpd());
		model.setDataUpd(soapModel.getDataUpd());
		model.setImporto(soapModel.getImporto());
		model.setSottogruppo(soapModel.getSottogruppo());
		model.setGruppo(soapModel.getGruppo());
		model.setDescrizione(soapModel.getDescrizione());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RigheRichieste> toModels(RigheRichiesteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RigheRichieste> models = new ArrayList<RigheRichieste>(soapModels.length);

		for (RigheRichiesteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(external.bfc.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.external.bfc.intranet.mef.model.RigheRichieste"));

	public RigheRichiesteModelImpl() {
	}

	@Override
	public RigheRichiestePK getPrimaryKey() {
		return new RigheRichiestePK(_id, _idMateriale, _sottogruppo, _gruppo);
	}

	@Override
	public void setPrimaryKey(RigheRichiestePK primaryKey) {
		setId(primaryKey.id);
		setIdMateriale(primaryKey.idMateriale);
		setSottogruppo(primaryKey.sottogruppo);
		setGruppo(primaryKey.gruppo);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new RigheRichiestePK(_id, _idMateriale, _sottogruppo, _gruppo);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((RigheRichiestePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return RigheRichieste.class;
	}

	@Override
	public String getModelClassName() {
		return RigheRichieste.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("idMateriale", getIdMateriale());
		attributes.put("numeroRiga", getNumeroRiga());
		attributes.put("quantitaRichiesta", getQuantitaRichiesta());
		attributes.put("quantitaDisponibile", getQuantitaDisponibile());
		attributes.put("uidIns", getUidIns());
		attributes.put("dataIns", getDataIns());
		attributes.put("uidUpd", getUidUpd());
		attributes.put("dataUpd", getDataUpd());
		attributes.put("importo", getImporto());
		attributes.put("sottogruppo", getSottogruppo());
		attributes.put("gruppo", getGruppo());
		attributes.put("descrizione", getDescrizione());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long idMateriale = (Long)attributes.get("idMateriale");

		if (idMateriale != null) {
			setIdMateriale(idMateriale);
		}

		Long numeroRiga = (Long)attributes.get("numeroRiga");

		if (numeroRiga != null) {
			setNumeroRiga(numeroRiga);
		}

		Long quantitaRichiesta = (Long)attributes.get("quantitaRichiesta");

		if (quantitaRichiesta != null) {
			setQuantitaRichiesta(quantitaRichiesta);
		}

		Long quantitaDisponibile = (Long)attributes.get("quantitaDisponibile");

		if (quantitaDisponibile != null) {
			setQuantitaDisponibile(quantitaDisponibile);
		}

		Long uidIns = (Long)attributes.get("uidIns");

		if (uidIns != null) {
			setUidIns(uidIns);
		}

		Date dataIns = (Date)attributes.get("dataIns");

		if (dataIns != null) {
			setDataIns(dataIns);
		}

		Long uidUpd = (Long)attributes.get("uidUpd");

		if (uidUpd != null) {
			setUidUpd(uidUpd);
		}

		Date dataUpd = (Date)attributes.get("dataUpd");

		if (dataUpd != null) {
			setDataUpd(dataUpd);
		}

		Float importo = (Float)attributes.get("importo");

		if (importo != null) {
			setImporto(importo);
		}

		String sottogruppo = (String)attributes.get("sottogruppo");

		if (sottogruppo != null) {
			setSottogruppo(sottogruppo);
		}

		String gruppo = (String)attributes.get("gruppo");

		if (gruppo != null) {
			setGruppo(gruppo);
		}

		String descrizione = (String)attributes.get("descrizione");

		if (descrizione != null) {
			setDescrizione(descrizione);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask |= ID_COLUMN_BITMASK;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	@JSON
	@Override
	public long getIdMateriale() {
		return _idMateriale;
	}

	@Override
	public void setIdMateriale(long idMateriale) {
		_idMateriale = idMateriale;
	}

	@JSON
	@Override
	public long getNumeroRiga() {
		return _numeroRiga;
	}

	@Override
	public void setNumeroRiga(long numeroRiga) {
		_numeroRiga = numeroRiga;
	}

	@JSON
	@Override
	public long getQuantitaRichiesta() {
		return _quantitaRichiesta;
	}

	@Override
	public void setQuantitaRichiesta(long quantitaRichiesta) {
		_quantitaRichiesta = quantitaRichiesta;
	}

	@JSON
	@Override
	public long getQuantitaDisponibile() {
		return _quantitaDisponibile;
	}

	@Override
	public void setQuantitaDisponibile(long quantitaDisponibile) {
		_quantitaDisponibile = quantitaDisponibile;
	}

	@JSON
	@Override
	public long getUidIns() {
		return _uidIns;
	}

	@Override
	public void setUidIns(long uidIns) {
		_uidIns = uidIns;
	}

	@JSON
	@Override
	public Date getDataIns() {
		return _dataIns;
	}

	@Override
	public void setDataIns(Date dataIns) {
		_dataIns = dataIns;
	}

	@JSON
	@Override
	public long getUidUpd() {
		return _uidUpd;
	}

	@Override
	public void setUidUpd(long uidUpd) {
		_uidUpd = uidUpd;
	}

	@JSON
	@Override
	public Date getDataUpd() {
		return _dataUpd;
	}

	@Override
	public void setDataUpd(Date dataUpd) {
		_dataUpd = dataUpd;
	}

	@JSON
	@Override
	public float getImporto() {
		return _importo;
	}

	@Override
	public void setImporto(float importo) {
		_importo = importo;
	}

	@JSON
	@Override
	public String getSottogruppo() {
		if (_sottogruppo == null) {
			return StringPool.BLANK;
		}
		else {
			return _sottogruppo;
		}
	}

	@Override
	public void setSottogruppo(String sottogruppo) {
		_sottogruppo = sottogruppo;
	}

	@JSON
	@Override
	public String getGruppo() {
		if (_gruppo == null) {
			return StringPool.BLANK;
		}
		else {
			return _gruppo;
		}
	}

	@Override
	public void setGruppo(String gruppo) {
		_gruppo = gruppo;
	}

	@JSON
	@Override
	public String getDescrizione() {
		if (_descrizione == null) {
			return StringPool.BLANK;
		}
		else {
			return _descrizione;
		}
	}

	@Override
	public void setDescrizione(String descrizione) {
		_descrizione = descrizione;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public RigheRichieste toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RigheRichieste)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RigheRichiesteImpl righeRichiesteImpl = new RigheRichiesteImpl();

		righeRichiesteImpl.setId(getId());
		righeRichiesteImpl.setIdMateriale(getIdMateriale());
		righeRichiesteImpl.setNumeroRiga(getNumeroRiga());
		righeRichiesteImpl.setQuantitaRichiesta(getQuantitaRichiesta());
		righeRichiesteImpl.setQuantitaDisponibile(getQuantitaDisponibile());
		righeRichiesteImpl.setUidIns(getUidIns());
		righeRichiesteImpl.setDataIns(getDataIns());
		righeRichiesteImpl.setUidUpd(getUidUpd());
		righeRichiesteImpl.setDataUpd(getDataUpd());
		righeRichiesteImpl.setImporto(getImporto());
		righeRichiesteImpl.setSottogruppo(getSottogruppo());
		righeRichiesteImpl.setGruppo(getGruppo());
		righeRichiesteImpl.setDescrizione(getDescrizione());

		righeRichiesteImpl.resetOriginalValues();

		return righeRichiesteImpl;
	}

	@Override
	public int compareTo(RigheRichieste righeRichieste) {
		RigheRichiestePK primaryKey = righeRichieste.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RigheRichieste)) {
			return false;
		}

		RigheRichieste righeRichieste = (RigheRichieste)obj;

		RigheRichiestePK primaryKey = righeRichieste.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RigheRichiesteModelImpl righeRichiesteModelImpl = this;

		righeRichiesteModelImpl._originalId = righeRichiesteModelImpl._id;

		righeRichiesteModelImpl._setOriginalId = false;

		righeRichiesteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RigheRichieste> toCacheModel() {
		RigheRichiesteCacheModel righeRichiesteCacheModel = new RigheRichiesteCacheModel();

		righeRichiesteCacheModel.righeRichiestePK = getPrimaryKey();

		righeRichiesteCacheModel.id = getId();

		righeRichiesteCacheModel.idMateriale = getIdMateriale();

		righeRichiesteCacheModel.numeroRiga = getNumeroRiga();

		righeRichiesteCacheModel.quantitaRichiesta = getQuantitaRichiesta();

		righeRichiesteCacheModel.quantitaDisponibile = getQuantitaDisponibile();

		righeRichiesteCacheModel.uidIns = getUidIns();

		Date dataIns = getDataIns();

		if (dataIns != null) {
			righeRichiesteCacheModel.dataIns = dataIns.getTime();
		}
		else {
			righeRichiesteCacheModel.dataIns = Long.MIN_VALUE;
		}

		righeRichiesteCacheModel.uidUpd = getUidUpd();

		Date dataUpd = getDataUpd();

		if (dataUpd != null) {
			righeRichiesteCacheModel.dataUpd = dataUpd.getTime();
		}
		else {
			righeRichiesteCacheModel.dataUpd = Long.MIN_VALUE;
		}

		righeRichiesteCacheModel.importo = getImporto();

		righeRichiesteCacheModel.sottogruppo = getSottogruppo();

		String sottogruppo = righeRichiesteCacheModel.sottogruppo;

		if ((sottogruppo != null) && (sottogruppo.length() == 0)) {
			righeRichiesteCacheModel.sottogruppo = null;
		}

		righeRichiesteCacheModel.gruppo = getGruppo();

		String gruppo = righeRichiesteCacheModel.gruppo;

		if ((gruppo != null) && (gruppo.length() == 0)) {
			righeRichiesteCacheModel.gruppo = null;
		}

		righeRichiesteCacheModel.descrizione = getDescrizione();

		String descrizione = righeRichiesteCacheModel.descrizione;

		if ((descrizione != null) && (descrizione.length() == 0)) {
			righeRichiesteCacheModel.descrizione = null;
		}

		return righeRichiesteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", idMateriale=");
		sb.append(getIdMateriale());
		sb.append(", numeroRiga=");
		sb.append(getNumeroRiga());
		sb.append(", quantitaRichiesta=");
		sb.append(getQuantitaRichiesta());
		sb.append(", quantitaDisponibile=");
		sb.append(getQuantitaDisponibile());
		sb.append(", uidIns=");
		sb.append(getUidIns());
		sb.append(", dataIns=");
		sb.append(getDataIns());
		sb.append(", uidUpd=");
		sb.append(getUidUpd());
		sb.append(", dataUpd=");
		sb.append(getDataUpd());
		sb.append(", importo=");
		sb.append(getImporto());
		sb.append(", sottogruppo=");
		sb.append(getSottogruppo());
		sb.append(", gruppo=");
		sb.append(getGruppo());
		sb.append(", descrizione=");
		sb.append(getDescrizione());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("external.bfc.intranet.mef.model.RigheRichieste");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idMateriale</column-name><column-value><![CDATA[");
		sb.append(getIdMateriale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numeroRiga</column-name><column-value><![CDATA[");
		sb.append(getNumeroRiga());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantitaRichiesta</column-name><column-value><![CDATA[");
		sb.append(getQuantitaRichiesta());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantitaDisponibile</column-name><column-value><![CDATA[");
		sb.append(getQuantitaDisponibile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uidIns</column-name><column-value><![CDATA[");
		sb.append(getUidIns());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataIns</column-name><column-value><![CDATA[");
		sb.append(getDataIns());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uidUpd</column-name><column-value><![CDATA[");
		sb.append(getUidUpd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataUpd</column-name><column-value><![CDATA[");
		sb.append(getDataUpd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importo</column-name><column-value><![CDATA[");
		sb.append(getImporto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sottogruppo</column-name><column-value><![CDATA[");
		sb.append(getSottogruppo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gruppo</column-name><column-value><![CDATA[");
		sb.append(getGruppo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descrizione</column-name><column-value><![CDATA[");
		sb.append(getDescrizione());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RigheRichieste.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RigheRichieste.class
		};
	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private long _idMateriale;
	private long _numeroRiga;
	private long _quantitaRichiesta;
	private long _quantitaDisponibile;
	private long _uidIns;
	private Date _dataIns;
	private long _uidUpd;
	private Date _dataUpd;
	private float _importo;
	private String _sottogruppo;
	private String _gruppo;
	private String _descrizione;
	private long _columnBitmask;
	private RigheRichieste _escapedModel;
}