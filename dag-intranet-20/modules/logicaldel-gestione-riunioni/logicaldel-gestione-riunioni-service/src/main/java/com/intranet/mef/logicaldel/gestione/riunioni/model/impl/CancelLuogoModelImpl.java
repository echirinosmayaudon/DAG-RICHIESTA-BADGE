/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.logicaldel.gestione.riunioni.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.logicaldel.gestione.riunioni.model.CancelLuogo;
import com.intranet.mef.logicaldel.gestione.riunioni.model.CancelLuogoModel;
import com.intranet.mef.logicaldel.gestione.riunioni.model.CancelLuogoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CancelLuogo service. Represents a row in the &quot;LOGICALGR_CancelLuogo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CancelLuogoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CancelLuogoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CancelLuogoImpl
 * @see CancelLuogo
 * @see CancelLuogoModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CancelLuogoModelImpl extends BaseModelImpl<CancelLuogo>
	implements CancelLuogoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cancel luogo model instance should use the {@link CancelLuogo} interface instead.
	 */
	public static final String TABLE_NAME = "LOGICALGR_CancelLuogo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_luogo", Types.BIGINT },
			{ "cancellato", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_luogo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cancellato", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table LOGICALGR_CancelLuogo (id_luogo LONG not null primary key,cancellato BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table LOGICALGR_CancelLuogo";
	public static final String ORDER_BY_JPQL = " ORDER BY cancelLuogo.id_luogo ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LOGICALGR_CancelLuogo.id_luogo ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.logicaldel.gestione.riunioni.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.logicaldel.gestione.riunioni.model.CancelLuogo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.logicaldel.gestione.riunioni.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.logicaldel.gestione.riunioni.model.CancelLuogo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.intranet.mef.logicaldel.gestione.riunioni.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.intranet.mef.logicaldel.gestione.riunioni.model.CancelLuogo"),
			true);
	public static final long CANCELLATO_COLUMN_BITMASK = 1L;
	public static final long ID_LUOGO_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CancelLuogo toModel(CancelLuogoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CancelLuogo model = new CancelLuogoImpl();

		model.setId_luogo(soapModel.getId_luogo());
		model.setCancellato(soapModel.getCancellato());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CancelLuogo> toModels(CancelLuogoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CancelLuogo> models = new ArrayList<CancelLuogo>(soapModels.length);

		for (CancelLuogoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.logicaldel.gestione.riunioni.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.logicaldel.gestione.riunioni.model.CancelLuogo"));

	public CancelLuogoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_luogo;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_luogo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_luogo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CancelLuogo.class;
	}

	@Override
	public String getModelClassName() {
		return CancelLuogo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_luogo", getId_luogo());
		attributes.put("cancellato", getCancellato());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_luogo = (Long)attributes.get("id_luogo");

		if (id_luogo != null) {
			setId_luogo(id_luogo);
		}

		Boolean cancellato = (Boolean)attributes.get("cancellato");

		if (cancellato != null) {
			setCancellato(cancellato);
		}
	}

	@JSON
	@Override
	public long getId_luogo() {
		return _id_luogo;
	}

	@Override
	public void setId_luogo(long id_luogo) {
		_id_luogo = id_luogo;
	}

	@JSON
	@Override
	public boolean getCancellato() {
		return _cancellato;
	}

	@JSON
	@Override
	public boolean isCancellato() {
		return _cancellato;
	}

	@Override
	public void setCancellato(boolean cancellato) {
		_columnBitmask |= CANCELLATO_COLUMN_BITMASK;

		if (!_setOriginalCancellato) {
			_setOriginalCancellato = true;

			_originalCancellato = _cancellato;
		}

		_cancellato = cancellato;
	}

	public boolean getOriginalCancellato() {
		return _originalCancellato;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CancelLuogo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CancelLuogo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CancelLuogo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CancelLuogoImpl cancelLuogoImpl = new CancelLuogoImpl();

		cancelLuogoImpl.setId_luogo(getId_luogo());
		cancelLuogoImpl.setCancellato(getCancellato());

		cancelLuogoImpl.resetOriginalValues();

		return cancelLuogoImpl;
	}

	@Override
	public int compareTo(CancelLuogo cancelLuogo) {
		long primaryKey = cancelLuogo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CancelLuogo)) {
			return false;
		}

		CancelLuogo cancelLuogo = (CancelLuogo)obj;

		long primaryKey = cancelLuogo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CancelLuogoModelImpl cancelLuogoModelImpl = this;

		cancelLuogoModelImpl._originalCancellato = cancelLuogoModelImpl._cancellato;

		cancelLuogoModelImpl._setOriginalCancellato = false;

		cancelLuogoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CancelLuogo> toCacheModel() {
		CancelLuogoCacheModel cancelLuogoCacheModel = new CancelLuogoCacheModel();

		cancelLuogoCacheModel.id_luogo = getId_luogo();

		cancelLuogoCacheModel.cancellato = getCancellato();

		return cancelLuogoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{id_luogo=");
		sb.append(getId_luogo());
		sb.append(", cancellato=");
		sb.append(getCancellato());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append(
			"com.intranet.mef.logicaldel.gestione.riunioni.model.CancelLuogo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_luogo</column-name><column-value><![CDATA[");
		sb.append(getId_luogo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancellato</column-name><column-value><![CDATA[");
		sb.append(getCancellato());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CancelLuogo.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CancelLuogo.class
		};
	private long _id_luogo;
	private boolean _cancellato;
	private boolean _originalCancellato;
	private boolean _setOriginalCancellato;
	private long _columnBitmask;
	private CancelLuogo _escapedModel;
}