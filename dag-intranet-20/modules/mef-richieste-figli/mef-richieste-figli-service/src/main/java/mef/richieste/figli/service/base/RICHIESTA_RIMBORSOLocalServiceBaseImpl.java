/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mef.richieste.figli.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import mef.richieste.figli.model.RICHIESTA_RIMBORSO;
import mef.richieste.figli.service.RICHIESTA_RIMBORSOLocalService;
import mef.richieste.figli.service.persistence.RICHIESTA_RIMBORSOPersistence;

/**
 * Provides the base implementation for the richiesta_rimborso local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link mef.richieste.figli.service.impl.RICHIESTA_RIMBORSOLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see mef.richieste.figli.service.impl.RICHIESTA_RIMBORSOLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class RICHIESTA_RIMBORSOLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements RICHIESTA_RIMBORSOLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>RICHIESTA_RIMBORSOLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>mef.richieste.figli.service.RICHIESTA_RIMBORSOLocalServiceUtil</code>.
	 */

	/**
	 * Adds the richiesta_rimborso to the database. Also notifies the appropriate model listeners.
	 *
	 * @param richiesta_rimborso the richiesta_rimborso
	 * @return the richiesta_rimborso that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RICHIESTA_RIMBORSO addRICHIESTA_RIMBORSO(
		RICHIESTA_RIMBORSO richiesta_rimborso) {

		richiesta_rimborso.setNew(true);

		return richiesta_rimborsoPersistence.update(richiesta_rimborso);
	}

	/**
	 * Creates a new richiesta_rimborso with the primary key. Does not add the richiesta_rimborso to the database.
	 *
	 * @param Id the primary key for the new richiesta_rimborso
	 * @return the new richiesta_rimborso
	 */
	@Override
	@Transactional(enabled = false)
	public RICHIESTA_RIMBORSO createRICHIESTA_RIMBORSO(long Id) {
		return richiesta_rimborsoPersistence.create(Id);
	}

	/**
	 * Deletes the richiesta_rimborso with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param Id the primary key of the richiesta_rimborso
	 * @return the richiesta_rimborso that was removed
	 * @throws PortalException if a richiesta_rimborso with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RICHIESTA_RIMBORSO deleteRICHIESTA_RIMBORSO(long Id)
		throws PortalException {

		return richiesta_rimborsoPersistence.remove(Id);
	}

	/**
	 * Deletes the richiesta_rimborso from the database. Also notifies the appropriate model listeners.
	 *
	 * @param richiesta_rimborso the richiesta_rimborso
	 * @return the richiesta_rimborso that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RICHIESTA_RIMBORSO deleteRICHIESTA_RIMBORSO(
		RICHIESTA_RIMBORSO richiesta_rimborso) {

		return richiesta_rimborsoPersistence.remove(richiesta_rimborso);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			RICHIESTA_RIMBORSO.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return richiesta_rimborsoPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>mef.richieste.figli.model.impl.RICHIESTA_RIMBORSOModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return richiesta_rimborsoPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>mef.richieste.figli.model.impl.RICHIESTA_RIMBORSOModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return richiesta_rimborsoPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return richiesta_rimborsoPersistence.countWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return richiesta_rimborsoPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public RICHIESTA_RIMBORSO fetchRICHIESTA_RIMBORSO(long Id) {
		return richiesta_rimborsoPersistence.fetchByPrimaryKey(Id);
	}

	/**
	 * Returns the richiesta_rimborso with the primary key.
	 *
	 * @param Id the primary key of the richiesta_rimborso
	 * @return the richiesta_rimborso
	 * @throws PortalException if a richiesta_rimborso with the primary key could not be found
	 */
	@Override
	public RICHIESTA_RIMBORSO getRICHIESTA_RIMBORSO(long Id)
		throws PortalException {

		return richiesta_rimborsoPersistence.findByPrimaryKey(Id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(
			richiesta_rimborsoLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RICHIESTA_RIMBORSO.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("Id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			richiesta_rimborsoLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(RICHIESTA_RIMBORSO.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("Id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(
			richiesta_rimborsoLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RICHIESTA_RIMBORSO.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("Id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return richiesta_rimborsoLocalService.deleteRICHIESTA_RIMBORSO(
			(RICHIESTA_RIMBORSO)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return richiesta_rimborsoPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the richiesta_rimborsos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>mef.richieste.figli.model.impl.RICHIESTA_RIMBORSOModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of richiesta_rimborsos
	 * @param end the upper bound of the range of richiesta_rimborsos (not inclusive)
	 * @return the range of richiesta_rimborsos
	 */
	@Override
	public List<RICHIESTA_RIMBORSO> getRICHIESTA_RIMBORSOs(int start, int end) {
		return richiesta_rimborsoPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of richiesta_rimborsos.
	 *
	 * @return the number of richiesta_rimborsos
	 */
	@Override
	public int getRICHIESTA_RIMBORSOsCount() {
		return richiesta_rimborsoPersistence.countAll();
	}

	/**
	 * Updates the richiesta_rimborso in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param richiesta_rimborso the richiesta_rimborso
	 * @return the richiesta_rimborso that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RICHIESTA_RIMBORSO updateRICHIESTA_RIMBORSO(
		RICHIESTA_RIMBORSO richiesta_rimborso) {

		return richiesta_rimborsoPersistence.update(richiesta_rimborso);
	}

	/**
	 * Returns the richiesta_rimborso local service.
	 *
	 * @return the richiesta_rimborso local service
	 */
	public RICHIESTA_RIMBORSOLocalService getRICHIESTA_RIMBORSOLocalService() {
		return richiesta_rimborsoLocalService;
	}

	/**
	 * Sets the richiesta_rimborso local service.
	 *
	 * @param richiesta_rimborsoLocalService the richiesta_rimborso local service
	 */
	public void setRICHIESTA_RIMBORSOLocalService(
		RICHIESTA_RIMBORSOLocalService richiesta_rimborsoLocalService) {

		this.richiesta_rimborsoLocalService = richiesta_rimborsoLocalService;
	}

	/**
	 * Returns the richiesta_rimborso persistence.
	 *
	 * @return the richiesta_rimborso persistence
	 */
	public RICHIESTA_RIMBORSOPersistence getRICHIESTA_RIMBORSOPersistence() {
		return richiesta_rimborsoPersistence;
	}

	/**
	 * Sets the richiesta_rimborso persistence.
	 *
	 * @param richiesta_rimborsoPersistence the richiesta_rimborso persistence
	 */
	public void setRICHIESTA_RIMBORSOPersistence(
		RICHIESTA_RIMBORSOPersistence richiesta_rimborsoPersistence) {

		this.richiesta_rimborsoPersistence = richiesta_rimborsoPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"mef.richieste.figli.model.RICHIESTA_RIMBORSO",
			richiesta_rimborsoLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"mef.richieste.figli.model.RICHIESTA_RIMBORSO");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return RICHIESTA_RIMBORSOLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return RICHIESTA_RIMBORSO.class;
	}

	protected String getModelClassName() {
		return RICHIESTA_RIMBORSO.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource =
				richiesta_rimborsoPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = RICHIESTA_RIMBORSOLocalService.class)
	protected RICHIESTA_RIMBORSOLocalService richiesta_rimborsoLocalService;

	@BeanReference(type = RICHIESTA_RIMBORSOPersistence.class)
	protected RICHIESTA_RIMBORSOPersistence richiesta_rimborsoPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}