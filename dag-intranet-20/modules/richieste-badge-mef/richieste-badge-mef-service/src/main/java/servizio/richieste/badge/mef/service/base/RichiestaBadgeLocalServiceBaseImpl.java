/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servizio.richieste.badge.mef.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import servizio.richieste.badge.mef.model.RichiestaBadge;
import servizio.richieste.badge.mef.service.RichiestaBadgeLocalService;
import servizio.richieste.badge.mef.service.persistence.AnaDipExtPersistence;
import servizio.richieste.badge.mef.service.persistence.GestioneUtentiPersistence;
import servizio.richieste.badge.mef.service.persistence.OggettoRichiestaPersistence;
import servizio.richieste.badge.mef.service.persistence.RichiestaBadgeFinder;
import servizio.richieste.badge.mef.service.persistence.RichiestaBadgePersistence;
import servizio.richieste.badge.mef.service.persistence.SediEsternePersistence;
import servizio.richieste.badge.mef.service.persistence.StatoRichiestaPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the richiesta badge local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link servizio.richieste.badge.mef.service.impl.RichiestaBadgeLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see servizio.richieste.badge.mef.service.impl.RichiestaBadgeLocalServiceImpl
 * @see servizio.richieste.badge.mef.service.RichiestaBadgeLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class RichiestaBadgeLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements RichiestaBadgeLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link servizio.richieste.badge.mef.service.RichiestaBadgeLocalServiceUtil} to access the richiesta badge local service.
	 */

	/**
	 * Adds the richiesta badge to the database. Also notifies the appropriate model listeners.
	 *
	 * @param richiestaBadge the richiesta badge
	 * @return the richiesta badge that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RichiestaBadge addRichiestaBadge(RichiestaBadge richiestaBadge) {
		richiestaBadge.setNew(true);

		return richiestaBadgePersistence.update(richiestaBadge);
	}

	/**
	 * Creates a new richiesta badge with the primary key. Does not add the richiesta badge to the database.
	 *
	 * @param id_pk the primary key for the new richiesta badge
	 * @return the new richiesta badge
	 */
	@Override
	public RichiestaBadge createRichiestaBadge(long id_pk) {
		return richiestaBadgePersistence.create(id_pk);
	}

	/**
	 * Deletes the richiesta badge with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id_pk the primary key of the richiesta badge
	 * @return the richiesta badge that was removed
	 * @throws PortalException if a richiesta badge with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RichiestaBadge deleteRichiestaBadge(long id_pk)
		throws PortalException {
		return richiestaBadgePersistence.remove(id_pk);
	}

	/**
	 * Deletes the richiesta badge from the database. Also notifies the appropriate model listeners.
	 *
	 * @param richiestaBadge the richiesta badge
	 * @return the richiesta badge that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RichiestaBadge deleteRichiestaBadge(RichiestaBadge richiestaBadge) {
		return richiestaBadgePersistence.remove(richiestaBadge);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(RichiestaBadge.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return richiestaBadgePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link servizio.richieste.badge.mef.model.impl.RichiestaBadgeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return richiestaBadgePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link servizio.richieste.badge.mef.model.impl.RichiestaBadgeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return richiestaBadgePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return richiestaBadgePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return richiestaBadgePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public RichiestaBadge fetchRichiestaBadge(long id_pk) {
		return richiestaBadgePersistence.fetchByPrimaryKey(id_pk);
	}

	/**
	 * Returns the richiesta badge with the primary key.
	 *
	 * @param id_pk the primary key of the richiesta badge
	 * @return the richiesta badge
	 * @throws PortalException if a richiesta badge with the primary key could not be found
	 */
	@Override
	public RichiestaBadge getRichiestaBadge(long id_pk)
		throws PortalException {
		return richiestaBadgePersistence.findByPrimaryKey(id_pk);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(richiestaBadgeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RichiestaBadge.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id_pk");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(richiestaBadgeLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(RichiestaBadge.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id_pk");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(richiestaBadgeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RichiestaBadge.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id_pk");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return richiestaBadgeLocalService.deleteRichiestaBadge((RichiestaBadge)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return richiestaBadgePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the richiesta badges.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link servizio.richieste.badge.mef.model.impl.RichiestaBadgeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of richiesta badges
	 * @param end the upper bound of the range of richiesta badges (not inclusive)
	 * @return the range of richiesta badges
	 */
	@Override
	public List<RichiestaBadge> getRichiestaBadges(int start, int end) {
		return richiestaBadgePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of richiesta badges.
	 *
	 * @return the number of richiesta badges
	 */
	@Override
	public int getRichiestaBadgesCount() {
		return richiestaBadgePersistence.countAll();
	}

	/**
	 * Updates the richiesta badge in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param richiestaBadge the richiesta badge
	 * @return the richiesta badge that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RichiestaBadge updateRichiestaBadge(RichiestaBadge richiestaBadge) {
		return richiestaBadgePersistence.update(richiestaBadge);
	}

	/**
	 * Returns the ana dip ext local service.
	 *
	 * @return the ana dip ext local service
	 */
	public servizio.richieste.badge.mef.service.AnaDipExtLocalService getAnaDipExtLocalService() {
		return anaDipExtLocalService;
	}

	/**
	 * Sets the ana dip ext local service.
	 *
	 * @param anaDipExtLocalService the ana dip ext local service
	 */
	public void setAnaDipExtLocalService(
		servizio.richieste.badge.mef.service.AnaDipExtLocalService anaDipExtLocalService) {
		this.anaDipExtLocalService = anaDipExtLocalService;
	}

	/**
	 * Returns the ana dip ext persistence.
	 *
	 * @return the ana dip ext persistence
	 */
	public AnaDipExtPersistence getAnaDipExtPersistence() {
		return anaDipExtPersistence;
	}

	/**
	 * Sets the ana dip ext persistence.
	 *
	 * @param anaDipExtPersistence the ana dip ext persistence
	 */
	public void setAnaDipExtPersistence(
		AnaDipExtPersistence anaDipExtPersistence) {
		this.anaDipExtPersistence = anaDipExtPersistence;
	}

	/**
	 * Returns the gestione utenti local service.
	 *
	 * @return the gestione utenti local service
	 */
	public servizio.richieste.badge.mef.service.GestioneUtentiLocalService getGestioneUtentiLocalService() {
		return gestioneUtentiLocalService;
	}

	/**
	 * Sets the gestione utenti local service.
	 *
	 * @param gestioneUtentiLocalService the gestione utenti local service
	 */
	public void setGestioneUtentiLocalService(
		servizio.richieste.badge.mef.service.GestioneUtentiLocalService gestioneUtentiLocalService) {
		this.gestioneUtentiLocalService = gestioneUtentiLocalService;
	}

	/**
	 * Returns the gestione utenti persistence.
	 *
	 * @return the gestione utenti persistence
	 */
	public GestioneUtentiPersistence getGestioneUtentiPersistence() {
		return gestioneUtentiPersistence;
	}

	/**
	 * Sets the gestione utenti persistence.
	 *
	 * @param gestioneUtentiPersistence the gestione utenti persistence
	 */
	public void setGestioneUtentiPersistence(
		GestioneUtentiPersistence gestioneUtentiPersistence) {
		this.gestioneUtentiPersistence = gestioneUtentiPersistence;
	}

	/**
	 * Returns the oggetto richiesta local service.
	 *
	 * @return the oggetto richiesta local service
	 */
	public servizio.richieste.badge.mef.service.OggettoRichiestaLocalService getOggettoRichiestaLocalService() {
		return oggettoRichiestaLocalService;
	}

	/**
	 * Sets the oggetto richiesta local service.
	 *
	 * @param oggettoRichiestaLocalService the oggetto richiesta local service
	 */
	public void setOggettoRichiestaLocalService(
		servizio.richieste.badge.mef.service.OggettoRichiestaLocalService oggettoRichiestaLocalService) {
		this.oggettoRichiestaLocalService = oggettoRichiestaLocalService;
	}

	/**
	 * Returns the oggetto richiesta persistence.
	 *
	 * @return the oggetto richiesta persistence
	 */
	public OggettoRichiestaPersistence getOggettoRichiestaPersistence() {
		return oggettoRichiestaPersistence;
	}

	/**
	 * Sets the oggetto richiesta persistence.
	 *
	 * @param oggettoRichiestaPersistence the oggetto richiesta persistence
	 */
	public void setOggettoRichiestaPersistence(
		OggettoRichiestaPersistence oggettoRichiestaPersistence) {
		this.oggettoRichiestaPersistence = oggettoRichiestaPersistence;
	}

	/**
	 * Returns the richiesta badge local service.
	 *
	 * @return the richiesta badge local service
	 */
	public RichiestaBadgeLocalService getRichiestaBadgeLocalService() {
		return richiestaBadgeLocalService;
	}

	/**
	 * Sets the richiesta badge local service.
	 *
	 * @param richiestaBadgeLocalService the richiesta badge local service
	 */
	public void setRichiestaBadgeLocalService(
		RichiestaBadgeLocalService richiestaBadgeLocalService) {
		this.richiestaBadgeLocalService = richiestaBadgeLocalService;
	}

	/**
	 * Returns the richiesta badge persistence.
	 *
	 * @return the richiesta badge persistence
	 */
	public RichiestaBadgePersistence getRichiestaBadgePersistence() {
		return richiestaBadgePersistence;
	}

	/**
	 * Sets the richiesta badge persistence.
	 *
	 * @param richiestaBadgePersistence the richiesta badge persistence
	 */
	public void setRichiestaBadgePersistence(
		RichiestaBadgePersistence richiestaBadgePersistence) {
		this.richiestaBadgePersistence = richiestaBadgePersistence;
	}

	/**
	 * Returns the richiesta badge finder.
	 *
	 * @return the richiesta badge finder
	 */
	public RichiestaBadgeFinder getRichiestaBadgeFinder() {
		return richiestaBadgeFinder;
	}

	/**
	 * Sets the richiesta badge finder.
	 *
	 * @param richiestaBadgeFinder the richiesta badge finder
	 */
	public void setRichiestaBadgeFinder(
		RichiestaBadgeFinder richiestaBadgeFinder) {
		this.richiestaBadgeFinder = richiestaBadgeFinder;
	}

	/**
	 * Returns the sedi esterne local service.
	 *
	 * @return the sedi esterne local service
	 */
	public servizio.richieste.badge.mef.service.SediEsterneLocalService getSediEsterneLocalService() {
		return sediEsterneLocalService;
	}

	/**
	 * Sets the sedi esterne local service.
	 *
	 * @param sediEsterneLocalService the sedi esterne local service
	 */
	public void setSediEsterneLocalService(
		servizio.richieste.badge.mef.service.SediEsterneLocalService sediEsterneLocalService) {
		this.sediEsterneLocalService = sediEsterneLocalService;
	}

	/**
	 * Returns the sedi esterne persistence.
	 *
	 * @return the sedi esterne persistence
	 */
	public SediEsternePersistence getSediEsternePersistence() {
		return sediEsternePersistence;
	}

	/**
	 * Sets the sedi esterne persistence.
	 *
	 * @param sediEsternePersistence the sedi esterne persistence
	 */
	public void setSediEsternePersistence(
		SediEsternePersistence sediEsternePersistence) {
		this.sediEsternePersistence = sediEsternePersistence;
	}

	/**
	 * Returns the stato richiesta local service.
	 *
	 * @return the stato richiesta local service
	 */
	public servizio.richieste.badge.mef.service.StatoRichiestaLocalService getStatoRichiestaLocalService() {
		return statoRichiestaLocalService;
	}

	/**
	 * Sets the stato richiesta local service.
	 *
	 * @param statoRichiestaLocalService the stato richiesta local service
	 */
	public void setStatoRichiestaLocalService(
		servizio.richieste.badge.mef.service.StatoRichiestaLocalService statoRichiestaLocalService) {
		this.statoRichiestaLocalService = statoRichiestaLocalService;
	}

	/**
	 * Returns the stato richiesta persistence.
	 *
	 * @return the stato richiesta persistence
	 */
	public StatoRichiestaPersistence getStatoRichiestaPersistence() {
		return statoRichiestaPersistence;
	}

	/**
	 * Sets the stato richiesta persistence.
	 *
	 * @param statoRichiestaPersistence the stato richiesta persistence
	 */
	public void setStatoRichiestaPersistence(
		StatoRichiestaPersistence statoRichiestaPersistence) {
		this.statoRichiestaPersistence = statoRichiestaPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("servizio.richieste.badge.mef.model.RichiestaBadge",
			richiestaBadgeLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"servizio.richieste.badge.mef.model.RichiestaBadge");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return RichiestaBadgeLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return RichiestaBadge.class;
	}

	protected String getModelClassName() {
		return RichiestaBadge.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = richiestaBadgePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = servizio.richieste.badge.mef.service.AnaDipExtLocalService.class)
	protected servizio.richieste.badge.mef.service.AnaDipExtLocalService anaDipExtLocalService;
	@BeanReference(type = AnaDipExtPersistence.class)
	protected AnaDipExtPersistence anaDipExtPersistence;
	@BeanReference(type = servizio.richieste.badge.mef.service.GestioneUtentiLocalService.class)
	protected servizio.richieste.badge.mef.service.GestioneUtentiLocalService gestioneUtentiLocalService;
	@BeanReference(type = GestioneUtentiPersistence.class)
	protected GestioneUtentiPersistence gestioneUtentiPersistence;
	@BeanReference(type = servizio.richieste.badge.mef.service.OggettoRichiestaLocalService.class)
	protected servizio.richieste.badge.mef.service.OggettoRichiestaLocalService oggettoRichiestaLocalService;
	@BeanReference(type = OggettoRichiestaPersistence.class)
	protected OggettoRichiestaPersistence oggettoRichiestaPersistence;
	@BeanReference(type = RichiestaBadgeLocalService.class)
	protected RichiestaBadgeLocalService richiestaBadgeLocalService;
	@BeanReference(type = RichiestaBadgePersistence.class)
	protected RichiestaBadgePersistence richiestaBadgePersistence;
	@BeanReference(type = RichiestaBadgeFinder.class)
	protected RichiestaBadgeFinder richiestaBadgeFinder;
	@BeanReference(type = servizio.richieste.badge.mef.service.SediEsterneLocalService.class)
	protected servizio.richieste.badge.mef.service.SediEsterneLocalService sediEsterneLocalService;
	@BeanReference(type = SediEsternePersistence.class)
	protected SediEsternePersistence sediEsternePersistence;
	@BeanReference(type = servizio.richieste.badge.mef.service.StatoRichiestaLocalService.class)
	protected servizio.richieste.badge.mef.service.StatoRichiestaLocalService statoRichiestaLocalService;
	@BeanReference(type = StatoRichiestaPersistence.class)
	protected StatoRichiestaPersistence statoRichiestaPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}