/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servizio.richieste.badge.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import servizio.richieste.badge.mef.model.GestioneUtenti;
import servizio.richieste.badge.mef.model.GestioneUtentiModel;
import servizio.richieste.badge.mef.model.GestioneUtentiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GestioneUtenti service. Represents a row in the &quot;MBADGE_GestioneUtenti&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link GestioneUtentiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GestioneUtentiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GestioneUtentiImpl
 * @see GestioneUtenti
 * @see GestioneUtentiModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class GestioneUtentiModelImpl extends BaseModelImpl<GestioneUtenti>
	implements GestioneUtentiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gestione utenti model instance should use the {@link GestioneUtenti} interface instead.
	 */
	public static final String TABLE_NAME = "MBADGE_GestioneUtenti";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_gest_utenti", Types.BIGINT },
			{ "data_", Types.TIMESTAMP },
			{ "screename_dirigente", Types.VARCHAR },
			{ "screename_utente", Types.VARCHAR },
			{ "id_ufficio", Types.BIGINT },
			{ "abilitazione", Types.BOOLEAN },
			{ "delega", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_gest_utenti", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("screename_dirigente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("screename_utente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_ufficio", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("abilitazione", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("delega", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table MBADGE_GestioneUtenti (id_gest_utenti LONG not null primary key,data_ DATE null,screename_dirigente VARCHAR(16) null,screename_utente VARCHAR(16) null,id_ufficio LONG,abilitazione BOOLEAN,delega BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table MBADGE_GestioneUtenti";
	public static final String ORDER_BY_JPQL = " ORDER BY gestioneUtenti.id_gest_utenti ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MBADGE_GestioneUtenti.id_gest_utenti ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(servizio.richieste.badge.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.servizio.richieste.badge.mef.model.GestioneUtenti"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(servizio.richieste.badge.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.servizio.richieste.badge.mef.model.GestioneUtenti"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GestioneUtenti toModel(GestioneUtentiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GestioneUtenti model = new GestioneUtentiImpl();

		model.setId_gest_utenti(soapModel.getId_gest_utenti());
		model.setData(soapModel.getData());
		model.setScreename_dirigente(soapModel.getScreename_dirigente());
		model.setScreename_utente(soapModel.getScreename_utente());
		model.setId_ufficio(soapModel.getId_ufficio());
		model.setAbilitazione(soapModel.getAbilitazione());
		model.setDelega(soapModel.getDelega());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GestioneUtenti> toModels(GestioneUtentiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GestioneUtenti> models = new ArrayList<GestioneUtenti>(soapModels.length);

		for (GestioneUtentiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(servizio.richieste.badge.mef.service.util.PropsUtil.get(
				"lock.expiration.time.servizio.richieste.badge.mef.model.GestioneUtenti"));

	public GestioneUtentiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_gest_utenti;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_gest_utenti(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_gest_utenti;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GestioneUtenti.class;
	}

	@Override
	public String getModelClassName() {
		return GestioneUtenti.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_gest_utenti", getId_gest_utenti());
		attributes.put("data", getData());
		attributes.put("screename_dirigente", getScreename_dirigente());
		attributes.put("screename_utente", getScreename_utente());
		attributes.put("id_ufficio", getId_ufficio());
		attributes.put("abilitazione", getAbilitazione());
		attributes.put("delega", getDelega());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_gest_utenti = (Long)attributes.get("id_gest_utenti");

		if (id_gest_utenti != null) {
			setId_gest_utenti(id_gest_utenti);
		}

		Date data = (Date)attributes.get("data");

		if (data != null) {
			setData(data);
		}

		String screename_dirigente = (String)attributes.get(
				"screename_dirigente");

		if (screename_dirigente != null) {
			setScreename_dirigente(screename_dirigente);
		}

		String screename_utente = (String)attributes.get("screename_utente");

		if (screename_utente != null) {
			setScreename_utente(screename_utente);
		}

		Long id_ufficio = (Long)attributes.get("id_ufficio");

		if (id_ufficio != null) {
			setId_ufficio(id_ufficio);
		}

		Boolean abilitazione = (Boolean)attributes.get("abilitazione");

		if (abilitazione != null) {
			setAbilitazione(abilitazione);
		}

		Boolean delega = (Boolean)attributes.get("delega");

		if (delega != null) {
			setDelega(delega);
		}
	}

	@JSON
	@Override
	public long getId_gest_utenti() {
		return _id_gest_utenti;
	}

	@Override
	public void setId_gest_utenti(long id_gest_utenti) {
		_id_gest_utenti = id_gest_utenti;
	}

	@JSON
	@Override
	public Date getData() {
		return _data;
	}

	@Override
	public void setData(Date data) {
		_data = data;
	}

	@JSON
	@Override
	public String getScreename_dirigente() {
		if (_screename_dirigente == null) {
			return StringPool.BLANK;
		}
		else {
			return _screename_dirigente;
		}
	}

	@Override
	public void setScreename_dirigente(String screename_dirigente) {
		_screename_dirigente = screename_dirigente;
	}

	@JSON
	@Override
	public String getScreename_utente() {
		if (_screename_utente == null) {
			return StringPool.BLANK;
		}
		else {
			return _screename_utente;
		}
	}

	@Override
	public void setScreename_utente(String screename_utente) {
		_screename_utente = screename_utente;
	}

	@JSON
	@Override
	public long getId_ufficio() {
		return _id_ufficio;
	}

	@Override
	public void setId_ufficio(long id_ufficio) {
		_id_ufficio = id_ufficio;
	}

	@JSON
	@Override
	public boolean getAbilitazione() {
		return _abilitazione;
	}

	@JSON
	@Override
	public boolean isAbilitazione() {
		return _abilitazione;
	}

	@Override
	public void setAbilitazione(boolean abilitazione) {
		_abilitazione = abilitazione;
	}

	@JSON
	@Override
	public boolean getDelega() {
		return _delega;
	}

	@JSON
	@Override
	public boolean isDelega() {
		return _delega;
	}

	@Override
	public void setDelega(boolean delega) {
		_delega = delega;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GestioneUtenti.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GestioneUtenti toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GestioneUtenti)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GestioneUtentiImpl gestioneUtentiImpl = new GestioneUtentiImpl();

		gestioneUtentiImpl.setId_gest_utenti(getId_gest_utenti());
		gestioneUtentiImpl.setData(getData());
		gestioneUtentiImpl.setScreename_dirigente(getScreename_dirigente());
		gestioneUtentiImpl.setScreename_utente(getScreename_utente());
		gestioneUtentiImpl.setId_ufficio(getId_ufficio());
		gestioneUtentiImpl.setAbilitazione(getAbilitazione());
		gestioneUtentiImpl.setDelega(getDelega());

		gestioneUtentiImpl.resetOriginalValues();

		return gestioneUtentiImpl;
	}

	@Override
	public int compareTo(GestioneUtenti gestioneUtenti) {
		long primaryKey = gestioneUtenti.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GestioneUtenti)) {
			return false;
		}

		GestioneUtenti gestioneUtenti = (GestioneUtenti)obj;

		long primaryKey = gestioneUtenti.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GestioneUtenti> toCacheModel() {
		GestioneUtentiCacheModel gestioneUtentiCacheModel = new GestioneUtentiCacheModel();

		gestioneUtentiCacheModel.id_gest_utenti = getId_gest_utenti();

		Date data = getData();

		if (data != null) {
			gestioneUtentiCacheModel.data = data.getTime();
		}
		else {
			gestioneUtentiCacheModel.data = Long.MIN_VALUE;
		}

		gestioneUtentiCacheModel.screename_dirigente = getScreename_dirigente();

		String screename_dirigente = gestioneUtentiCacheModel.screename_dirigente;

		if ((screename_dirigente != null) &&
				(screename_dirigente.length() == 0)) {
			gestioneUtentiCacheModel.screename_dirigente = null;
		}

		gestioneUtentiCacheModel.screename_utente = getScreename_utente();

		String screename_utente = gestioneUtentiCacheModel.screename_utente;

		if ((screename_utente != null) && (screename_utente.length() == 0)) {
			gestioneUtentiCacheModel.screename_utente = null;
		}

		gestioneUtentiCacheModel.id_ufficio = getId_ufficio();

		gestioneUtentiCacheModel.abilitazione = getAbilitazione();

		gestioneUtentiCacheModel.delega = getDelega();

		return gestioneUtentiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id_gest_utenti=");
		sb.append(getId_gest_utenti());
		sb.append(", data=");
		sb.append(getData());
		sb.append(", screename_dirigente=");
		sb.append(getScreename_dirigente());
		sb.append(", screename_utente=");
		sb.append(getScreename_utente());
		sb.append(", id_ufficio=");
		sb.append(getId_ufficio());
		sb.append(", abilitazione=");
		sb.append(getAbilitazione());
		sb.append(", delega=");
		sb.append(getDelega());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("servizio.richieste.badge.mef.model.GestioneUtenti");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_gest_utenti</column-name><column-value><![CDATA[");
		sb.append(getId_gest_utenti());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data</column-name><column-value><![CDATA[");
		sb.append(getData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>screename_dirigente</column-name><column-value><![CDATA[");
		sb.append(getScreename_dirigente());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>screename_utente</column-name><column-value><![CDATA[");
		sb.append(getScreename_utente());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_ufficio</column-name><column-value><![CDATA[");
		sb.append(getId_ufficio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>abilitazione</column-name><column-value><![CDATA[");
		sb.append(getAbilitazione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>delega</column-name><column-value><![CDATA[");
		sb.append(getDelega());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = GestioneUtenti.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			GestioneUtenti.class
		};
	private long _id_gest_utenti;
	private Date _data;
	private String _screename_dirigente;
	private String _screename_utente;
	private long _id_ufficio;
	private boolean _abilitazione;
	private boolean _delega;
	private GestioneUtenti _escapedModel;
}