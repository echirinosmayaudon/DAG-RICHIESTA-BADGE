/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.gestione.riunioni.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.gestione.riunioni.model.TipoRiunione;
import com.intranet.mef.gestione.riunioni.model.TipoRiunioneModel;
import com.intranet.mef.gestione.riunioni.model.TipoRiunioneSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TipoRiunione service. Represents a row in the &quot;MEF_TipoRiunione&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TipoRiunioneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TipoRiunioneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TipoRiunioneImpl
 * @see TipoRiunione
 * @see TipoRiunioneModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TipoRiunioneModelImpl extends BaseModelImpl<TipoRiunione>
	implements TipoRiunioneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tipo riunione model instance should use the {@link TipoRiunione} interface instead.
	 */
	public static final String TABLE_NAME = "MEF_TipoRiunione";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_tipo", Types.BIGINT },
			{ "descrizione", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_tipo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("descrizione", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEF_TipoRiunione (id_tipo LONG not null primary key,descrizione VARCHAR(50) null)";
	public static final String TABLE_SQL_DROP = "drop table MEF_TipoRiunione";
	public static final String ORDER_BY_JPQL = " ORDER BY tipoRiunione.id_tipo ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEF_TipoRiunione.id_tipo ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.gestione.riunioni.model.TipoRiunione"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.gestione.riunioni.model.TipoRiunione"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TipoRiunione toModel(TipoRiunioneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TipoRiunione model = new TipoRiunioneImpl();

		model.setId_tipo(soapModel.getId_tipo());
		model.setDescrizione(soapModel.getDescrizione());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TipoRiunione> toModels(TipoRiunioneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TipoRiunione> models = new ArrayList<TipoRiunione>(soapModels.length);

		for (TipoRiunioneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.gestione.riunioni.model.TipoRiunione"));

	public TipoRiunioneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_tipo;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_tipo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_tipo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TipoRiunione.class;
	}

	@Override
	public String getModelClassName() {
		return TipoRiunione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_tipo", getId_tipo());
		attributes.put("descrizione", getDescrizione());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_tipo = (Long)attributes.get("id_tipo");

		if (id_tipo != null) {
			setId_tipo(id_tipo);
		}

		String descrizione = (String)attributes.get("descrizione");

		if (descrizione != null) {
			setDescrizione(descrizione);
		}
	}

	@JSON
	@Override
	public long getId_tipo() {
		return _id_tipo;
	}

	@Override
	public void setId_tipo(long id_tipo) {
		_id_tipo = id_tipo;
	}

	@JSON
	@Override
	public String getDescrizione() {
		if (_descrizione == null) {
			return StringPool.BLANK;
		}
		else {
			return _descrizione;
		}
	}

	@Override
	public void setDescrizione(String descrizione) {
		_descrizione = descrizione;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TipoRiunione.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TipoRiunione toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TipoRiunione)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TipoRiunioneImpl tipoRiunioneImpl = new TipoRiunioneImpl();

		tipoRiunioneImpl.setId_tipo(getId_tipo());
		tipoRiunioneImpl.setDescrizione(getDescrizione());

		tipoRiunioneImpl.resetOriginalValues();

		return tipoRiunioneImpl;
	}

	@Override
	public int compareTo(TipoRiunione tipoRiunione) {
		long primaryKey = tipoRiunione.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TipoRiunione)) {
			return false;
		}

		TipoRiunione tipoRiunione = (TipoRiunione)obj;

		long primaryKey = tipoRiunione.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TipoRiunione> toCacheModel() {
		TipoRiunioneCacheModel tipoRiunioneCacheModel = new TipoRiunioneCacheModel();

		tipoRiunioneCacheModel.id_tipo = getId_tipo();

		tipoRiunioneCacheModel.descrizione = getDescrizione();

		String descrizione = tipoRiunioneCacheModel.descrizione;

		if ((descrizione != null) && (descrizione.length() == 0)) {
			tipoRiunioneCacheModel.descrizione = null;
		}

		return tipoRiunioneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{id_tipo=");
		sb.append(getId_tipo());
		sb.append(", descrizione=");
		sb.append(getDescrizione());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.gestione.riunioni.model.TipoRiunione");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_tipo</column-name><column-value><![CDATA[");
		sb.append(getId_tipo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descrizione</column-name><column-value><![CDATA[");
		sb.append(getDescrizione());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TipoRiunione.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TipoRiunione.class
		};
	private long _id_tipo;
	private String _descrizione;
	private TipoRiunione _escapedModel;
}