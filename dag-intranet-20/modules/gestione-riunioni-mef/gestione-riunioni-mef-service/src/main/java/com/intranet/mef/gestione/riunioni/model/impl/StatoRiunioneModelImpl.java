/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.gestione.riunioni.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.gestione.riunioni.model.StatoRiunione;
import com.intranet.mef.gestione.riunioni.model.StatoRiunioneModel;
import com.intranet.mef.gestione.riunioni.model.StatoRiunioneSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the StatoRiunione service. Represents a row in the &quot;MEF_StatoRiunione&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StatoRiunioneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StatoRiunioneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StatoRiunioneImpl
 * @see StatoRiunione
 * @see StatoRiunioneModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class StatoRiunioneModelImpl extends BaseModelImpl<StatoRiunione>
	implements StatoRiunioneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a stato riunione model instance should use the {@link StatoRiunione} interface instead.
	 */
	public static final String TABLE_NAME = "MEF_StatoRiunione";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_stato_riunione", Types.BIGINT },
			{ "label", Types.VARCHAR },
			{ "next_stato", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_stato_riunione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("label", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("next_stato", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEF_StatoRiunione (id_stato_riunione LONG not null primary key,label VARCHAR(15) null,next_stato VARCHAR(35) null)";
	public static final String TABLE_SQL_DROP = "drop table MEF_StatoRiunione";
	public static final String ORDER_BY_JPQL = " ORDER BY statoRiunione.id_stato_riunione ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEF_StatoRiunione.id_stato_riunione ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.gestione.riunioni.model.StatoRiunione"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.gestione.riunioni.model.StatoRiunione"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.intranet.mef.gestione.riunioni.model.StatoRiunione"),
			true);
	public static final long LABEL_COLUMN_BITMASK = 1L;
	public static final long ID_STATO_RIUNIONE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static StatoRiunione toModel(StatoRiunioneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		StatoRiunione model = new StatoRiunioneImpl();

		model.setId_stato_riunione(soapModel.getId_stato_riunione());
		model.setLabel(soapModel.getLabel());
		model.setNext_stato(soapModel.getNext_stato());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<StatoRiunione> toModels(StatoRiunioneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<StatoRiunione> models = new ArrayList<StatoRiunione>(soapModels.length);

		for (StatoRiunioneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.gestione.riunioni.model.StatoRiunione"));

	public StatoRiunioneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_stato_riunione;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_stato_riunione(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_stato_riunione;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StatoRiunione.class;
	}

	@Override
	public String getModelClassName() {
		return StatoRiunione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_stato_riunione", getId_stato_riunione());
		attributes.put("label", getLabel());
		attributes.put("next_stato", getNext_stato());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_stato_riunione = (Long)attributes.get("id_stato_riunione");

		if (id_stato_riunione != null) {
			setId_stato_riunione(id_stato_riunione);
		}

		String label = (String)attributes.get("label");

		if (label != null) {
			setLabel(label);
		}

		String next_stato = (String)attributes.get("next_stato");

		if (next_stato != null) {
			setNext_stato(next_stato);
		}
	}

	@JSON
	@Override
	public long getId_stato_riunione() {
		return _id_stato_riunione;
	}

	@Override
	public void setId_stato_riunione(long id_stato_riunione) {
		_id_stato_riunione = id_stato_riunione;
	}

	@JSON
	@Override
	public String getLabel() {
		if (_label == null) {
			return StringPool.BLANK;
		}
		else {
			return _label;
		}
	}

	@Override
	public void setLabel(String label) {
		_columnBitmask |= LABEL_COLUMN_BITMASK;

		if (_originalLabel == null) {
			_originalLabel = _label;
		}

		_label = label;
	}

	public String getOriginalLabel() {
		return GetterUtil.getString(_originalLabel);
	}

	@JSON
	@Override
	public String getNext_stato() {
		if (_next_stato == null) {
			return StringPool.BLANK;
		}
		else {
			return _next_stato;
		}
	}

	@Override
	public void setNext_stato(String next_stato) {
		_next_stato = next_stato;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			StatoRiunione.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StatoRiunione toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StatoRiunione)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StatoRiunioneImpl statoRiunioneImpl = new StatoRiunioneImpl();

		statoRiunioneImpl.setId_stato_riunione(getId_stato_riunione());
		statoRiunioneImpl.setLabel(getLabel());
		statoRiunioneImpl.setNext_stato(getNext_stato());

		statoRiunioneImpl.resetOriginalValues();

		return statoRiunioneImpl;
	}

	@Override
	public int compareTo(StatoRiunione statoRiunione) {
		long primaryKey = statoRiunione.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StatoRiunione)) {
			return false;
		}

		StatoRiunione statoRiunione = (StatoRiunione)obj;

		long primaryKey = statoRiunione.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		StatoRiunioneModelImpl statoRiunioneModelImpl = this;

		statoRiunioneModelImpl._originalLabel = statoRiunioneModelImpl._label;

		statoRiunioneModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StatoRiunione> toCacheModel() {
		StatoRiunioneCacheModel statoRiunioneCacheModel = new StatoRiunioneCacheModel();

		statoRiunioneCacheModel.id_stato_riunione = getId_stato_riunione();

		statoRiunioneCacheModel.label = getLabel();

		String label = statoRiunioneCacheModel.label;

		if ((label != null) && (label.length() == 0)) {
			statoRiunioneCacheModel.label = null;
		}

		statoRiunioneCacheModel.next_stato = getNext_stato();

		String next_stato = statoRiunioneCacheModel.next_stato;

		if ((next_stato != null) && (next_stato.length() == 0)) {
			statoRiunioneCacheModel.next_stato = null;
		}

		return statoRiunioneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id_stato_riunione=");
		sb.append(getId_stato_riunione());
		sb.append(", label=");
		sb.append(getLabel());
		sb.append(", next_stato=");
		sb.append(getNext_stato());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.gestione.riunioni.model.StatoRiunione");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_stato_riunione</column-name><column-value><![CDATA[");
		sb.append(getId_stato_riunione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>label</column-name><column-value><![CDATA[");
		sb.append(getLabel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>next_stato</column-name><column-value><![CDATA[");
		sb.append(getNext_stato());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = StatoRiunione.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			StatoRiunione.class
		};
	private long _id_stato_riunione;
	private String _label;
	private String _originalLabel;
	private String _next_stato;
	private long _columnBitmask;
	private StatoRiunione _escapedModel;
}