/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.gestione.riunioni.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.gestione.riunioni.model.Segreteria;
import com.intranet.mef.gestione.riunioni.model.SegreteriaModel;
import com.intranet.mef.gestione.riunioni.model.SegreteriaSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Segreteria service. Represents a row in the &quot;MEF_Segreteria&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SegreteriaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SegreteriaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SegreteriaImpl
 * @see Segreteria
 * @see SegreteriaModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SegreteriaModelImpl extends BaseModelImpl<Segreteria>
	implements SegreteriaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a segreteria model instance should use the {@link Segreteria} interface instead.
	 */
	public static final String TABLE_NAME = "MEF_Segreteria";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_segreteria", Types.BIGINT },
			{ "email", Types.VARCHAR },
			{ "descrizione", Types.VARCHAR },
			{ "acronimo", Types.VARCHAR },
			{ "livello_gerarchia", Types.BIGINT },
			{ "cod_padre", Types.BIGINT },
			{ "data_fine_esistenza", Types.TIMESTAMP },
			{ "indirizzo", Types.VARCHAR },
			{ "cap", Types.VARCHAR },
			{ "cod_istat_citta", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_segreteria", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descrizione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("acronimo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("livello_gerarchia", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cod_padre", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_fine_esistenza", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("indirizzo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cap", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cod_istat_citta", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table MEF_Segreteria (id_segreteria LONG not null primary key,email VARCHAR(100) null,descrizione VARCHAR(500) null,acronimo VARCHAR(50) null,livello_gerarchia LONG,cod_padre LONG,data_fine_esistenza DATE null,indirizzo VARCHAR(250) null,cap VARCHAR(5) null,cod_istat_citta LONG)";
	public static final String TABLE_SQL_DROP = "drop table MEF_Segreteria";
	public static final String ORDER_BY_JPQL = " ORDER BY segreteria.id_segreteria ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEF_Segreteria.id_segreteria ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.gestione.riunioni.model.Segreteria"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.gestione.riunioni.model.Segreteria"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Segreteria toModel(SegreteriaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Segreteria model = new SegreteriaImpl();

		model.setId_segreteria(soapModel.getId_segreteria());
		model.setEmail(soapModel.getEmail());
		model.setDescrizione(soapModel.getDescrizione());
		model.setAcronimo(soapModel.getAcronimo());
		model.setLivello_gerarchia(soapModel.getLivello_gerarchia());
		model.setCod_padre(soapModel.getCod_padre());
		model.setData_fine_esistenza(soapModel.getData_fine_esistenza());
		model.setIndirizzo(soapModel.getIndirizzo());
		model.setCap(soapModel.getCap());
		model.setCod_istat_citta(soapModel.getCod_istat_citta());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Segreteria> toModels(SegreteriaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Segreteria> models = new ArrayList<Segreteria>(soapModels.length);

		for (SegreteriaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.gestione.riunioni.model.Segreteria"));

	public SegreteriaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_segreteria;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_segreteria(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_segreteria;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Segreteria.class;
	}

	@Override
	public String getModelClassName() {
		return Segreteria.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_segreteria", getId_segreteria());
		attributes.put("email", getEmail());
		attributes.put("descrizione", getDescrizione());
		attributes.put("acronimo", getAcronimo());
		attributes.put("livello_gerarchia", getLivello_gerarchia());
		attributes.put("cod_padre", getCod_padre());
		attributes.put("data_fine_esistenza", getData_fine_esistenza());
		attributes.put("indirizzo", getIndirizzo());
		attributes.put("cap", getCap());
		attributes.put("cod_istat_citta", getCod_istat_citta());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_segreteria = (Long)attributes.get("id_segreteria");

		if (id_segreteria != null) {
			setId_segreteria(id_segreteria);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String descrizione = (String)attributes.get("descrizione");

		if (descrizione != null) {
			setDescrizione(descrizione);
		}

		String acronimo = (String)attributes.get("acronimo");

		if (acronimo != null) {
			setAcronimo(acronimo);
		}

		Long livello_gerarchia = (Long)attributes.get("livello_gerarchia");

		if (livello_gerarchia != null) {
			setLivello_gerarchia(livello_gerarchia);
		}

		Long cod_padre = (Long)attributes.get("cod_padre");

		if (cod_padre != null) {
			setCod_padre(cod_padre);
		}

		Date data_fine_esistenza = (Date)attributes.get("data_fine_esistenza");

		if (data_fine_esistenza != null) {
			setData_fine_esistenza(data_fine_esistenza);
		}

		String indirizzo = (String)attributes.get("indirizzo");

		if (indirizzo != null) {
			setIndirizzo(indirizzo);
		}

		String cap = (String)attributes.get("cap");

		if (cap != null) {
			setCap(cap);
		}

		Long cod_istat_citta = (Long)attributes.get("cod_istat_citta");

		if (cod_istat_citta != null) {
			setCod_istat_citta(cod_istat_citta);
		}
	}

	@JSON
	@Override
	public long getId_segreteria() {
		return _id_segreteria;
	}

	@Override
	public void setId_segreteria(long id_segreteria) {
		_id_segreteria = id_segreteria;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getDescrizione() {
		if (_descrizione == null) {
			return StringPool.BLANK;
		}
		else {
			return _descrizione;
		}
	}

	@Override
	public void setDescrizione(String descrizione) {
		_descrizione = descrizione;
	}

	@JSON
	@Override
	public String getAcronimo() {
		if (_acronimo == null) {
			return StringPool.BLANK;
		}
		else {
			return _acronimo;
		}
	}

	@Override
	public void setAcronimo(String acronimo) {
		_acronimo = acronimo;
	}

	@JSON
	@Override
	public long getLivello_gerarchia() {
		return _livello_gerarchia;
	}

	@Override
	public void setLivello_gerarchia(long livello_gerarchia) {
		_livello_gerarchia = livello_gerarchia;
	}

	@JSON
	@Override
	public long getCod_padre() {
		return _cod_padre;
	}

	@Override
	public void setCod_padre(long cod_padre) {
		_cod_padre = cod_padre;
	}

	@JSON
	@Override
	public Date getData_fine_esistenza() {
		return _data_fine_esistenza;
	}

	@Override
	public void setData_fine_esistenza(Date data_fine_esistenza) {
		_data_fine_esistenza = data_fine_esistenza;
	}

	@JSON
	@Override
	public String getIndirizzo() {
		if (_indirizzo == null) {
			return StringPool.BLANK;
		}
		else {
			return _indirizzo;
		}
	}

	@Override
	public void setIndirizzo(String indirizzo) {
		_indirizzo = indirizzo;
	}

	@JSON
	@Override
	public String getCap() {
		if (_cap == null) {
			return StringPool.BLANK;
		}
		else {
			return _cap;
		}
	}

	@Override
	public void setCap(String cap) {
		_cap = cap;
	}

	@JSON
	@Override
	public long getCod_istat_citta() {
		return _cod_istat_citta;
	}

	@Override
	public void setCod_istat_citta(long cod_istat_citta) {
		_cod_istat_citta = cod_istat_citta;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Segreteria.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Segreteria toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Segreteria)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SegreteriaImpl segreteriaImpl = new SegreteriaImpl();

		segreteriaImpl.setId_segreteria(getId_segreteria());
		segreteriaImpl.setEmail(getEmail());
		segreteriaImpl.setDescrizione(getDescrizione());
		segreteriaImpl.setAcronimo(getAcronimo());
		segreteriaImpl.setLivello_gerarchia(getLivello_gerarchia());
		segreteriaImpl.setCod_padre(getCod_padre());
		segreteriaImpl.setData_fine_esistenza(getData_fine_esistenza());
		segreteriaImpl.setIndirizzo(getIndirizzo());
		segreteriaImpl.setCap(getCap());
		segreteriaImpl.setCod_istat_citta(getCod_istat_citta());

		segreteriaImpl.resetOriginalValues();

		return segreteriaImpl;
	}

	@Override
	public int compareTo(Segreteria segreteria) {
		long primaryKey = segreteria.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Segreteria)) {
			return false;
		}

		Segreteria segreteria = (Segreteria)obj;

		long primaryKey = segreteria.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Segreteria> toCacheModel() {
		SegreteriaCacheModel segreteriaCacheModel = new SegreteriaCacheModel();

		segreteriaCacheModel.id_segreteria = getId_segreteria();

		segreteriaCacheModel.email = getEmail();

		String email = segreteriaCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			segreteriaCacheModel.email = null;
		}

		segreteriaCacheModel.descrizione = getDescrizione();

		String descrizione = segreteriaCacheModel.descrizione;

		if ((descrizione != null) && (descrizione.length() == 0)) {
			segreteriaCacheModel.descrizione = null;
		}

		segreteriaCacheModel.acronimo = getAcronimo();

		String acronimo = segreteriaCacheModel.acronimo;

		if ((acronimo != null) && (acronimo.length() == 0)) {
			segreteriaCacheModel.acronimo = null;
		}

		segreteriaCacheModel.livello_gerarchia = getLivello_gerarchia();

		segreteriaCacheModel.cod_padre = getCod_padre();

		Date data_fine_esistenza = getData_fine_esistenza();

		if (data_fine_esistenza != null) {
			segreteriaCacheModel.data_fine_esistenza = data_fine_esistenza.getTime();
		}
		else {
			segreteriaCacheModel.data_fine_esistenza = Long.MIN_VALUE;
		}

		segreteriaCacheModel.indirizzo = getIndirizzo();

		String indirizzo = segreteriaCacheModel.indirizzo;

		if ((indirizzo != null) && (indirizzo.length() == 0)) {
			segreteriaCacheModel.indirizzo = null;
		}

		segreteriaCacheModel.cap = getCap();

		String cap = segreteriaCacheModel.cap;

		if ((cap != null) && (cap.length() == 0)) {
			segreteriaCacheModel.cap = null;
		}

		segreteriaCacheModel.cod_istat_citta = getCod_istat_citta();

		return segreteriaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id_segreteria=");
		sb.append(getId_segreteria());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", descrizione=");
		sb.append(getDescrizione());
		sb.append(", acronimo=");
		sb.append(getAcronimo());
		sb.append(", livello_gerarchia=");
		sb.append(getLivello_gerarchia());
		sb.append(", cod_padre=");
		sb.append(getCod_padre());
		sb.append(", data_fine_esistenza=");
		sb.append(getData_fine_esistenza());
		sb.append(", indirizzo=");
		sb.append(getIndirizzo());
		sb.append(", cap=");
		sb.append(getCap());
		sb.append(", cod_istat_citta=");
		sb.append(getCod_istat_citta());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.gestione.riunioni.model.Segreteria");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_segreteria</column-name><column-value><![CDATA[");
		sb.append(getId_segreteria());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descrizione</column-name><column-value><![CDATA[");
		sb.append(getDescrizione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>acronimo</column-name><column-value><![CDATA[");
		sb.append(getAcronimo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>livello_gerarchia</column-name><column-value><![CDATA[");
		sb.append(getLivello_gerarchia());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cod_padre</column-name><column-value><![CDATA[");
		sb.append(getCod_padre());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_fine_esistenza</column-name><column-value><![CDATA[");
		sb.append(getData_fine_esistenza());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indirizzo</column-name><column-value><![CDATA[");
		sb.append(getIndirizzo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cap</column-name><column-value><![CDATA[");
		sb.append(getCap());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cod_istat_citta</column-name><column-value><![CDATA[");
		sb.append(getCod_istat_citta());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Segreteria.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Segreteria.class
		};
	private long _id_segreteria;
	private String _email;
	private String _descrizione;
	private String _acronimo;
	private long _livello_gerarchia;
	private long _cod_padre;
	private Date _data_fine_esistenza;
	private String _indirizzo;
	private String _cap;
	private long _cod_istat_citta;
	private Segreteria _escapedModel;
}