/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.gestione.riunioni.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.gestione.riunioni.model.InvitatiRiunione;
import com.intranet.mef.gestione.riunioni.model.InvitatiRiunioneModel;
import com.intranet.mef.gestione.riunioni.model.InvitatiRiunioneSoap;
import com.intranet.mef.gestione.riunioni.service.persistence.InvitatiRiunionePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the InvitatiRiunione service. Represents a row in the &quot;MEF_InvitatiRiunione&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link InvitatiRiunioneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InvitatiRiunioneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see InvitatiRiunioneImpl
 * @see InvitatiRiunione
 * @see InvitatiRiunioneModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class InvitatiRiunioneModelImpl extends BaseModelImpl<InvitatiRiunione>
	implements InvitatiRiunioneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a invitati riunione model instance should use the {@link InvitatiRiunione} interface instead.
	 */
	public static final String TABLE_NAME = "MEF_InvitatiRiunione";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_segreteria", Types.BIGINT },
			{ "note", Types.VARCHAR },
			{ "partecipanti", Types.VARCHAR },
			{ "id_stato_invitato", Types.BIGINT },
			{ "id_riunione", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_segreteria", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("partecipanti", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_stato_invitato", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_riunione", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table MEF_InvitatiRiunione (id_segreteria LONG not null,note STRING null,partecipanti STRING null,id_stato_invitato LONG,id_riunione LONG not null,primary key (id_segreteria, id_riunione))";
	public static final String TABLE_SQL_DROP = "drop table MEF_InvitatiRiunione";
	public static final String ORDER_BY_JPQL = " ORDER BY invitatiRiunione.id.id_segreteria ASC, invitatiRiunione.id.id_riunione ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEF_InvitatiRiunione.id_segreteria ASC, MEF_InvitatiRiunione.id_riunione ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.gestione.riunioni.model.InvitatiRiunione"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.gestione.riunioni.model.InvitatiRiunione"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.intranet.mef.gestione.riunioni.model.InvitatiRiunione"),
			true);
	public static final long ID_RIUNIONE_COLUMN_BITMASK = 1L;
	public static final long ID_SEGRETERIA_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static InvitatiRiunione toModel(InvitatiRiunioneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		InvitatiRiunione model = new InvitatiRiunioneImpl();

		model.setId_segreteria(soapModel.getId_segreteria());
		model.setNote(soapModel.getNote());
		model.setPartecipanti(soapModel.getPartecipanti());
		model.setId_stato_invitato(soapModel.getId_stato_invitato());
		model.setId_riunione(soapModel.getId_riunione());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<InvitatiRiunione> toModels(
		InvitatiRiunioneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<InvitatiRiunione> models = new ArrayList<InvitatiRiunione>(soapModels.length);

		for (InvitatiRiunioneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.gestione.riunioni.model.InvitatiRiunione"));

	public InvitatiRiunioneModelImpl() {
	}

	@Override
	public InvitatiRiunionePK getPrimaryKey() {
		return new InvitatiRiunionePK(_id_segreteria, _id_riunione);
	}

	@Override
	public void setPrimaryKey(InvitatiRiunionePK primaryKey) {
		setId_segreteria(primaryKey.id_segreteria);
		setId_riunione(primaryKey.id_riunione);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new InvitatiRiunionePK(_id_segreteria, _id_riunione);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((InvitatiRiunionePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return InvitatiRiunione.class;
	}

	@Override
	public String getModelClassName() {
		return InvitatiRiunione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_segreteria", getId_segreteria());
		attributes.put("note", getNote());
		attributes.put("partecipanti", getPartecipanti());
		attributes.put("id_stato_invitato", getId_stato_invitato());
		attributes.put("id_riunione", getId_riunione());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_segreteria = (Long)attributes.get("id_segreteria");

		if (id_segreteria != null) {
			setId_segreteria(id_segreteria);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		String partecipanti = (String)attributes.get("partecipanti");

		if (partecipanti != null) {
			setPartecipanti(partecipanti);
		}

		Long id_stato_invitato = (Long)attributes.get("id_stato_invitato");

		if (id_stato_invitato != null) {
			setId_stato_invitato(id_stato_invitato);
		}

		Long id_riunione = (Long)attributes.get("id_riunione");

		if (id_riunione != null) {
			setId_riunione(id_riunione);
		}
	}

	@JSON
	@Override
	public long getId_segreteria() {
		return _id_segreteria;
	}

	@Override
	public void setId_segreteria(long id_segreteria) {
		_columnBitmask |= ID_SEGRETERIA_COLUMN_BITMASK;

		if (!_setOriginalId_segreteria) {
			_setOriginalId_segreteria = true;

			_originalId_segreteria = _id_segreteria;
		}

		_id_segreteria = id_segreteria;
	}

	public long getOriginalId_segreteria() {
		return _originalId_segreteria;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public String getPartecipanti() {
		if (_partecipanti == null) {
			return StringPool.BLANK;
		}
		else {
			return _partecipanti;
		}
	}

	@Override
	public void setPartecipanti(String partecipanti) {
		_partecipanti = partecipanti;
	}

	@JSON
	@Override
	public long getId_stato_invitato() {
		return _id_stato_invitato;
	}

	@Override
	public void setId_stato_invitato(long id_stato_invitato) {
		_id_stato_invitato = id_stato_invitato;
	}

	@JSON
	@Override
	public long getId_riunione() {
		return _id_riunione;
	}

	@Override
	public void setId_riunione(long id_riunione) {
		_columnBitmask |= ID_RIUNIONE_COLUMN_BITMASK;

		if (!_setOriginalId_riunione) {
			_setOriginalId_riunione = true;

			_originalId_riunione = _id_riunione;
		}

		_id_riunione = id_riunione;
	}

	public long getOriginalId_riunione() {
		return _originalId_riunione;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public InvitatiRiunione toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (InvitatiRiunione)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InvitatiRiunioneImpl invitatiRiunioneImpl = new InvitatiRiunioneImpl();

		invitatiRiunioneImpl.setId_segreteria(getId_segreteria());
		invitatiRiunioneImpl.setNote(getNote());
		invitatiRiunioneImpl.setPartecipanti(getPartecipanti());
		invitatiRiunioneImpl.setId_stato_invitato(getId_stato_invitato());
		invitatiRiunioneImpl.setId_riunione(getId_riunione());

		invitatiRiunioneImpl.resetOriginalValues();

		return invitatiRiunioneImpl;
	}

	@Override
	public int compareTo(InvitatiRiunione invitatiRiunione) {
		InvitatiRiunionePK primaryKey = invitatiRiunione.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof InvitatiRiunione)) {
			return false;
		}

		InvitatiRiunione invitatiRiunione = (InvitatiRiunione)obj;

		InvitatiRiunionePK primaryKey = invitatiRiunione.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		InvitatiRiunioneModelImpl invitatiRiunioneModelImpl = this;

		invitatiRiunioneModelImpl._originalId_segreteria = invitatiRiunioneModelImpl._id_segreteria;

		invitatiRiunioneModelImpl._setOriginalId_segreteria = false;

		invitatiRiunioneModelImpl._originalId_riunione = invitatiRiunioneModelImpl._id_riunione;

		invitatiRiunioneModelImpl._setOriginalId_riunione = false;

		invitatiRiunioneModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<InvitatiRiunione> toCacheModel() {
		InvitatiRiunioneCacheModel invitatiRiunioneCacheModel = new InvitatiRiunioneCacheModel();

		invitatiRiunioneCacheModel.invitatiRiunionePK = getPrimaryKey();

		invitatiRiunioneCacheModel.id_segreteria = getId_segreteria();

		invitatiRiunioneCacheModel.note = getNote();

		String note = invitatiRiunioneCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			invitatiRiunioneCacheModel.note = null;
		}

		invitatiRiunioneCacheModel.partecipanti = getPartecipanti();

		String partecipanti = invitatiRiunioneCacheModel.partecipanti;

		if ((partecipanti != null) && (partecipanti.length() == 0)) {
			invitatiRiunioneCacheModel.partecipanti = null;
		}

		invitatiRiunioneCacheModel.id_stato_invitato = getId_stato_invitato();

		invitatiRiunioneCacheModel.id_riunione = getId_riunione();

		return invitatiRiunioneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id_segreteria=");
		sb.append(getId_segreteria());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", partecipanti=");
		sb.append(getPartecipanti());
		sb.append(", id_stato_invitato=");
		sb.append(getId_stato_invitato());
		sb.append(", id_riunione=");
		sb.append(getId_riunione());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.gestione.riunioni.model.InvitatiRiunione");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_segreteria</column-name><column-value><![CDATA[");
		sb.append(getId_segreteria());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partecipanti</column-name><column-value><![CDATA[");
		sb.append(getPartecipanti());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_stato_invitato</column-name><column-value><![CDATA[");
		sb.append(getId_stato_invitato());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_riunione</column-name><column-value><![CDATA[");
		sb.append(getId_riunione());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = InvitatiRiunione.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			InvitatiRiunione.class
		};
	private long _id_segreteria;
	private long _originalId_segreteria;
	private boolean _setOriginalId_segreteria;
	private String _note;
	private String _partecipanti;
	private long _id_stato_invitato;
	private long _id_riunione;
	private long _originalId_riunione;
	private boolean _setOriginalId_riunione;
	private long _columnBitmask;
	private InvitatiRiunione _escapedModel;
}