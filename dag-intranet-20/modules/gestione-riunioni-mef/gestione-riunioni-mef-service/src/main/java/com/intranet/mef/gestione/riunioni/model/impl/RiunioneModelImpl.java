/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.gestione.riunioni.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.gestione.riunioni.model.Riunione;
import com.intranet.mef.gestione.riunioni.model.RiunioneModel;
import com.intranet.mef.gestione.riunioni.model.RiunioneSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Riunione service. Represents a row in the &quot;MEF_Riunione&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RiunioneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RiunioneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RiunioneImpl
 * @see Riunione
 * @see RiunioneModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RiunioneModelImpl extends BaseModelImpl<Riunione>
	implements RiunioneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a riunione model instance should use the {@link Riunione} interface instead.
	 */
	public static final String TABLE_NAME = "MEF_Riunione";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_riunione", Types.BIGINT },
			{ "oggetto", Types.VARCHAR },
			{ "data_inizio", Types.TIMESTAMP },
			{ "data_fine", Types.TIMESTAMP },
			{ "note", Types.VARCHAR },
			{ "data_modifica", Types.TIMESTAMP },
			{ "data_creazione", Types.TIMESTAMP },
			{ "protocollo", Types.VARCHAR },
			{ "id_stato_riunione", Types.BIGINT },
			{ "id_tipo", Types.BIGINT },
			{ "id_luogo", Types.BIGINT },
			{ "id_amministrazione_convocante", Types.BIGINT },
			{ "data_ultimo_sollecito", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_riunione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("oggetto", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_inizio", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_fine", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_modifica", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_creazione", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("protocollo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_stato_riunione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_tipo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_luogo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_amministrazione_convocante", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_ultimo_sollecito", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table MEF_Riunione (id_riunione LONG not null primary key,oggetto VARCHAR(500) null,data_inizio DATE null,data_fine DATE null,note STRING null,data_modifica DATE null,data_creazione DATE null,protocollo VARCHAR(50) null,id_stato_riunione LONG,id_tipo LONG,id_luogo LONG,id_amministrazione_convocante LONG,data_ultimo_sollecito DATE null)";
	public static final String TABLE_SQL_DROP = "drop table MEF_Riunione";
	public static final String ORDER_BY_JPQL = " ORDER BY riunione.id_riunione ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEF_Riunione.id_riunione ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.gestione.riunioni.model.Riunione"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.gestione.riunioni.model.Riunione"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Riunione toModel(RiunioneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Riunione model = new RiunioneImpl();

		model.setId_riunione(soapModel.getId_riunione());
		model.setOggetto(soapModel.getOggetto());
		model.setData_inizio(soapModel.getData_inizio());
		model.setData_fine(soapModel.getData_fine());
		model.setNote(soapModel.getNote());
		model.setData_modifica(soapModel.getData_modifica());
		model.setData_creazione(soapModel.getData_creazione());
		model.setProtocollo(soapModel.getProtocollo());
		model.setId_stato_riunione(soapModel.getId_stato_riunione());
		model.setId_tipo(soapModel.getId_tipo());
		model.setId_luogo(soapModel.getId_luogo());
		model.setId_amministrazione_convocante(soapModel.getId_amministrazione_convocante());
		model.setData_ultimo_sollecito(soapModel.getData_ultimo_sollecito());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Riunione> toModels(RiunioneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Riunione> models = new ArrayList<Riunione>(soapModels.length);

		for (RiunioneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.gestione.riunioni.model.Riunione"));

	public RiunioneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_riunione;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_riunione(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_riunione;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Riunione.class;
	}

	@Override
	public String getModelClassName() {
		return Riunione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_riunione", getId_riunione());
		attributes.put("oggetto", getOggetto());
		attributes.put("data_inizio", getData_inizio());
		attributes.put("data_fine", getData_fine());
		attributes.put("note", getNote());
		attributes.put("data_modifica", getData_modifica());
		attributes.put("data_creazione", getData_creazione());
		attributes.put("protocollo", getProtocollo());
		attributes.put("id_stato_riunione", getId_stato_riunione());
		attributes.put("id_tipo", getId_tipo());
		attributes.put("id_luogo", getId_luogo());
		attributes.put("id_amministrazione_convocante",
			getId_amministrazione_convocante());
		attributes.put("data_ultimo_sollecito", getData_ultimo_sollecito());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_riunione = (Long)attributes.get("id_riunione");

		if (id_riunione != null) {
			setId_riunione(id_riunione);
		}

		String oggetto = (String)attributes.get("oggetto");

		if (oggetto != null) {
			setOggetto(oggetto);
		}

		Date data_inizio = (Date)attributes.get("data_inizio");

		if (data_inizio != null) {
			setData_inizio(data_inizio);
		}

		Date data_fine = (Date)attributes.get("data_fine");

		if (data_fine != null) {
			setData_fine(data_fine);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		Date data_modifica = (Date)attributes.get("data_modifica");

		if (data_modifica != null) {
			setData_modifica(data_modifica);
		}

		Date data_creazione = (Date)attributes.get("data_creazione");

		if (data_creazione != null) {
			setData_creazione(data_creazione);
		}

		String protocollo = (String)attributes.get("protocollo");

		if (protocollo != null) {
			setProtocollo(protocollo);
		}

		Long id_stato_riunione = (Long)attributes.get("id_stato_riunione");

		if (id_stato_riunione != null) {
			setId_stato_riunione(id_stato_riunione);
		}

		Long id_tipo = (Long)attributes.get("id_tipo");

		if (id_tipo != null) {
			setId_tipo(id_tipo);
		}

		Long id_luogo = (Long)attributes.get("id_luogo");

		if (id_luogo != null) {
			setId_luogo(id_luogo);
		}

		Long id_amministrazione_convocante = (Long)attributes.get(
				"id_amministrazione_convocante");

		if (id_amministrazione_convocante != null) {
			setId_amministrazione_convocante(id_amministrazione_convocante);
		}

		Date data_ultimo_sollecito = (Date)attributes.get(
				"data_ultimo_sollecito");

		if (data_ultimo_sollecito != null) {
			setData_ultimo_sollecito(data_ultimo_sollecito);
		}
	}

	@JSON
	@Override
	public long getId_riunione() {
		return _id_riunione;
	}

	@Override
	public void setId_riunione(long id_riunione) {
		_id_riunione = id_riunione;
	}

	@JSON
	@Override
	public String getOggetto() {
		if (_oggetto == null) {
			return StringPool.BLANK;
		}
		else {
			return _oggetto;
		}
	}

	@Override
	public void setOggetto(String oggetto) {
		_oggetto = oggetto;
	}

	@JSON
	@Override
	public Date getData_inizio() {
		return _data_inizio;
	}

	@Override
	public void setData_inizio(Date data_inizio) {
		_data_inizio = data_inizio;
	}

	@JSON
	@Override
	public Date getData_fine() {
		return _data_fine;
	}

	@Override
	public void setData_fine(Date data_fine) {
		_data_fine = data_fine;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public Date getData_modifica() {
		return _data_modifica;
	}

	@Override
	public void setData_modifica(Date data_modifica) {
		_data_modifica = data_modifica;
	}

	@JSON
	@Override
	public Date getData_creazione() {
		return _data_creazione;
	}

	@Override
	public void setData_creazione(Date data_creazione) {
		_data_creazione = data_creazione;
	}

	@JSON
	@Override
	public String getProtocollo() {
		if (_protocollo == null) {
			return StringPool.BLANK;
		}
		else {
			return _protocollo;
		}
	}

	@Override
	public void setProtocollo(String protocollo) {
		_protocollo = protocollo;
	}

	@JSON
	@Override
	public long getId_stato_riunione() {
		return _id_stato_riunione;
	}

	@Override
	public void setId_stato_riunione(long id_stato_riunione) {
		_id_stato_riunione = id_stato_riunione;
	}

	@JSON
	@Override
	public long getId_tipo() {
		return _id_tipo;
	}

	@Override
	public void setId_tipo(long id_tipo) {
		_id_tipo = id_tipo;
	}

	@JSON
	@Override
	public long getId_luogo() {
		return _id_luogo;
	}

	@Override
	public void setId_luogo(long id_luogo) {
		_id_luogo = id_luogo;
	}

	@JSON
	@Override
	public long getId_amministrazione_convocante() {
		return _id_amministrazione_convocante;
	}

	@Override
	public void setId_amministrazione_convocante(
		long id_amministrazione_convocante) {
		_id_amministrazione_convocante = id_amministrazione_convocante;
	}

	@JSON
	@Override
	public Date getData_ultimo_sollecito() {
		return _data_ultimo_sollecito;
	}

	@Override
	public void setData_ultimo_sollecito(Date data_ultimo_sollecito) {
		_data_ultimo_sollecito = data_ultimo_sollecito;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Riunione.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Riunione toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Riunione)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RiunioneImpl riunioneImpl = new RiunioneImpl();

		riunioneImpl.setId_riunione(getId_riunione());
		riunioneImpl.setOggetto(getOggetto());
		riunioneImpl.setData_inizio(getData_inizio());
		riunioneImpl.setData_fine(getData_fine());
		riunioneImpl.setNote(getNote());
		riunioneImpl.setData_modifica(getData_modifica());
		riunioneImpl.setData_creazione(getData_creazione());
		riunioneImpl.setProtocollo(getProtocollo());
		riunioneImpl.setId_stato_riunione(getId_stato_riunione());
		riunioneImpl.setId_tipo(getId_tipo());
		riunioneImpl.setId_luogo(getId_luogo());
		riunioneImpl.setId_amministrazione_convocante(getId_amministrazione_convocante());
		riunioneImpl.setData_ultimo_sollecito(getData_ultimo_sollecito());

		riunioneImpl.resetOriginalValues();

		return riunioneImpl;
	}

	@Override
	public int compareTo(Riunione riunione) {
		long primaryKey = riunione.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Riunione)) {
			return false;
		}

		Riunione riunione = (Riunione)obj;

		long primaryKey = riunione.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Riunione> toCacheModel() {
		RiunioneCacheModel riunioneCacheModel = new RiunioneCacheModel();

		riunioneCacheModel.id_riunione = getId_riunione();

		riunioneCacheModel.oggetto = getOggetto();

		String oggetto = riunioneCacheModel.oggetto;

		if ((oggetto != null) && (oggetto.length() == 0)) {
			riunioneCacheModel.oggetto = null;
		}

		Date data_inizio = getData_inizio();

		if (data_inizio != null) {
			riunioneCacheModel.data_inizio = data_inizio.getTime();
		}
		else {
			riunioneCacheModel.data_inizio = Long.MIN_VALUE;
		}

		Date data_fine = getData_fine();

		if (data_fine != null) {
			riunioneCacheModel.data_fine = data_fine.getTime();
		}
		else {
			riunioneCacheModel.data_fine = Long.MIN_VALUE;
		}

		riunioneCacheModel.note = getNote();

		String note = riunioneCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			riunioneCacheModel.note = null;
		}

		Date data_modifica = getData_modifica();

		if (data_modifica != null) {
			riunioneCacheModel.data_modifica = data_modifica.getTime();
		}
		else {
			riunioneCacheModel.data_modifica = Long.MIN_VALUE;
		}

		Date data_creazione = getData_creazione();

		if (data_creazione != null) {
			riunioneCacheModel.data_creazione = data_creazione.getTime();
		}
		else {
			riunioneCacheModel.data_creazione = Long.MIN_VALUE;
		}

		riunioneCacheModel.protocollo = getProtocollo();

		String protocollo = riunioneCacheModel.protocollo;

		if ((protocollo != null) && (protocollo.length() == 0)) {
			riunioneCacheModel.protocollo = null;
		}

		riunioneCacheModel.id_stato_riunione = getId_stato_riunione();

		riunioneCacheModel.id_tipo = getId_tipo();

		riunioneCacheModel.id_luogo = getId_luogo();

		riunioneCacheModel.id_amministrazione_convocante = getId_amministrazione_convocante();

		Date data_ultimo_sollecito = getData_ultimo_sollecito();

		if (data_ultimo_sollecito != null) {
			riunioneCacheModel.data_ultimo_sollecito = data_ultimo_sollecito.getTime();
		}
		else {
			riunioneCacheModel.data_ultimo_sollecito = Long.MIN_VALUE;
		}

		return riunioneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{id_riunione=");
		sb.append(getId_riunione());
		sb.append(", oggetto=");
		sb.append(getOggetto());
		sb.append(", data_inizio=");
		sb.append(getData_inizio());
		sb.append(", data_fine=");
		sb.append(getData_fine());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", data_modifica=");
		sb.append(getData_modifica());
		sb.append(", data_creazione=");
		sb.append(getData_creazione());
		sb.append(", protocollo=");
		sb.append(getProtocollo());
		sb.append(", id_stato_riunione=");
		sb.append(getId_stato_riunione());
		sb.append(", id_tipo=");
		sb.append(getId_tipo());
		sb.append(", id_luogo=");
		sb.append(getId_luogo());
		sb.append(", id_amministrazione_convocante=");
		sb.append(getId_amministrazione_convocante());
		sb.append(", data_ultimo_sollecito=");
		sb.append(getData_ultimo_sollecito());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.gestione.riunioni.model.Riunione");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_riunione</column-name><column-value><![CDATA[");
		sb.append(getId_riunione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oggetto</column-name><column-value><![CDATA[");
		sb.append(getOggetto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_inizio</column-name><column-value><![CDATA[");
		sb.append(getData_inizio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_fine</column-name><column-value><![CDATA[");
		sb.append(getData_fine());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_modifica</column-name><column-value><![CDATA[");
		sb.append(getData_modifica());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_creazione</column-name><column-value><![CDATA[");
		sb.append(getData_creazione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>protocollo</column-name><column-value><![CDATA[");
		sb.append(getProtocollo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_stato_riunione</column-name><column-value><![CDATA[");
		sb.append(getId_stato_riunione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_tipo</column-name><column-value><![CDATA[");
		sb.append(getId_tipo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_luogo</column-name><column-value><![CDATA[");
		sb.append(getId_luogo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_amministrazione_convocante</column-name><column-value><![CDATA[");
		sb.append(getId_amministrazione_convocante());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_ultimo_sollecito</column-name><column-value><![CDATA[");
		sb.append(getData_ultimo_sollecito());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Riunione.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Riunione.class
		};
	private long _id_riunione;
	private String _oggetto;
	private Date _data_inizio;
	private Date _data_fine;
	private String _note;
	private Date _data_modifica;
	private Date _data_creazione;
	private String _protocollo;
	private long _id_stato_riunione;
	private long _id_tipo;
	private long _id_luogo;
	private long _id_amministrazione_convocante;
	private Date _data_ultimo_sollecito;
	private Riunione _escapedModel;
}