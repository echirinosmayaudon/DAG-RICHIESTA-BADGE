/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.gestione.riunioni.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.gestione.riunioni.model.AmministrazioneConvocante;
import com.intranet.mef.gestione.riunioni.model.AmministrazioneConvocanteModel;
import com.intranet.mef.gestione.riunioni.model.AmministrazioneConvocanteSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AmministrazioneConvocante service. Represents a row in the &quot;MEF_AmministrazioneConvocante&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AmministrazioneConvocanteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AmministrazioneConvocanteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AmministrazioneConvocanteImpl
 * @see AmministrazioneConvocante
 * @see AmministrazioneConvocanteModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AmministrazioneConvocanteModelImpl extends BaseModelImpl<AmministrazioneConvocante>
	implements AmministrazioneConvocanteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a amministrazione convocante model instance should use the {@link AmministrazioneConvocante} interface instead.
	 */
	public static final String TABLE_NAME = "MEF_AmministrazioneConvocante";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_amministrazione_convocante", Types.BIGINT },
			{ "nome_amministrazione", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_amministrazione_convocante", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nome_amministrazione", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEF_AmministrazioneConvocante (id_amministrazione_convocante LONG not null primary key,nome_amministrazione VARCHAR(250) null)";
	public static final String TABLE_SQL_DROP = "drop table MEF_AmministrazioneConvocante";
	public static final String ORDER_BY_JPQL = " ORDER BY amministrazioneConvocante.id_amministrazione_convocante ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEF_AmministrazioneConvocante.id_amministrazione_convocante ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.gestione.riunioni.model.AmministrazioneConvocante"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.gestione.riunioni.model.AmministrazioneConvocante"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AmministrazioneConvocante toModel(
		AmministrazioneConvocanteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AmministrazioneConvocante model = new AmministrazioneConvocanteImpl();

		model.setId_amministrazione_convocante(soapModel.getId_amministrazione_convocante());
		model.setNome_amministrazione(soapModel.getNome_amministrazione());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AmministrazioneConvocante> toModels(
		AmministrazioneConvocanteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AmministrazioneConvocante> models = new ArrayList<AmministrazioneConvocante>(soapModels.length);

		for (AmministrazioneConvocanteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.gestione.riunioni.model.AmministrazioneConvocante"));

	public AmministrazioneConvocanteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_amministrazione_convocante;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_amministrazione_convocante(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_amministrazione_convocante;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AmministrazioneConvocante.class;
	}

	@Override
	public String getModelClassName() {
		return AmministrazioneConvocante.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_amministrazione_convocante",
			getId_amministrazione_convocante());
		attributes.put("nome_amministrazione", getNome_amministrazione());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_amministrazione_convocante = (Long)attributes.get(
				"id_amministrazione_convocante");

		if (id_amministrazione_convocante != null) {
			setId_amministrazione_convocante(id_amministrazione_convocante);
		}

		String nome_amministrazione = (String)attributes.get(
				"nome_amministrazione");

		if (nome_amministrazione != null) {
			setNome_amministrazione(nome_amministrazione);
		}
	}

	@JSON
	@Override
	public long getId_amministrazione_convocante() {
		return _id_amministrazione_convocante;
	}

	@Override
	public void setId_amministrazione_convocante(
		long id_amministrazione_convocante) {
		_id_amministrazione_convocante = id_amministrazione_convocante;
	}

	@JSON
	@Override
	public String getNome_amministrazione() {
		if (_nome_amministrazione == null) {
			return StringPool.BLANK;
		}
		else {
			return _nome_amministrazione;
		}
	}

	@Override
	public void setNome_amministrazione(String nome_amministrazione) {
		_nome_amministrazione = nome_amministrazione;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AmministrazioneConvocante.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AmministrazioneConvocante toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AmministrazioneConvocante)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AmministrazioneConvocanteImpl amministrazioneConvocanteImpl = new AmministrazioneConvocanteImpl();

		amministrazioneConvocanteImpl.setId_amministrazione_convocante(getId_amministrazione_convocante());
		amministrazioneConvocanteImpl.setNome_amministrazione(getNome_amministrazione());

		amministrazioneConvocanteImpl.resetOriginalValues();

		return amministrazioneConvocanteImpl;
	}

	@Override
	public int compareTo(AmministrazioneConvocante amministrazioneConvocante) {
		long primaryKey = amministrazioneConvocante.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AmministrazioneConvocante)) {
			return false;
		}

		AmministrazioneConvocante amministrazioneConvocante = (AmministrazioneConvocante)obj;

		long primaryKey = amministrazioneConvocante.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AmministrazioneConvocante> toCacheModel() {
		AmministrazioneConvocanteCacheModel amministrazioneConvocanteCacheModel = new AmministrazioneConvocanteCacheModel();

		amministrazioneConvocanteCacheModel.id_amministrazione_convocante = getId_amministrazione_convocante();

		amministrazioneConvocanteCacheModel.nome_amministrazione = getNome_amministrazione();

		String nome_amministrazione = amministrazioneConvocanteCacheModel.nome_amministrazione;

		if ((nome_amministrazione != null) &&
				(nome_amministrazione.length() == 0)) {
			amministrazioneConvocanteCacheModel.nome_amministrazione = null;
		}

		return amministrazioneConvocanteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{id_amministrazione_convocante=");
		sb.append(getId_amministrazione_convocante());
		sb.append(", nome_amministrazione=");
		sb.append(getNome_amministrazione());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append(
			"com.intranet.mef.gestione.riunioni.model.AmministrazioneConvocante");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_amministrazione_convocante</column-name><column-value><![CDATA[");
		sb.append(getId_amministrazione_convocante());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nome_amministrazione</column-name><column-value><![CDATA[");
		sb.append(getNome_amministrazione());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AmministrazioneConvocante.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AmministrazioneConvocante.class
		};
	private long _id_amministrazione_convocante;
	private String _nome_amministrazione;
	private AmministrazioneConvocante _escapedModel;
}