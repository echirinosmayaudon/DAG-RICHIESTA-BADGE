/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.gestione.riunioni.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.gestione.riunioni.model.StoricoStatoRiunione;
import com.intranet.mef.gestione.riunioni.model.StoricoStatoRiunioneModel;
import com.intranet.mef.gestione.riunioni.model.StoricoStatoRiunioneSoap;
import com.intranet.mef.gestione.riunioni.service.persistence.StoricoStatoRiunionePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the StoricoStatoRiunione service. Represents a row in the &quot;MEF_StoricoStatoRiunione&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StoricoStatoRiunioneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StoricoStatoRiunioneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StoricoStatoRiunioneImpl
 * @see StoricoStatoRiunione
 * @see StoricoStatoRiunioneModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class StoricoStatoRiunioneModelImpl extends BaseModelImpl<StoricoStatoRiunione>
	implements StoricoStatoRiunioneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a storico stato riunione model instance should use the {@link StoricoStatoRiunione} interface instead.
	 */
	public static final String TABLE_NAME = "MEF_StoricoStatoRiunione";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_riunione", Types.BIGINT },
			{ "id_storico", Types.BIGINT },
			{ "data_", Types.TIMESTAMP },
			{ "id_stato_riunione", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_riunione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_storico", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("id_stato_riunione", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table MEF_StoricoStatoRiunione (id_riunione LONG not null,id_storico LONG not null,data_ DATE null,id_stato_riunione LONG,primary key (id_riunione, id_storico))";
	public static final String TABLE_SQL_DROP = "drop table MEF_StoricoStatoRiunione";
	public static final String ORDER_BY_JPQL = " ORDER BY storicoStatoRiunione.id.id_riunione ASC, storicoStatoRiunione.id.id_storico ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEF_StoricoStatoRiunione.id_riunione ASC, MEF_StoricoStatoRiunione.id_storico ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.gestione.riunioni.model.StoricoStatoRiunione"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.gestione.riunioni.model.StoricoStatoRiunione"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.intranet.mef.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.intranet.mef.gestione.riunioni.model.StoricoStatoRiunione"),
			true);
	public static final long ID_RIUNIONE_COLUMN_BITMASK = 1L;
	public static final long ID_STORICO_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static StoricoStatoRiunione toModel(
		StoricoStatoRiunioneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		StoricoStatoRiunione model = new StoricoStatoRiunioneImpl();

		model.setId_riunione(soapModel.getId_riunione());
		model.setId_storico(soapModel.getId_storico());
		model.setData(soapModel.getData());
		model.setId_stato_riunione(soapModel.getId_stato_riunione());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<StoricoStatoRiunione> toModels(
		StoricoStatoRiunioneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<StoricoStatoRiunione> models = new ArrayList<StoricoStatoRiunione>(soapModels.length);

		for (StoricoStatoRiunioneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.gestione.riunioni.model.StoricoStatoRiunione"));

	public StoricoStatoRiunioneModelImpl() {
	}

	@Override
	public StoricoStatoRiunionePK getPrimaryKey() {
		return new StoricoStatoRiunionePK(_id_riunione, _id_storico);
	}

	@Override
	public void setPrimaryKey(StoricoStatoRiunionePK primaryKey) {
		setId_riunione(primaryKey.id_riunione);
		setId_storico(primaryKey.id_storico);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new StoricoStatoRiunionePK(_id_riunione, _id_storico);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((StoricoStatoRiunionePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StoricoStatoRiunione.class;
	}

	@Override
	public String getModelClassName() {
		return StoricoStatoRiunione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_riunione", getId_riunione());
		attributes.put("id_storico", getId_storico());
		attributes.put("data", getData());
		attributes.put("id_stato_riunione", getId_stato_riunione());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_riunione = (Long)attributes.get("id_riunione");

		if (id_riunione != null) {
			setId_riunione(id_riunione);
		}

		Long id_storico = (Long)attributes.get("id_storico");

		if (id_storico != null) {
			setId_storico(id_storico);
		}

		Date data = (Date)attributes.get("data");

		if (data != null) {
			setData(data);
		}

		Long id_stato_riunione = (Long)attributes.get("id_stato_riunione");

		if (id_stato_riunione != null) {
			setId_stato_riunione(id_stato_riunione);
		}
	}

	@JSON
	@Override
	public long getId_riunione() {
		return _id_riunione;
	}

	@Override
	public void setId_riunione(long id_riunione) {
		_columnBitmask |= ID_RIUNIONE_COLUMN_BITMASK;

		if (!_setOriginalId_riunione) {
			_setOriginalId_riunione = true;

			_originalId_riunione = _id_riunione;
		}

		_id_riunione = id_riunione;
	}

	public long getOriginalId_riunione() {
		return _originalId_riunione;
	}

	@JSON
	@Override
	public long getId_storico() {
		return _id_storico;
	}

	@Override
	public void setId_storico(long id_storico) {
		_id_storico = id_storico;
	}

	@JSON
	@Override
	public Date getData() {
		return _data;
	}

	@Override
	public void setData(Date data) {
		_data = data;
	}

	@JSON
	@Override
	public long getId_stato_riunione() {
		return _id_stato_riunione;
	}

	@Override
	public void setId_stato_riunione(long id_stato_riunione) {
		_id_stato_riunione = id_stato_riunione;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public StoricoStatoRiunione toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StoricoStatoRiunione)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StoricoStatoRiunioneImpl storicoStatoRiunioneImpl = new StoricoStatoRiunioneImpl();

		storicoStatoRiunioneImpl.setId_riunione(getId_riunione());
		storicoStatoRiunioneImpl.setId_storico(getId_storico());
		storicoStatoRiunioneImpl.setData(getData());
		storicoStatoRiunioneImpl.setId_stato_riunione(getId_stato_riunione());

		storicoStatoRiunioneImpl.resetOriginalValues();

		return storicoStatoRiunioneImpl;
	}

	@Override
	public int compareTo(StoricoStatoRiunione storicoStatoRiunione) {
		StoricoStatoRiunionePK primaryKey = storicoStatoRiunione.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StoricoStatoRiunione)) {
			return false;
		}

		StoricoStatoRiunione storicoStatoRiunione = (StoricoStatoRiunione)obj;

		StoricoStatoRiunionePK primaryKey = storicoStatoRiunione.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		StoricoStatoRiunioneModelImpl storicoStatoRiunioneModelImpl = this;

		storicoStatoRiunioneModelImpl._originalId_riunione = storicoStatoRiunioneModelImpl._id_riunione;

		storicoStatoRiunioneModelImpl._setOriginalId_riunione = false;

		storicoStatoRiunioneModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StoricoStatoRiunione> toCacheModel() {
		StoricoStatoRiunioneCacheModel storicoStatoRiunioneCacheModel = new StoricoStatoRiunioneCacheModel();

		storicoStatoRiunioneCacheModel.storicoStatoRiunionePK = getPrimaryKey();

		storicoStatoRiunioneCacheModel.id_riunione = getId_riunione();

		storicoStatoRiunioneCacheModel.id_storico = getId_storico();

		Date data = getData();

		if (data != null) {
			storicoStatoRiunioneCacheModel.data = data.getTime();
		}
		else {
			storicoStatoRiunioneCacheModel.data = Long.MIN_VALUE;
		}

		storicoStatoRiunioneCacheModel.id_stato_riunione = getId_stato_riunione();

		return storicoStatoRiunioneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id_riunione=");
		sb.append(getId_riunione());
		sb.append(", id_storico=");
		sb.append(getId_storico());
		sb.append(", data=");
		sb.append(getData());
		sb.append(", id_stato_riunione=");
		sb.append(getId_stato_riunione());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append(
			"com.intranet.mef.gestione.riunioni.model.StoricoStatoRiunione");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_riunione</column-name><column-value><![CDATA[");
		sb.append(getId_riunione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_storico</column-name><column-value><![CDATA[");
		sb.append(getId_storico());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data</column-name><column-value><![CDATA[");
		sb.append(getData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_stato_riunione</column-name><column-value><![CDATA[");
		sb.append(getId_stato_riunione());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = StoricoStatoRiunione.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			StoricoStatoRiunione.class
		};
	private long _id_riunione;
	private long _originalId_riunione;
	private boolean _setOriginalId_riunione;
	private long _id_storico;
	private Date _data;
	private long _id_stato_riunione;
	private long _columnBitmask;
	private StoricoStatoRiunione _escapedModel;
}