/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package service.intranet.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import service.intranet.mef.model.ModuloTrasporti;
import service.intranet.mef.model.ModuloTrasportiModel;
import service.intranet.mef.model.ModuloTrasportiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ModuloTrasporti service. Represents a row in the &quot;MFORM_ModuloTrasporti&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ModuloTrasportiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ModuloTrasportiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ModuloTrasportiImpl
 * @see ModuloTrasporti
 * @see ModuloTrasportiModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ModuloTrasportiModelImpl extends BaseModelImpl<ModuloTrasporti>
	implements ModuloTrasportiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a modulo trasporti model instance should use the {@link ModuloTrasporti} interface instead.
	 */
	public static final String TABLE_NAME = "MFORM_ModuloTrasporti";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_modulo_trasporti", Types.BIGINT },
			{ "cognome", Types.VARCHAR },
			{ "nome", Types.VARCHAR },
			{ "codice_fiscale", Types.VARCHAR },
			{ "utente_inserimento", Types.VARCHAR },
			{ "data_inserimento", Types.TIMESTAMP },
			{ "flag_tipospesa", Types.VARCHAR },
			{ "iban", Types.VARCHAR },
			{ "importo", Types.VARCHAR },
			{ "data_titolo_annuale", Types.TIMESTAMP },
			{ "nr_titoli_mensili", Types.VARCHAR },
			{ "figlio_nome", Types.VARCHAR },
			{ "figlio_cognome", Types.VARCHAR },
			{ "figlio_data_nascita", Types.TIMESTAMP },
			{ "figlio_luogo_data", Types.VARCHAR },
			{ "figlio_codicefiscale", Types.VARCHAR },
			{ "note", Types.VARCHAR },
			{ "flag_inviato", Types.VARCHAR },
			{ "telefono", Types.VARCHAR },
			{ "allegatoUuid", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_modulo_trasporti", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cognome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codice_fiscale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("utente_inserimento", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_inserimento", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("flag_tipospesa", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("iban", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_titolo_annuale", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nr_titoli_mensili", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("figlio_nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("figlio_cognome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("figlio_data_nascita", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("figlio_luogo_data", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("figlio_codicefiscale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("flag_inviato", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telefono", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("allegatoUuid", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MFORM_ModuloTrasporti (id_modulo_trasporti LONG not null primary key,cognome VARCHAR(75) null,nome VARCHAR(75) null,codice_fiscale VARCHAR(16) null,utente_inserimento VARCHAR(75) null,data_inserimento DATE null,flag_tipospesa VARCHAR(75) null,iban VARCHAR(75) null,importo VARCHAR(75) null,data_titolo_annuale DATE null,nr_titoli_mensili VARCHAR(75) null,figlio_nome VARCHAR(75) null,figlio_cognome VARCHAR(75) null,figlio_data_nascita DATE null,figlio_luogo_data VARCHAR(75) null,figlio_codicefiscale VARCHAR(16) null,note VARCHAR(500) null,flag_inviato VARCHAR(75) null,telefono VARCHAR(75) null,allegatoUuid VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MFORM_ModuloTrasporti";
	public static final String ORDER_BY_JPQL = " ORDER BY moduloTrasporti.id_modulo_trasporti ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MFORM_ModuloTrasporti.id_modulo_trasporti ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(service.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.service.intranet.mef.model.ModuloTrasporti"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(service.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.service.intranet.mef.model.ModuloTrasporti"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ModuloTrasporti toModel(ModuloTrasportiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ModuloTrasporti model = new ModuloTrasportiImpl();

		model.setId_modulo_trasporti(soapModel.getId_modulo_trasporti());
		model.setCognome(soapModel.getCognome());
		model.setNome(soapModel.getNome());
		model.setCodice_fiscale(soapModel.getCodice_fiscale());
		model.setUtente_inserimento(soapModel.getUtente_inserimento());
		model.setData_inserimento(soapModel.getData_inserimento());
		model.setFlag_tipospesa(soapModel.getFlag_tipospesa());
		model.setIban(soapModel.getIban());
		model.setImporto(soapModel.getImporto());
		model.setData_titolo_annuale(soapModel.getData_titolo_annuale());
		model.setNr_titoli_mensili(soapModel.getNr_titoli_mensili());
		model.setFiglio_nome(soapModel.getFiglio_nome());
		model.setFiglio_cognome(soapModel.getFiglio_cognome());
		model.setFiglio_data_nascita(soapModel.getFiglio_data_nascita());
		model.setFiglio_luogo_data(soapModel.getFiglio_luogo_data());
		model.setFiglio_codicefiscale(soapModel.getFiglio_codicefiscale());
		model.setNote(soapModel.getNote());
		model.setFlag_inviato(soapModel.getFlag_inviato());
		model.setTelefono(soapModel.getTelefono());
		model.setAllegatoUuid(soapModel.getAllegatoUuid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ModuloTrasporti> toModels(
		ModuloTrasportiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ModuloTrasporti> models = new ArrayList<ModuloTrasporti>(soapModels.length);

		for (ModuloTrasportiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(service.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.service.intranet.mef.model.ModuloTrasporti"));

	public ModuloTrasportiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_modulo_trasporti;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_modulo_trasporti(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_modulo_trasporti;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ModuloTrasporti.class;
	}

	@Override
	public String getModelClassName() {
		return ModuloTrasporti.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_modulo_trasporti", getId_modulo_trasporti());
		attributes.put("cognome", getCognome());
		attributes.put("nome", getNome());
		attributes.put("codice_fiscale", getCodice_fiscale());
		attributes.put("utente_inserimento", getUtente_inserimento());
		attributes.put("data_inserimento", getData_inserimento());
		attributes.put("flag_tipospesa", getFlag_tipospesa());
		attributes.put("iban", getIban());
		attributes.put("importo", getImporto());
		attributes.put("data_titolo_annuale", getData_titolo_annuale());
		attributes.put("nr_titoli_mensili", getNr_titoli_mensili());
		attributes.put("figlio_nome", getFiglio_nome());
		attributes.put("figlio_cognome", getFiglio_cognome());
		attributes.put("figlio_data_nascita", getFiglio_data_nascita());
		attributes.put("figlio_luogo_data", getFiglio_luogo_data());
		attributes.put("figlio_codicefiscale", getFiglio_codicefiscale());
		attributes.put("note", getNote());
		attributes.put("flag_inviato", getFlag_inviato());
		attributes.put("telefono", getTelefono());
		attributes.put("allegatoUuid", getAllegatoUuid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_modulo_trasporti = (Long)attributes.get("id_modulo_trasporti");

		if (id_modulo_trasporti != null) {
			setId_modulo_trasporti(id_modulo_trasporti);
		}

		String cognome = (String)attributes.get("cognome");

		if (cognome != null) {
			setCognome(cognome);
		}

		String nome = (String)attributes.get("nome");

		if (nome != null) {
			setNome(nome);
		}

		String codice_fiscale = (String)attributes.get("codice_fiscale");

		if (codice_fiscale != null) {
			setCodice_fiscale(codice_fiscale);
		}

		String utente_inserimento = (String)attributes.get("utente_inserimento");

		if (utente_inserimento != null) {
			setUtente_inserimento(utente_inserimento);
		}

		Date data_inserimento = (Date)attributes.get("data_inserimento");

		if (data_inserimento != null) {
			setData_inserimento(data_inserimento);
		}

		String flag_tipospesa = (String)attributes.get("flag_tipospesa");

		if (flag_tipospesa != null) {
			setFlag_tipospesa(flag_tipospesa);
		}

		String iban = (String)attributes.get("iban");

		if (iban != null) {
			setIban(iban);
		}

		String importo = (String)attributes.get("importo");

		if (importo != null) {
			setImporto(importo);
		}

		Date data_titolo_annuale = (Date)attributes.get("data_titolo_annuale");

		if (data_titolo_annuale != null) {
			setData_titolo_annuale(data_titolo_annuale);
		}

		String nr_titoli_mensili = (String)attributes.get("nr_titoli_mensili");

		if (nr_titoli_mensili != null) {
			setNr_titoli_mensili(nr_titoli_mensili);
		}

		String figlio_nome = (String)attributes.get("figlio_nome");

		if (figlio_nome != null) {
			setFiglio_nome(figlio_nome);
		}

		String figlio_cognome = (String)attributes.get("figlio_cognome");

		if (figlio_cognome != null) {
			setFiglio_cognome(figlio_cognome);
		}

		Date figlio_data_nascita = (Date)attributes.get("figlio_data_nascita");

		if (figlio_data_nascita != null) {
			setFiglio_data_nascita(figlio_data_nascita);
		}

		String figlio_luogo_data = (String)attributes.get("figlio_luogo_data");

		if (figlio_luogo_data != null) {
			setFiglio_luogo_data(figlio_luogo_data);
		}

		String figlio_codicefiscale = (String)attributes.get(
				"figlio_codicefiscale");

		if (figlio_codicefiscale != null) {
			setFiglio_codicefiscale(figlio_codicefiscale);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		String flag_inviato = (String)attributes.get("flag_inviato");

		if (flag_inviato != null) {
			setFlag_inviato(flag_inviato);
		}

		String telefono = (String)attributes.get("telefono");

		if (telefono != null) {
			setTelefono(telefono);
		}

		String allegatoUuid = (String)attributes.get("allegatoUuid");

		if (allegatoUuid != null) {
			setAllegatoUuid(allegatoUuid);
		}
	}

	@JSON
	@Override
	public long getId_modulo_trasporti() {
		return _id_modulo_trasporti;
	}

	@Override
	public void setId_modulo_trasporti(long id_modulo_trasporti) {
		_id_modulo_trasporti = id_modulo_trasporti;
	}

	@JSON
	@Override
	public String getCognome() {
		if (_cognome == null) {
			return StringPool.BLANK;
		}
		else {
			return _cognome;
		}
	}

	@Override
	public void setCognome(String cognome) {
		_cognome = cognome;
	}

	@JSON
	@Override
	public String getNome() {
		if (_nome == null) {
			return StringPool.BLANK;
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_nome = nome;
	}

	@JSON
	@Override
	public String getCodice_fiscale() {
		if (_codice_fiscale == null) {
			return StringPool.BLANK;
		}
		else {
			return _codice_fiscale;
		}
	}

	@Override
	public void setCodice_fiscale(String codice_fiscale) {
		_codice_fiscale = codice_fiscale;
	}

	@JSON
	@Override
	public String getUtente_inserimento() {
		if (_utente_inserimento == null) {
			return StringPool.BLANK;
		}
		else {
			return _utente_inserimento;
		}
	}

	@Override
	public void setUtente_inserimento(String utente_inserimento) {
		_utente_inserimento = utente_inserimento;
	}

	@JSON
	@Override
	public Date getData_inserimento() {
		return _data_inserimento;
	}

	@Override
	public void setData_inserimento(Date data_inserimento) {
		_data_inserimento = data_inserimento;
	}

	@JSON
	@Override
	public String getFlag_tipospesa() {
		if (_flag_tipospesa == null) {
			return StringPool.BLANK;
		}
		else {
			return _flag_tipospesa;
		}
	}

	@Override
	public void setFlag_tipospesa(String flag_tipospesa) {
		_flag_tipospesa = flag_tipospesa;
	}

	@JSON
	@Override
	public String getIban() {
		if (_iban == null) {
			return StringPool.BLANK;
		}
		else {
			return _iban;
		}
	}

	@Override
	public void setIban(String iban) {
		_iban = iban;
	}

	@JSON
	@Override
	public String getImporto() {
		if (_importo == null) {
			return StringPool.BLANK;
		}
		else {
			return _importo;
		}
	}

	@Override
	public void setImporto(String importo) {
		_importo = importo;
	}

	@JSON
	@Override
	public Date getData_titolo_annuale() {
		return _data_titolo_annuale;
	}

	@Override
	public void setData_titolo_annuale(Date data_titolo_annuale) {
		_data_titolo_annuale = data_titolo_annuale;
	}

	@JSON
	@Override
	public String getNr_titoli_mensili() {
		if (_nr_titoli_mensili == null) {
			return StringPool.BLANK;
		}
		else {
			return _nr_titoli_mensili;
		}
	}

	@Override
	public void setNr_titoli_mensili(String nr_titoli_mensili) {
		_nr_titoli_mensili = nr_titoli_mensili;
	}

	@JSON
	@Override
	public String getFiglio_nome() {
		if (_figlio_nome == null) {
			return StringPool.BLANK;
		}
		else {
			return _figlio_nome;
		}
	}

	@Override
	public void setFiglio_nome(String figlio_nome) {
		_figlio_nome = figlio_nome;
	}

	@JSON
	@Override
	public String getFiglio_cognome() {
		if (_figlio_cognome == null) {
			return StringPool.BLANK;
		}
		else {
			return _figlio_cognome;
		}
	}

	@Override
	public void setFiglio_cognome(String figlio_cognome) {
		_figlio_cognome = figlio_cognome;
	}

	@JSON
	@Override
	public Date getFiglio_data_nascita() {
		return _figlio_data_nascita;
	}

	@Override
	public void setFiglio_data_nascita(Date figlio_data_nascita) {
		_figlio_data_nascita = figlio_data_nascita;
	}

	@JSON
	@Override
	public String getFiglio_luogo_data() {
		if (_figlio_luogo_data == null) {
			return StringPool.BLANK;
		}
		else {
			return _figlio_luogo_data;
		}
	}

	@Override
	public void setFiglio_luogo_data(String figlio_luogo_data) {
		_figlio_luogo_data = figlio_luogo_data;
	}

	@JSON
	@Override
	public String getFiglio_codicefiscale() {
		if (_figlio_codicefiscale == null) {
			return StringPool.BLANK;
		}
		else {
			return _figlio_codicefiscale;
		}
	}

	@Override
	public void setFiglio_codicefiscale(String figlio_codicefiscale) {
		_figlio_codicefiscale = figlio_codicefiscale;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public String getFlag_inviato() {
		if (_flag_inviato == null) {
			return StringPool.BLANK;
		}
		else {
			return _flag_inviato;
		}
	}

	@Override
	public void setFlag_inviato(String flag_inviato) {
		_flag_inviato = flag_inviato;
	}

	@JSON
	@Override
	public String getTelefono() {
		if (_telefono == null) {
			return StringPool.BLANK;
		}
		else {
			return _telefono;
		}
	}

	@Override
	public void setTelefono(String telefono) {
		_telefono = telefono;
	}

	@JSON
	@Override
	public String getAllegatoUuid() {
		if (_allegatoUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _allegatoUuid;
		}
	}

	@Override
	public void setAllegatoUuid(String allegatoUuid) {
		_allegatoUuid = allegatoUuid;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ModuloTrasporti.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ModuloTrasporti toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ModuloTrasporti)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ModuloTrasportiImpl moduloTrasportiImpl = new ModuloTrasportiImpl();

		moduloTrasportiImpl.setId_modulo_trasporti(getId_modulo_trasporti());
		moduloTrasportiImpl.setCognome(getCognome());
		moduloTrasportiImpl.setNome(getNome());
		moduloTrasportiImpl.setCodice_fiscale(getCodice_fiscale());
		moduloTrasportiImpl.setUtente_inserimento(getUtente_inserimento());
		moduloTrasportiImpl.setData_inserimento(getData_inserimento());
		moduloTrasportiImpl.setFlag_tipospesa(getFlag_tipospesa());
		moduloTrasportiImpl.setIban(getIban());
		moduloTrasportiImpl.setImporto(getImporto());
		moduloTrasportiImpl.setData_titolo_annuale(getData_titolo_annuale());
		moduloTrasportiImpl.setNr_titoli_mensili(getNr_titoli_mensili());
		moduloTrasportiImpl.setFiglio_nome(getFiglio_nome());
		moduloTrasportiImpl.setFiglio_cognome(getFiglio_cognome());
		moduloTrasportiImpl.setFiglio_data_nascita(getFiglio_data_nascita());
		moduloTrasportiImpl.setFiglio_luogo_data(getFiglio_luogo_data());
		moduloTrasportiImpl.setFiglio_codicefiscale(getFiglio_codicefiscale());
		moduloTrasportiImpl.setNote(getNote());
		moduloTrasportiImpl.setFlag_inviato(getFlag_inviato());
		moduloTrasportiImpl.setTelefono(getTelefono());
		moduloTrasportiImpl.setAllegatoUuid(getAllegatoUuid());

		moduloTrasportiImpl.resetOriginalValues();

		return moduloTrasportiImpl;
	}

	@Override
	public int compareTo(ModuloTrasporti moduloTrasporti) {
		long primaryKey = moduloTrasporti.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ModuloTrasporti)) {
			return false;
		}

		ModuloTrasporti moduloTrasporti = (ModuloTrasporti)obj;

		long primaryKey = moduloTrasporti.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ModuloTrasporti> toCacheModel() {
		ModuloTrasportiCacheModel moduloTrasportiCacheModel = new ModuloTrasportiCacheModel();

		moduloTrasportiCacheModel.id_modulo_trasporti = getId_modulo_trasporti();

		moduloTrasportiCacheModel.cognome = getCognome();

		String cognome = moduloTrasportiCacheModel.cognome;

		if ((cognome != null) && (cognome.length() == 0)) {
			moduloTrasportiCacheModel.cognome = null;
		}

		moduloTrasportiCacheModel.nome = getNome();

		String nome = moduloTrasportiCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			moduloTrasportiCacheModel.nome = null;
		}

		moduloTrasportiCacheModel.codice_fiscale = getCodice_fiscale();

		String codice_fiscale = moduloTrasportiCacheModel.codice_fiscale;

		if ((codice_fiscale != null) && (codice_fiscale.length() == 0)) {
			moduloTrasportiCacheModel.codice_fiscale = null;
		}

		moduloTrasportiCacheModel.utente_inserimento = getUtente_inserimento();

		String utente_inserimento = moduloTrasportiCacheModel.utente_inserimento;

		if ((utente_inserimento != null) && (utente_inserimento.length() == 0)) {
			moduloTrasportiCacheModel.utente_inserimento = null;
		}

		Date data_inserimento = getData_inserimento();

		if (data_inserimento != null) {
			moduloTrasportiCacheModel.data_inserimento = data_inserimento.getTime();
		}
		else {
			moduloTrasportiCacheModel.data_inserimento = Long.MIN_VALUE;
		}

		moduloTrasportiCacheModel.flag_tipospesa = getFlag_tipospesa();

		String flag_tipospesa = moduloTrasportiCacheModel.flag_tipospesa;

		if ((flag_tipospesa != null) && (flag_tipospesa.length() == 0)) {
			moduloTrasportiCacheModel.flag_tipospesa = null;
		}

		moduloTrasportiCacheModel.iban = getIban();

		String iban = moduloTrasportiCacheModel.iban;

		if ((iban != null) && (iban.length() == 0)) {
			moduloTrasportiCacheModel.iban = null;
		}

		moduloTrasportiCacheModel.importo = getImporto();

		String importo = moduloTrasportiCacheModel.importo;

		if ((importo != null) && (importo.length() == 0)) {
			moduloTrasportiCacheModel.importo = null;
		}

		Date data_titolo_annuale = getData_titolo_annuale();

		if (data_titolo_annuale != null) {
			moduloTrasportiCacheModel.data_titolo_annuale = data_titolo_annuale.getTime();
		}
		else {
			moduloTrasportiCacheModel.data_titolo_annuale = Long.MIN_VALUE;
		}

		moduloTrasportiCacheModel.nr_titoli_mensili = getNr_titoli_mensili();

		String nr_titoli_mensili = moduloTrasportiCacheModel.nr_titoli_mensili;

		if ((nr_titoli_mensili != null) && (nr_titoli_mensili.length() == 0)) {
			moduloTrasportiCacheModel.nr_titoli_mensili = null;
		}

		moduloTrasportiCacheModel.figlio_nome = getFiglio_nome();

		String figlio_nome = moduloTrasportiCacheModel.figlio_nome;

		if ((figlio_nome != null) && (figlio_nome.length() == 0)) {
			moduloTrasportiCacheModel.figlio_nome = null;
		}

		moduloTrasportiCacheModel.figlio_cognome = getFiglio_cognome();

		String figlio_cognome = moduloTrasportiCacheModel.figlio_cognome;

		if ((figlio_cognome != null) && (figlio_cognome.length() == 0)) {
			moduloTrasportiCacheModel.figlio_cognome = null;
		}

		Date figlio_data_nascita = getFiglio_data_nascita();

		if (figlio_data_nascita != null) {
			moduloTrasportiCacheModel.figlio_data_nascita = figlio_data_nascita.getTime();
		}
		else {
			moduloTrasportiCacheModel.figlio_data_nascita = Long.MIN_VALUE;
		}

		moduloTrasportiCacheModel.figlio_luogo_data = getFiglio_luogo_data();

		String figlio_luogo_data = moduloTrasportiCacheModel.figlio_luogo_data;

		if ((figlio_luogo_data != null) && (figlio_luogo_data.length() == 0)) {
			moduloTrasportiCacheModel.figlio_luogo_data = null;
		}

		moduloTrasportiCacheModel.figlio_codicefiscale = getFiglio_codicefiscale();

		String figlio_codicefiscale = moduloTrasportiCacheModel.figlio_codicefiscale;

		if ((figlio_codicefiscale != null) &&
				(figlio_codicefiscale.length() == 0)) {
			moduloTrasportiCacheModel.figlio_codicefiscale = null;
		}

		moduloTrasportiCacheModel.note = getNote();

		String note = moduloTrasportiCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			moduloTrasportiCacheModel.note = null;
		}

		moduloTrasportiCacheModel.flag_inviato = getFlag_inviato();

		String flag_inviato = moduloTrasportiCacheModel.flag_inviato;

		if ((flag_inviato != null) && (flag_inviato.length() == 0)) {
			moduloTrasportiCacheModel.flag_inviato = null;
		}

		moduloTrasportiCacheModel.telefono = getTelefono();

		String telefono = moduloTrasportiCacheModel.telefono;

		if ((telefono != null) && (telefono.length() == 0)) {
			moduloTrasportiCacheModel.telefono = null;
		}

		moduloTrasportiCacheModel.allegatoUuid = getAllegatoUuid();

		String allegatoUuid = moduloTrasportiCacheModel.allegatoUuid;

		if ((allegatoUuid != null) && (allegatoUuid.length() == 0)) {
			moduloTrasportiCacheModel.allegatoUuid = null;
		}

		return moduloTrasportiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{id_modulo_trasporti=");
		sb.append(getId_modulo_trasporti());
		sb.append(", cognome=");
		sb.append(getCognome());
		sb.append(", nome=");
		sb.append(getNome());
		sb.append(", codice_fiscale=");
		sb.append(getCodice_fiscale());
		sb.append(", utente_inserimento=");
		sb.append(getUtente_inserimento());
		sb.append(", data_inserimento=");
		sb.append(getData_inserimento());
		sb.append(", flag_tipospesa=");
		sb.append(getFlag_tipospesa());
		sb.append(", iban=");
		sb.append(getIban());
		sb.append(", importo=");
		sb.append(getImporto());
		sb.append(", data_titolo_annuale=");
		sb.append(getData_titolo_annuale());
		sb.append(", nr_titoli_mensili=");
		sb.append(getNr_titoli_mensili());
		sb.append(", figlio_nome=");
		sb.append(getFiglio_nome());
		sb.append(", figlio_cognome=");
		sb.append(getFiglio_cognome());
		sb.append(", figlio_data_nascita=");
		sb.append(getFiglio_data_nascita());
		sb.append(", figlio_luogo_data=");
		sb.append(getFiglio_luogo_data());
		sb.append(", figlio_codicefiscale=");
		sb.append(getFiglio_codicefiscale());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", flag_inviato=");
		sb.append(getFlag_inviato());
		sb.append(", telefono=");
		sb.append(getTelefono());
		sb.append(", allegatoUuid=");
		sb.append(getAllegatoUuid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("service.intranet.mef.model.ModuloTrasporti");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_modulo_trasporti</column-name><column-value><![CDATA[");
		sb.append(getId_modulo_trasporti());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cognome</column-name><column-value><![CDATA[");
		sb.append(getCognome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nome</column-name><column-value><![CDATA[");
		sb.append(getNome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codice_fiscale</column-name><column-value><![CDATA[");
		sb.append(getCodice_fiscale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>utente_inserimento</column-name><column-value><![CDATA[");
		sb.append(getUtente_inserimento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_inserimento</column-name><column-value><![CDATA[");
		sb.append(getData_inserimento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag_tipospesa</column-name><column-value><![CDATA[");
		sb.append(getFlag_tipospesa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iban</column-name><column-value><![CDATA[");
		sb.append(getIban());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importo</column-name><column-value><![CDATA[");
		sb.append(getImporto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_titolo_annuale</column-name><column-value><![CDATA[");
		sb.append(getData_titolo_annuale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nr_titoli_mensili</column-name><column-value><![CDATA[");
		sb.append(getNr_titoli_mensili());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>figlio_nome</column-name><column-value><![CDATA[");
		sb.append(getFiglio_nome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>figlio_cognome</column-name><column-value><![CDATA[");
		sb.append(getFiglio_cognome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>figlio_data_nascita</column-name><column-value><![CDATA[");
		sb.append(getFiglio_data_nascita());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>figlio_luogo_data</column-name><column-value><![CDATA[");
		sb.append(getFiglio_luogo_data());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>figlio_codicefiscale</column-name><column-value><![CDATA[");
		sb.append(getFiglio_codicefiscale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag_inviato</column-name><column-value><![CDATA[");
		sb.append(getFlag_inviato());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>telefono</column-name><column-value><![CDATA[");
		sb.append(getTelefono());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allegatoUuid</column-name><column-value><![CDATA[");
		sb.append(getAllegatoUuid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ModuloTrasporti.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ModuloTrasporti.class
		};
	private long _id_modulo_trasporti;
	private String _cognome;
	private String _nome;
	private String _codice_fiscale;
	private String _utente_inserimento;
	private Date _data_inserimento;
	private String _flag_tipospesa;
	private String _iban;
	private String _importo;
	private Date _data_titolo_annuale;
	private String _nr_titoli_mensili;
	private String _figlio_nome;
	private String _figlio_cognome;
	private Date _figlio_data_nascita;
	private String _figlio_luogo_data;
	private String _figlio_codicefiscale;
	private String _note;
	private String _flag_inviato;
	private String _telefono;
	private String _allegatoUuid;
	private ModuloTrasporti _escapedModel;
}