/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package service.intranet.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import service.intranet.mef.model.LogisticaRichieste;
import service.intranet.mef.model.LogisticaRichiesteModel;
import service.intranet.mef.model.LogisticaRichiesteSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LogisticaRichieste service. Represents a row in the &quot;MFORM_LogisticaRichieste&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LogisticaRichiesteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LogisticaRichiesteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LogisticaRichiesteImpl
 * @see LogisticaRichieste
 * @see LogisticaRichiesteModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LogisticaRichiesteModelImpl extends BaseModelImpl<LogisticaRichieste>
	implements LogisticaRichiesteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a logistica richieste model instance should use the {@link LogisticaRichieste} interface instead.
	 */
	public static final String TABLE_NAME = "MFORM_LogisticaRichieste";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "oggetto", Types.VARCHAR },
			{ "utente", Types.VARCHAR },
			{ "dipartimento", Types.VARCHAR },
			{ "data_richiesta", Types.TIMESTAMP },
			{ "dettaglio_richiedente", Types.VARCHAR },
			{ "dettaglio_richieste", Types.VARCHAR },
			{ "note_gestore", Types.VARCHAR },
			{ "id_valutazione", Types.BIGINT },
			{ "id_stato", Types.BIGINT },
			{ "note", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("oggetto", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("utente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dipartimento", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_richiesta", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dettaglio_richiedente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dettaglio_richieste", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("note_gestore", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_valutazione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_stato", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MFORM_LogisticaRichieste (id_ LONG not null primary key,oggetto VARCHAR(1500) null,utente VARCHAR(500) null,dipartimento VARCHAR(75) null,data_richiesta DATE null,dettaglio_richiedente VARCHAR(2500) null,dettaglio_richieste VARCHAR(2500) null,note_gestore VARCHAR(500) null,id_valutazione LONG,id_stato LONG,note VARCHAR(1500) null)";
	public static final String TABLE_SQL_DROP = "drop table MFORM_LogisticaRichieste";
	public static final String ORDER_BY_JPQL = " ORDER BY logisticaRichieste.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MFORM_LogisticaRichieste.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(service.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.service.intranet.mef.model.LogisticaRichieste"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(service.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.service.intranet.mef.model.LogisticaRichieste"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(service.intranet.mef.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.service.intranet.mef.model.LogisticaRichieste"),
			true);
	public static final long DIPARTIMENTO_COLUMN_BITMASK = 1L;
	public static final long UTENTE_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LogisticaRichieste toModel(LogisticaRichiesteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LogisticaRichieste model = new LogisticaRichiesteImpl();

		model.setId(soapModel.getId());
		model.setOggetto(soapModel.getOggetto());
		model.setUtente(soapModel.getUtente());
		model.setDipartimento(soapModel.getDipartimento());
		model.setData_richiesta(soapModel.getData_richiesta());
		model.setDettaglio_richiedente(soapModel.getDettaglio_richiedente());
		model.setDettaglio_richieste(soapModel.getDettaglio_richieste());
		model.setNote_gestore(soapModel.getNote_gestore());
		model.setId_valutazione(soapModel.getId_valutazione());
		model.setId_stato(soapModel.getId_stato());
		model.setNote(soapModel.getNote());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LogisticaRichieste> toModels(
		LogisticaRichiesteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LogisticaRichieste> models = new ArrayList<LogisticaRichieste>(soapModels.length);

		for (LogisticaRichiesteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(service.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.service.intranet.mef.model.LogisticaRichieste"));

	public LogisticaRichiesteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LogisticaRichieste.class;
	}

	@Override
	public String getModelClassName() {
		return LogisticaRichieste.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("oggetto", getOggetto());
		attributes.put("utente", getUtente());
		attributes.put("dipartimento", getDipartimento());
		attributes.put("data_richiesta", getData_richiesta());
		attributes.put("dettaglio_richiedente", getDettaglio_richiedente());
		attributes.put("dettaglio_richieste", getDettaglio_richieste());
		attributes.put("note_gestore", getNote_gestore());
		attributes.put("id_valutazione", getId_valutazione());
		attributes.put("id_stato", getId_stato());
		attributes.put("note", getNote());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String oggetto = (String)attributes.get("oggetto");

		if (oggetto != null) {
			setOggetto(oggetto);
		}

		String utente = (String)attributes.get("utente");

		if (utente != null) {
			setUtente(utente);
		}

		String dipartimento = (String)attributes.get("dipartimento");

		if (dipartimento != null) {
			setDipartimento(dipartimento);
		}

		Date data_richiesta = (Date)attributes.get("data_richiesta");

		if (data_richiesta != null) {
			setData_richiesta(data_richiesta);
		}

		String dettaglio_richiedente = (String)attributes.get(
				"dettaglio_richiedente");

		if (dettaglio_richiedente != null) {
			setDettaglio_richiedente(dettaglio_richiedente);
		}

		String dettaglio_richieste = (String)attributes.get(
				"dettaglio_richieste");

		if (dettaglio_richieste != null) {
			setDettaglio_richieste(dettaglio_richieste);
		}

		String note_gestore = (String)attributes.get("note_gestore");

		if (note_gestore != null) {
			setNote_gestore(note_gestore);
		}

		Long id_valutazione = (Long)attributes.get("id_valutazione");

		if (id_valutazione != null) {
			setId_valutazione(id_valutazione);
		}

		Long id_stato = (Long)attributes.get("id_stato");

		if (id_stato != null) {
			setId_stato(id_stato);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getOggetto() {
		if (_oggetto == null) {
			return StringPool.BLANK;
		}
		else {
			return _oggetto;
		}
	}

	@Override
	public void setOggetto(String oggetto) {
		_oggetto = oggetto;
	}

	@JSON
	@Override
	public String getUtente() {
		if (_utente == null) {
			return StringPool.BLANK;
		}
		else {
			return _utente;
		}
	}

	@Override
	public void setUtente(String utente) {
		_columnBitmask |= UTENTE_COLUMN_BITMASK;

		if (_originalUtente == null) {
			_originalUtente = _utente;
		}

		_utente = utente;
	}

	public String getOriginalUtente() {
		return GetterUtil.getString(_originalUtente);
	}

	@JSON
	@Override
	public String getDipartimento() {
		if (_dipartimento == null) {
			return StringPool.BLANK;
		}
		else {
			return _dipartimento;
		}
	}

	@Override
	public void setDipartimento(String dipartimento) {
		_columnBitmask |= DIPARTIMENTO_COLUMN_BITMASK;

		if (_originalDipartimento == null) {
			_originalDipartimento = _dipartimento;
		}

		_dipartimento = dipartimento;
	}

	public String getOriginalDipartimento() {
		return GetterUtil.getString(_originalDipartimento);
	}

	@JSON
	@Override
	public Date getData_richiesta() {
		return _data_richiesta;
	}

	@Override
	public void setData_richiesta(Date data_richiesta) {
		_data_richiesta = data_richiesta;
	}

	@JSON
	@Override
	public String getDettaglio_richiedente() {
		if (_dettaglio_richiedente == null) {
			return StringPool.BLANK;
		}
		else {
			return _dettaglio_richiedente;
		}
	}

	@Override
	public void setDettaglio_richiedente(String dettaglio_richiedente) {
		_dettaglio_richiedente = dettaglio_richiedente;
	}

	@JSON
	@Override
	public String getDettaglio_richieste() {
		if (_dettaglio_richieste == null) {
			return StringPool.BLANK;
		}
		else {
			return _dettaglio_richieste;
		}
	}

	@Override
	public void setDettaglio_richieste(String dettaglio_richieste) {
		_dettaglio_richieste = dettaglio_richieste;
	}

	@JSON
	@Override
	public String getNote_gestore() {
		if (_note_gestore == null) {
			return StringPool.BLANK;
		}
		else {
			return _note_gestore;
		}
	}

	@Override
	public void setNote_gestore(String note_gestore) {
		_note_gestore = note_gestore;
	}

	@JSON
	@Override
	public long getId_valutazione() {
		return _id_valutazione;
	}

	@Override
	public void setId_valutazione(long id_valutazione) {
		_id_valutazione = id_valutazione;
	}

	@JSON
	@Override
	public long getId_stato() {
		return _id_stato;
	}

	@Override
	public void setId_stato(long id_stato) {
		_id_stato = id_stato;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LogisticaRichieste.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LogisticaRichieste toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LogisticaRichieste)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LogisticaRichiesteImpl logisticaRichiesteImpl = new LogisticaRichiesteImpl();

		logisticaRichiesteImpl.setId(getId());
		logisticaRichiesteImpl.setOggetto(getOggetto());
		logisticaRichiesteImpl.setUtente(getUtente());
		logisticaRichiesteImpl.setDipartimento(getDipartimento());
		logisticaRichiesteImpl.setData_richiesta(getData_richiesta());
		logisticaRichiesteImpl.setDettaglio_richiedente(getDettaglio_richiedente());
		logisticaRichiesteImpl.setDettaglio_richieste(getDettaglio_richieste());
		logisticaRichiesteImpl.setNote_gestore(getNote_gestore());
		logisticaRichiesteImpl.setId_valutazione(getId_valutazione());
		logisticaRichiesteImpl.setId_stato(getId_stato());
		logisticaRichiesteImpl.setNote(getNote());

		logisticaRichiesteImpl.resetOriginalValues();

		return logisticaRichiesteImpl;
	}

	@Override
	public int compareTo(LogisticaRichieste logisticaRichieste) {
		long primaryKey = logisticaRichieste.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LogisticaRichieste)) {
			return false;
		}

		LogisticaRichieste logisticaRichieste = (LogisticaRichieste)obj;

		long primaryKey = logisticaRichieste.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LogisticaRichiesteModelImpl logisticaRichiesteModelImpl = this;

		logisticaRichiesteModelImpl._originalUtente = logisticaRichiesteModelImpl._utente;

		logisticaRichiesteModelImpl._originalDipartimento = logisticaRichiesteModelImpl._dipartimento;

		logisticaRichiesteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LogisticaRichieste> toCacheModel() {
		LogisticaRichiesteCacheModel logisticaRichiesteCacheModel = new LogisticaRichiesteCacheModel();

		logisticaRichiesteCacheModel.id = getId();

		logisticaRichiesteCacheModel.oggetto = getOggetto();

		String oggetto = logisticaRichiesteCacheModel.oggetto;

		if ((oggetto != null) && (oggetto.length() == 0)) {
			logisticaRichiesteCacheModel.oggetto = null;
		}

		logisticaRichiesteCacheModel.utente = getUtente();

		String utente = logisticaRichiesteCacheModel.utente;

		if ((utente != null) && (utente.length() == 0)) {
			logisticaRichiesteCacheModel.utente = null;
		}

		logisticaRichiesteCacheModel.dipartimento = getDipartimento();

		String dipartimento = logisticaRichiesteCacheModel.dipartimento;

		if ((dipartimento != null) && (dipartimento.length() == 0)) {
			logisticaRichiesteCacheModel.dipartimento = null;
		}

		Date data_richiesta = getData_richiesta();

		if (data_richiesta != null) {
			logisticaRichiesteCacheModel.data_richiesta = data_richiesta.getTime();
		}
		else {
			logisticaRichiesteCacheModel.data_richiesta = Long.MIN_VALUE;
		}

		logisticaRichiesteCacheModel.dettaglio_richiedente = getDettaglio_richiedente();

		String dettaglio_richiedente = logisticaRichiesteCacheModel.dettaglio_richiedente;

		if ((dettaglio_richiedente != null) &&
				(dettaglio_richiedente.length() == 0)) {
			logisticaRichiesteCacheModel.dettaglio_richiedente = null;
		}

		logisticaRichiesteCacheModel.dettaglio_richieste = getDettaglio_richieste();

		String dettaglio_richieste = logisticaRichiesteCacheModel.dettaglio_richieste;

		if ((dettaglio_richieste != null) &&
				(dettaglio_richieste.length() == 0)) {
			logisticaRichiesteCacheModel.dettaglio_richieste = null;
		}

		logisticaRichiesteCacheModel.note_gestore = getNote_gestore();

		String note_gestore = logisticaRichiesteCacheModel.note_gestore;

		if ((note_gestore != null) && (note_gestore.length() == 0)) {
			logisticaRichiesteCacheModel.note_gestore = null;
		}

		logisticaRichiesteCacheModel.id_valutazione = getId_valutazione();

		logisticaRichiesteCacheModel.id_stato = getId_stato();

		logisticaRichiesteCacheModel.note = getNote();

		String note = logisticaRichiesteCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			logisticaRichiesteCacheModel.note = null;
		}

		return logisticaRichiesteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", oggetto=");
		sb.append(getOggetto());
		sb.append(", utente=");
		sb.append(getUtente());
		sb.append(", dipartimento=");
		sb.append(getDipartimento());
		sb.append(", data_richiesta=");
		sb.append(getData_richiesta());
		sb.append(", dettaglio_richiedente=");
		sb.append(getDettaglio_richiedente());
		sb.append(", dettaglio_richieste=");
		sb.append(getDettaglio_richieste());
		sb.append(", note_gestore=");
		sb.append(getNote_gestore());
		sb.append(", id_valutazione=");
		sb.append(getId_valutazione());
		sb.append(", id_stato=");
		sb.append(getId_stato());
		sb.append(", note=");
		sb.append(getNote());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("service.intranet.mef.model.LogisticaRichieste");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oggetto</column-name><column-value><![CDATA[");
		sb.append(getOggetto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>utente</column-name><column-value><![CDATA[");
		sb.append(getUtente());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dipartimento</column-name><column-value><![CDATA[");
		sb.append(getDipartimento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_richiesta</column-name><column-value><![CDATA[");
		sb.append(getData_richiesta());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dettaglio_richiedente</column-name><column-value><![CDATA[");
		sb.append(getDettaglio_richiedente());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dettaglio_richieste</column-name><column-value><![CDATA[");
		sb.append(getDettaglio_richieste());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note_gestore</column-name><column-value><![CDATA[");
		sb.append(getNote_gestore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_valutazione</column-name><column-value><![CDATA[");
		sb.append(getId_valutazione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_stato</column-name><column-value><![CDATA[");
		sb.append(getId_stato());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LogisticaRichieste.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LogisticaRichieste.class
		};
	private long _id;
	private String _oggetto;
	private String _utente;
	private String _originalUtente;
	private String _dipartimento;
	private String _originalDipartimento;
	private Date _data_richiesta;
	private String _dettaglio_richiedente;
	private String _dettaglio_richieste;
	private String _note_gestore;
	private long _id_valutazione;
	private long _id_stato;
	private String _note;
	private long _columnBitmask;
	private LogisticaRichieste _escapedModel;
}