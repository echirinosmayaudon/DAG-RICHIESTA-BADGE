/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package service.intranet.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import service.intranet.mef.model.BadgeRichieste;
import service.intranet.mef.model.BadgeRichiesteModel;
import service.intranet.mef.model.BadgeRichiesteSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BadgeRichieste service. Represents a row in the &quot;MFORM_BadgeRichieste&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BadgeRichiesteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BadgeRichiesteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BadgeRichiesteImpl
 * @see BadgeRichieste
 * @see BadgeRichiesteModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BadgeRichiesteModelImpl extends BaseModelImpl<BadgeRichieste>
	implements BadgeRichiesteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a badge richieste model instance should use the {@link BadgeRichieste} interface instead.
	 */
	public static final String TABLE_NAME = "MFORM_BadgeRichieste";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "utente", Types.VARCHAR },
			{ "dettaglio_richiedente", Types.VARCHAR },
			{ "cognome", Types.VARCHAR },
			{ "nome", Types.VARCHAR },
			{ "luogo_nascita", Types.VARCHAR },
			{ "data_nascita", Types.TIMESTAMP },
			{ "codice_fiscale", Types.VARCHAR },
			{ "numerobadge", Types.VARCHAR },
			{ "allegatoUuid", Types.VARCHAR },
			{ "operazione", Types.VARCHAR },
			{ "data_richiesta", Types.TIMESTAMP },
			{ "procedura", Types.VARCHAR },
			{ "disattivazione", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("utente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dettaglio_richiedente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cognome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("luogo_nascita", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_nascita", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("codice_fiscale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numerobadge", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("allegatoUuid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operazione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_richiesta", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("procedura", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("disattivazione", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table MFORM_BadgeRichieste (id_ LONG not null primary key,utente VARCHAR(75) null,dettaglio_richiedente VARCHAR(2500) null,cognome VARCHAR(75) null,nome VARCHAR(75) null,luogo_nascita VARCHAR(75) null,data_nascita DATE null,codice_fiscale VARCHAR(16) null,numerobadge VARCHAR(75) null,allegatoUuid VARCHAR(75) null,operazione VARCHAR(75) null,data_richiesta DATE null,procedura VARCHAR(200) null,disattivazione DATE null)";
	public static final String TABLE_SQL_DROP = "drop table MFORM_BadgeRichieste";
	public static final String ORDER_BY_JPQL = " ORDER BY badgeRichieste.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MFORM_BadgeRichieste.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(service.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.service.intranet.mef.model.BadgeRichieste"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(service.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.service.intranet.mef.model.BadgeRichieste"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BadgeRichieste toModel(BadgeRichiesteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BadgeRichieste model = new BadgeRichiesteImpl();

		model.setId(soapModel.getId());
		model.setUtente(soapModel.getUtente());
		model.setDettaglio_richiedente(soapModel.getDettaglio_richiedente());
		model.setCognome(soapModel.getCognome());
		model.setNome(soapModel.getNome());
		model.setLuogo_nascita(soapModel.getLuogo_nascita());
		model.setData_nascita(soapModel.getData_nascita());
		model.setCodice_fiscale(soapModel.getCodice_fiscale());
		model.setNumerobadge(soapModel.getNumerobadge());
		model.setAllegatoUuid(soapModel.getAllegatoUuid());
		model.setOperazione(soapModel.getOperazione());
		model.setData_richiesta(soapModel.getData_richiesta());
		model.setProcedura(soapModel.getProcedura());
		model.setDisattivazione(soapModel.getDisattivazione());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BadgeRichieste> toModels(BadgeRichiesteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BadgeRichieste> models = new ArrayList<BadgeRichieste>(soapModels.length);

		for (BadgeRichiesteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(service.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.service.intranet.mef.model.BadgeRichieste"));

	public BadgeRichiesteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BadgeRichieste.class;
	}

	@Override
	public String getModelClassName() {
		return BadgeRichieste.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("utente", getUtente());
		attributes.put("dettaglio_richiedente", getDettaglio_richiedente());
		attributes.put("cognome", getCognome());
		attributes.put("nome", getNome());
		attributes.put("luogo_nascita", getLuogo_nascita());
		attributes.put("data_nascita", getData_nascita());
		attributes.put("codice_fiscale", getCodice_fiscale());
		attributes.put("numerobadge", getNumerobadge());
		attributes.put("allegatoUuid", getAllegatoUuid());
		attributes.put("operazione", getOperazione());
		attributes.put("data_richiesta", getData_richiesta());
		attributes.put("procedura", getProcedura());
		attributes.put("disattivazione", getDisattivazione());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String utente = (String)attributes.get("utente");

		if (utente != null) {
			setUtente(utente);
		}

		String dettaglio_richiedente = (String)attributes.get(
				"dettaglio_richiedente");

		if (dettaglio_richiedente != null) {
			setDettaglio_richiedente(dettaglio_richiedente);
		}

		String cognome = (String)attributes.get("cognome");

		if (cognome != null) {
			setCognome(cognome);
		}

		String nome = (String)attributes.get("nome");

		if (nome != null) {
			setNome(nome);
		}

		String luogo_nascita = (String)attributes.get("luogo_nascita");

		if (luogo_nascita != null) {
			setLuogo_nascita(luogo_nascita);
		}

		Date data_nascita = (Date)attributes.get("data_nascita");

		if (data_nascita != null) {
			setData_nascita(data_nascita);
		}

		String codice_fiscale = (String)attributes.get("codice_fiscale");

		if (codice_fiscale != null) {
			setCodice_fiscale(codice_fiscale);
		}

		String numerobadge = (String)attributes.get("numerobadge");

		if (numerobadge != null) {
			setNumerobadge(numerobadge);
		}

		String allegatoUuid = (String)attributes.get("allegatoUuid");

		if (allegatoUuid != null) {
			setAllegatoUuid(allegatoUuid);
		}

		String operazione = (String)attributes.get("operazione");

		if (operazione != null) {
			setOperazione(operazione);
		}

		Date data_richiesta = (Date)attributes.get("data_richiesta");

		if (data_richiesta != null) {
			setData_richiesta(data_richiesta);
		}

		String procedura = (String)attributes.get("procedura");

		if (procedura != null) {
			setProcedura(procedura);
		}

		Date disattivazione = (Date)attributes.get("disattivazione");

		if (disattivazione != null) {
			setDisattivazione(disattivazione);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getUtente() {
		if (_utente == null) {
			return StringPool.BLANK;
		}
		else {
			return _utente;
		}
	}

	@Override
	public void setUtente(String utente) {
		_utente = utente;
	}

	@JSON
	@Override
	public String getDettaglio_richiedente() {
		if (_dettaglio_richiedente == null) {
			return StringPool.BLANK;
		}
		else {
			return _dettaglio_richiedente;
		}
	}

	@Override
	public void setDettaglio_richiedente(String dettaglio_richiedente) {
		_dettaglio_richiedente = dettaglio_richiedente;
	}

	@JSON
	@Override
	public String getCognome() {
		if (_cognome == null) {
			return StringPool.BLANK;
		}
		else {
			return _cognome;
		}
	}

	@Override
	public void setCognome(String cognome) {
		_cognome = cognome;
	}

	@JSON
	@Override
	public String getNome() {
		if (_nome == null) {
			return StringPool.BLANK;
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_nome = nome;
	}

	@JSON
	@Override
	public String getLuogo_nascita() {
		if (_luogo_nascita == null) {
			return StringPool.BLANK;
		}
		else {
			return _luogo_nascita;
		}
	}

	@Override
	public void setLuogo_nascita(String luogo_nascita) {
		_luogo_nascita = luogo_nascita;
	}

	@JSON
	@Override
	public Date getData_nascita() {
		return _data_nascita;
	}

	@Override
	public void setData_nascita(Date data_nascita) {
		_data_nascita = data_nascita;
	}

	@JSON
	@Override
	public String getCodice_fiscale() {
		if (_codice_fiscale == null) {
			return StringPool.BLANK;
		}
		else {
			return _codice_fiscale;
		}
	}

	@Override
	public void setCodice_fiscale(String codice_fiscale) {
		_codice_fiscale = codice_fiscale;
	}

	@JSON
	@Override
	public String getNumerobadge() {
		if (_numerobadge == null) {
			return StringPool.BLANK;
		}
		else {
			return _numerobadge;
		}
	}

	@Override
	public void setNumerobadge(String numerobadge) {
		_numerobadge = numerobadge;
	}

	@JSON
	@Override
	public String getAllegatoUuid() {
		if (_allegatoUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _allegatoUuid;
		}
	}

	@Override
	public void setAllegatoUuid(String allegatoUuid) {
		_allegatoUuid = allegatoUuid;
	}

	@JSON
	@Override
	public String getOperazione() {
		if (_operazione == null) {
			return StringPool.BLANK;
		}
		else {
			return _operazione;
		}
	}

	@Override
	public void setOperazione(String operazione) {
		_operazione = operazione;
	}

	@JSON
	@Override
	public Date getData_richiesta() {
		return _data_richiesta;
	}

	@Override
	public void setData_richiesta(Date data_richiesta) {
		_data_richiesta = data_richiesta;
	}

	@JSON
	@Override
	public String getProcedura() {
		if (_procedura == null) {
			return StringPool.BLANK;
		}
		else {
			return _procedura;
		}
	}

	@Override
	public void setProcedura(String procedura) {
		_procedura = procedura;
	}

	@JSON
	@Override
	public Date getDisattivazione() {
		return _disattivazione;
	}

	@Override
	public void setDisattivazione(Date disattivazione) {
		_disattivazione = disattivazione;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BadgeRichieste.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BadgeRichieste toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BadgeRichieste)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BadgeRichiesteImpl badgeRichiesteImpl = new BadgeRichiesteImpl();

		badgeRichiesteImpl.setId(getId());
		badgeRichiesteImpl.setUtente(getUtente());
		badgeRichiesteImpl.setDettaglio_richiedente(getDettaglio_richiedente());
		badgeRichiesteImpl.setCognome(getCognome());
		badgeRichiesteImpl.setNome(getNome());
		badgeRichiesteImpl.setLuogo_nascita(getLuogo_nascita());
		badgeRichiesteImpl.setData_nascita(getData_nascita());
		badgeRichiesteImpl.setCodice_fiscale(getCodice_fiscale());
		badgeRichiesteImpl.setNumerobadge(getNumerobadge());
		badgeRichiesteImpl.setAllegatoUuid(getAllegatoUuid());
		badgeRichiesteImpl.setOperazione(getOperazione());
		badgeRichiesteImpl.setData_richiesta(getData_richiesta());
		badgeRichiesteImpl.setProcedura(getProcedura());
		badgeRichiesteImpl.setDisattivazione(getDisattivazione());

		badgeRichiesteImpl.resetOriginalValues();

		return badgeRichiesteImpl;
	}

	@Override
	public int compareTo(BadgeRichieste badgeRichieste) {
		long primaryKey = badgeRichieste.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BadgeRichieste)) {
			return false;
		}

		BadgeRichieste badgeRichieste = (BadgeRichieste)obj;

		long primaryKey = badgeRichieste.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<BadgeRichieste> toCacheModel() {
		BadgeRichiesteCacheModel badgeRichiesteCacheModel = new BadgeRichiesteCacheModel();

		badgeRichiesteCacheModel.id = getId();

		badgeRichiesteCacheModel.utente = getUtente();

		String utente = badgeRichiesteCacheModel.utente;

		if ((utente != null) && (utente.length() == 0)) {
			badgeRichiesteCacheModel.utente = null;
		}

		badgeRichiesteCacheModel.dettaglio_richiedente = getDettaglio_richiedente();

		String dettaglio_richiedente = badgeRichiesteCacheModel.dettaglio_richiedente;

		if ((dettaglio_richiedente != null) &&
				(dettaglio_richiedente.length() == 0)) {
			badgeRichiesteCacheModel.dettaglio_richiedente = null;
		}

		badgeRichiesteCacheModel.cognome = getCognome();

		String cognome = badgeRichiesteCacheModel.cognome;

		if ((cognome != null) && (cognome.length() == 0)) {
			badgeRichiesteCacheModel.cognome = null;
		}

		badgeRichiesteCacheModel.nome = getNome();

		String nome = badgeRichiesteCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			badgeRichiesteCacheModel.nome = null;
		}

		badgeRichiesteCacheModel.luogo_nascita = getLuogo_nascita();

		String luogo_nascita = badgeRichiesteCacheModel.luogo_nascita;

		if ((luogo_nascita != null) && (luogo_nascita.length() == 0)) {
			badgeRichiesteCacheModel.luogo_nascita = null;
		}

		Date data_nascita = getData_nascita();

		if (data_nascita != null) {
			badgeRichiesteCacheModel.data_nascita = data_nascita.getTime();
		}
		else {
			badgeRichiesteCacheModel.data_nascita = Long.MIN_VALUE;
		}

		badgeRichiesteCacheModel.codice_fiscale = getCodice_fiscale();

		String codice_fiscale = badgeRichiesteCacheModel.codice_fiscale;

		if ((codice_fiscale != null) && (codice_fiscale.length() == 0)) {
			badgeRichiesteCacheModel.codice_fiscale = null;
		}

		badgeRichiesteCacheModel.numerobadge = getNumerobadge();

		String numerobadge = badgeRichiesteCacheModel.numerobadge;

		if ((numerobadge != null) && (numerobadge.length() == 0)) {
			badgeRichiesteCacheModel.numerobadge = null;
		}

		badgeRichiesteCacheModel.allegatoUuid = getAllegatoUuid();

		String allegatoUuid = badgeRichiesteCacheModel.allegatoUuid;

		if ((allegatoUuid != null) && (allegatoUuid.length() == 0)) {
			badgeRichiesteCacheModel.allegatoUuid = null;
		}

		badgeRichiesteCacheModel.operazione = getOperazione();

		String operazione = badgeRichiesteCacheModel.operazione;

		if ((operazione != null) && (operazione.length() == 0)) {
			badgeRichiesteCacheModel.operazione = null;
		}

		Date data_richiesta = getData_richiesta();

		if (data_richiesta != null) {
			badgeRichiesteCacheModel.data_richiesta = data_richiesta.getTime();
		}
		else {
			badgeRichiesteCacheModel.data_richiesta = Long.MIN_VALUE;
		}

		badgeRichiesteCacheModel.procedura = getProcedura();

		String procedura = badgeRichiesteCacheModel.procedura;

		if ((procedura != null) && (procedura.length() == 0)) {
			badgeRichiesteCacheModel.procedura = null;
		}

		Date disattivazione = getDisattivazione();

		if (disattivazione != null) {
			badgeRichiesteCacheModel.disattivazione = disattivazione.getTime();
		}
		else {
			badgeRichiesteCacheModel.disattivazione = Long.MIN_VALUE;
		}

		return badgeRichiesteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", utente=");
		sb.append(getUtente());
		sb.append(", dettaglio_richiedente=");
		sb.append(getDettaglio_richiedente());
		sb.append(", cognome=");
		sb.append(getCognome());
		sb.append(", nome=");
		sb.append(getNome());
		sb.append(", luogo_nascita=");
		sb.append(getLuogo_nascita());
		sb.append(", data_nascita=");
		sb.append(getData_nascita());
		sb.append(", codice_fiscale=");
		sb.append(getCodice_fiscale());
		sb.append(", numerobadge=");
		sb.append(getNumerobadge());
		sb.append(", allegatoUuid=");
		sb.append(getAllegatoUuid());
		sb.append(", operazione=");
		sb.append(getOperazione());
		sb.append(", data_richiesta=");
		sb.append(getData_richiesta());
		sb.append(", procedura=");
		sb.append(getProcedura());
		sb.append(", disattivazione=");
		sb.append(getDisattivazione());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("service.intranet.mef.model.BadgeRichieste");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>utente</column-name><column-value><![CDATA[");
		sb.append(getUtente());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dettaglio_richiedente</column-name><column-value><![CDATA[");
		sb.append(getDettaglio_richiedente());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cognome</column-name><column-value><![CDATA[");
		sb.append(getCognome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nome</column-name><column-value><![CDATA[");
		sb.append(getNome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>luogo_nascita</column-name><column-value><![CDATA[");
		sb.append(getLuogo_nascita());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_nascita</column-name><column-value><![CDATA[");
		sb.append(getData_nascita());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codice_fiscale</column-name><column-value><![CDATA[");
		sb.append(getCodice_fiscale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numerobadge</column-name><column-value><![CDATA[");
		sb.append(getNumerobadge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allegatoUuid</column-name><column-value><![CDATA[");
		sb.append(getAllegatoUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>operazione</column-name><column-value><![CDATA[");
		sb.append(getOperazione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_richiesta</column-name><column-value><![CDATA[");
		sb.append(getData_richiesta());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>procedura</column-name><column-value><![CDATA[");
		sb.append(getProcedura());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disattivazione</column-name><column-value><![CDATA[");
		sb.append(getDisattivazione());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = BadgeRichieste.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			BadgeRichieste.class
		};
	private long _id;
	private String _utente;
	private String _dettaglio_richiedente;
	private String _cognome;
	private String _nome;
	private String _luogo_nascita;
	private Date _data_nascita;
	private String _codice_fiscale;
	private String _numerobadge;
	private String _allegatoUuid;
	private String _operazione;
	private Date _data_richiesta;
	private String _procedura;
	private Date _disattivazione;
	private BadgeRichieste _escapedModel;
}