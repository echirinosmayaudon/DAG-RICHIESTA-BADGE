/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package service.intranet.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import service.intranet.mef.model.RichiestaPubblicSiti;
import service.intranet.mef.model.RichiestaPubblicSitiModel;
import service.intranet.mef.model.RichiestaPubblicSitiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RichiestaPubblicSiti service. Represents a row in the &quot;MFORM_RichiestaPubblicSiti&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RichiestaPubblicSitiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RichiestaPubblicSitiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RichiestaPubblicSitiImpl
 * @see RichiestaPubblicSiti
 * @see RichiestaPubblicSitiModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RichiestaPubblicSitiModelImpl extends BaseModelImpl<RichiestaPubblicSiti>
	implements RichiestaPubblicSitiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a richiesta pubblic siti model instance should use the {@link RichiestaPubblicSiti} interface instead.
	 */
	public static final String TABLE_NAME = "MFORM_RichiestaPubblicSiti";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_rich_pubblic", Types.BIGINT },
			{ "dati_richiedente", Types.VARCHAR },
			{ "dati_docum", Types.VARCHAR },
			{ "titolo", Types.VARCHAR },
			{ "sottotitolo", Types.VARCHAR },
			{ "novita_abstract", Types.VARCHAR },
			{ "note_riferim", Types.VARCHAR },
			{ "dati_stampa_carta", Types.VARCHAR },
			{ "dati_altro", Types.VARCHAR },
			{ "dati_autorizzaz", Types.VARCHAR },
			{ "note_autorizzaz", Types.VARCHAR },
			{ "lista_allegati", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_rich_pubblic", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dati_richiedente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dati_docum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("titolo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sottotitolo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("novita_abstract", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("note_riferim", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dati_stampa_carta", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dati_altro", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dati_autorizzaz", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("note_autorizzaz", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lista_allegati", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MFORM_RichiestaPubblicSiti (id_rich_pubblic LONG not null primary key,dati_richiedente VARCHAR(255) null,dati_docum VARCHAR(255) null,titolo VARCHAR(255) null,sottotitolo VARCHAR(255) null,novita_abstract VARCHAR(3500) null,note_riferim VARCHAR(2000) null,dati_stampa_carta VARCHAR(75) null,dati_altro VARCHAR(75) null,dati_autorizzaz VARCHAR(75) null,note_autorizzaz VARCHAR(500) null,lista_allegati VARCHAR(255) null)";
	public static final String TABLE_SQL_DROP = "drop table MFORM_RichiestaPubblicSiti";
	public static final String ORDER_BY_JPQL = " ORDER BY richiestaPubblicSiti.id_rich_pubblic ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MFORM_RichiestaPubblicSiti.id_rich_pubblic ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(service.intranet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.service.intranet.mef.model.RichiestaPubblicSiti"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(service.intranet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.service.intranet.mef.model.RichiestaPubblicSiti"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RichiestaPubblicSiti toModel(
		RichiestaPubblicSitiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RichiestaPubblicSiti model = new RichiestaPubblicSitiImpl();

		model.setId_rich_pubblic(soapModel.getId_rich_pubblic());
		model.setDati_richiedente(soapModel.getDati_richiedente());
		model.setDati_docum(soapModel.getDati_docum());
		model.setTitolo(soapModel.getTitolo());
		model.setSottotitolo(soapModel.getSottotitolo());
		model.setNovita_abstract(soapModel.getNovita_abstract());
		model.setNote_riferim(soapModel.getNote_riferim());
		model.setDati_stampa_carta(soapModel.getDati_stampa_carta());
		model.setDati_altro(soapModel.getDati_altro());
		model.setDati_autorizzaz(soapModel.getDati_autorizzaz());
		model.setNote_autorizzaz(soapModel.getNote_autorizzaz());
		model.setLista_allegati(soapModel.getLista_allegati());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RichiestaPubblicSiti> toModels(
		RichiestaPubblicSitiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RichiestaPubblicSiti> models = new ArrayList<RichiestaPubblicSiti>(soapModels.length);

		for (RichiestaPubblicSitiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(service.intranet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.service.intranet.mef.model.RichiestaPubblicSiti"));

	public RichiestaPubblicSitiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_rich_pubblic;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_rich_pubblic(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_rich_pubblic;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RichiestaPubblicSiti.class;
	}

	@Override
	public String getModelClassName() {
		return RichiestaPubblicSiti.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_rich_pubblic", getId_rich_pubblic());
		attributes.put("dati_richiedente", getDati_richiedente());
		attributes.put("dati_docum", getDati_docum());
		attributes.put("titolo", getTitolo());
		attributes.put("sottotitolo", getSottotitolo());
		attributes.put("novita_abstract", getNovita_abstract());
		attributes.put("note_riferim", getNote_riferim());
		attributes.put("dati_stampa_carta", getDati_stampa_carta());
		attributes.put("dati_altro", getDati_altro());
		attributes.put("dati_autorizzaz", getDati_autorizzaz());
		attributes.put("note_autorizzaz", getNote_autorizzaz());
		attributes.put("lista_allegati", getLista_allegati());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_rich_pubblic = (Long)attributes.get("id_rich_pubblic");

		if (id_rich_pubblic != null) {
			setId_rich_pubblic(id_rich_pubblic);
		}

		String dati_richiedente = (String)attributes.get("dati_richiedente");

		if (dati_richiedente != null) {
			setDati_richiedente(dati_richiedente);
		}

		String dati_docum = (String)attributes.get("dati_docum");

		if (dati_docum != null) {
			setDati_docum(dati_docum);
		}

		String titolo = (String)attributes.get("titolo");

		if (titolo != null) {
			setTitolo(titolo);
		}

		String sottotitolo = (String)attributes.get("sottotitolo");

		if (sottotitolo != null) {
			setSottotitolo(sottotitolo);
		}

		String novita_abstract = (String)attributes.get("novita_abstract");

		if (novita_abstract != null) {
			setNovita_abstract(novita_abstract);
		}

		String note_riferim = (String)attributes.get("note_riferim");

		if (note_riferim != null) {
			setNote_riferim(note_riferim);
		}

		String dati_stampa_carta = (String)attributes.get("dati_stampa_carta");

		if (dati_stampa_carta != null) {
			setDati_stampa_carta(dati_stampa_carta);
		}

		String dati_altro = (String)attributes.get("dati_altro");

		if (dati_altro != null) {
			setDati_altro(dati_altro);
		}

		String dati_autorizzaz = (String)attributes.get("dati_autorizzaz");

		if (dati_autorizzaz != null) {
			setDati_autorizzaz(dati_autorizzaz);
		}

		String note_autorizzaz = (String)attributes.get("note_autorizzaz");

		if (note_autorizzaz != null) {
			setNote_autorizzaz(note_autorizzaz);
		}

		String lista_allegati = (String)attributes.get("lista_allegati");

		if (lista_allegati != null) {
			setLista_allegati(lista_allegati);
		}
	}

	@JSON
	@Override
	public long getId_rich_pubblic() {
		return _id_rich_pubblic;
	}

	@Override
	public void setId_rich_pubblic(long id_rich_pubblic) {
		_id_rich_pubblic = id_rich_pubblic;
	}

	@JSON
	@Override
	public String getDati_richiedente() {
		if (_dati_richiedente == null) {
			return StringPool.BLANK;
		}
		else {
			return _dati_richiedente;
		}
	}

	@Override
	public void setDati_richiedente(String dati_richiedente) {
		_dati_richiedente = dati_richiedente;
	}

	@JSON
	@Override
	public String getDati_docum() {
		if (_dati_docum == null) {
			return StringPool.BLANK;
		}
		else {
			return _dati_docum;
		}
	}

	@Override
	public void setDati_docum(String dati_docum) {
		_dati_docum = dati_docum;
	}

	@JSON
	@Override
	public String getTitolo() {
		if (_titolo == null) {
			return StringPool.BLANK;
		}
		else {
			return _titolo;
		}
	}

	@Override
	public void setTitolo(String titolo) {
		_titolo = titolo;
	}

	@JSON
	@Override
	public String getSottotitolo() {
		if (_sottotitolo == null) {
			return StringPool.BLANK;
		}
		else {
			return _sottotitolo;
		}
	}

	@Override
	public void setSottotitolo(String sottotitolo) {
		_sottotitolo = sottotitolo;
	}

	@JSON
	@Override
	public String getNovita_abstract() {
		if (_novita_abstract == null) {
			return StringPool.BLANK;
		}
		else {
			return _novita_abstract;
		}
	}

	@Override
	public void setNovita_abstract(String novita_abstract) {
		_novita_abstract = novita_abstract;
	}

	@JSON
	@Override
	public String getNote_riferim() {
		if (_note_riferim == null) {
			return StringPool.BLANK;
		}
		else {
			return _note_riferim;
		}
	}

	@Override
	public void setNote_riferim(String note_riferim) {
		_note_riferim = note_riferim;
	}

	@JSON
	@Override
	public String getDati_stampa_carta() {
		if (_dati_stampa_carta == null) {
			return StringPool.BLANK;
		}
		else {
			return _dati_stampa_carta;
		}
	}

	@Override
	public void setDati_stampa_carta(String dati_stampa_carta) {
		_dati_stampa_carta = dati_stampa_carta;
	}

	@JSON
	@Override
	public String getDati_altro() {
		if (_dati_altro == null) {
			return StringPool.BLANK;
		}
		else {
			return _dati_altro;
		}
	}

	@Override
	public void setDati_altro(String dati_altro) {
		_dati_altro = dati_altro;
	}

	@JSON
	@Override
	public String getDati_autorizzaz() {
		if (_dati_autorizzaz == null) {
			return StringPool.BLANK;
		}
		else {
			return _dati_autorizzaz;
		}
	}

	@Override
	public void setDati_autorizzaz(String dati_autorizzaz) {
		_dati_autorizzaz = dati_autorizzaz;
	}

	@JSON
	@Override
	public String getNote_autorizzaz() {
		if (_note_autorizzaz == null) {
			return StringPool.BLANK;
		}
		else {
			return _note_autorizzaz;
		}
	}

	@Override
	public void setNote_autorizzaz(String note_autorizzaz) {
		_note_autorizzaz = note_autorizzaz;
	}

	@JSON
	@Override
	public String getLista_allegati() {
		if (_lista_allegati == null) {
			return StringPool.BLANK;
		}
		else {
			return _lista_allegati;
		}
	}

	@Override
	public void setLista_allegati(String lista_allegati) {
		_lista_allegati = lista_allegati;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RichiestaPubblicSiti.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RichiestaPubblicSiti toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RichiestaPubblicSiti)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RichiestaPubblicSitiImpl richiestaPubblicSitiImpl = new RichiestaPubblicSitiImpl();

		richiestaPubblicSitiImpl.setId_rich_pubblic(getId_rich_pubblic());
		richiestaPubblicSitiImpl.setDati_richiedente(getDati_richiedente());
		richiestaPubblicSitiImpl.setDati_docum(getDati_docum());
		richiestaPubblicSitiImpl.setTitolo(getTitolo());
		richiestaPubblicSitiImpl.setSottotitolo(getSottotitolo());
		richiestaPubblicSitiImpl.setNovita_abstract(getNovita_abstract());
		richiestaPubblicSitiImpl.setNote_riferim(getNote_riferim());
		richiestaPubblicSitiImpl.setDati_stampa_carta(getDati_stampa_carta());
		richiestaPubblicSitiImpl.setDati_altro(getDati_altro());
		richiestaPubblicSitiImpl.setDati_autorizzaz(getDati_autorizzaz());
		richiestaPubblicSitiImpl.setNote_autorizzaz(getNote_autorizzaz());
		richiestaPubblicSitiImpl.setLista_allegati(getLista_allegati());

		richiestaPubblicSitiImpl.resetOriginalValues();

		return richiestaPubblicSitiImpl;
	}

	@Override
	public int compareTo(RichiestaPubblicSiti richiestaPubblicSiti) {
		long primaryKey = richiestaPubblicSiti.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RichiestaPubblicSiti)) {
			return false;
		}

		RichiestaPubblicSiti richiestaPubblicSiti = (RichiestaPubblicSiti)obj;

		long primaryKey = richiestaPubblicSiti.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<RichiestaPubblicSiti> toCacheModel() {
		RichiestaPubblicSitiCacheModel richiestaPubblicSitiCacheModel = new RichiestaPubblicSitiCacheModel();

		richiestaPubblicSitiCacheModel.id_rich_pubblic = getId_rich_pubblic();

		richiestaPubblicSitiCacheModel.dati_richiedente = getDati_richiedente();

		String dati_richiedente = richiestaPubblicSitiCacheModel.dati_richiedente;

		if ((dati_richiedente != null) && (dati_richiedente.length() == 0)) {
			richiestaPubblicSitiCacheModel.dati_richiedente = null;
		}

		richiestaPubblicSitiCacheModel.dati_docum = getDati_docum();

		String dati_docum = richiestaPubblicSitiCacheModel.dati_docum;

		if ((dati_docum != null) && (dati_docum.length() == 0)) {
			richiestaPubblicSitiCacheModel.dati_docum = null;
		}

		richiestaPubblicSitiCacheModel.titolo = getTitolo();

		String titolo = richiestaPubblicSitiCacheModel.titolo;

		if ((titolo != null) && (titolo.length() == 0)) {
			richiestaPubblicSitiCacheModel.titolo = null;
		}

		richiestaPubblicSitiCacheModel.sottotitolo = getSottotitolo();

		String sottotitolo = richiestaPubblicSitiCacheModel.sottotitolo;

		if ((sottotitolo != null) && (sottotitolo.length() == 0)) {
			richiestaPubblicSitiCacheModel.sottotitolo = null;
		}

		richiestaPubblicSitiCacheModel.novita_abstract = getNovita_abstract();

		String novita_abstract = richiestaPubblicSitiCacheModel.novita_abstract;

		if ((novita_abstract != null) && (novita_abstract.length() == 0)) {
			richiestaPubblicSitiCacheModel.novita_abstract = null;
		}

		richiestaPubblicSitiCacheModel.note_riferim = getNote_riferim();

		String note_riferim = richiestaPubblicSitiCacheModel.note_riferim;

		if ((note_riferim != null) && (note_riferim.length() == 0)) {
			richiestaPubblicSitiCacheModel.note_riferim = null;
		}

		richiestaPubblicSitiCacheModel.dati_stampa_carta = getDati_stampa_carta();

		String dati_stampa_carta = richiestaPubblicSitiCacheModel.dati_stampa_carta;

		if ((dati_stampa_carta != null) && (dati_stampa_carta.length() == 0)) {
			richiestaPubblicSitiCacheModel.dati_stampa_carta = null;
		}

		richiestaPubblicSitiCacheModel.dati_altro = getDati_altro();

		String dati_altro = richiestaPubblicSitiCacheModel.dati_altro;

		if ((dati_altro != null) && (dati_altro.length() == 0)) {
			richiestaPubblicSitiCacheModel.dati_altro = null;
		}

		richiestaPubblicSitiCacheModel.dati_autorizzaz = getDati_autorizzaz();

		String dati_autorizzaz = richiestaPubblicSitiCacheModel.dati_autorizzaz;

		if ((dati_autorizzaz != null) && (dati_autorizzaz.length() == 0)) {
			richiestaPubblicSitiCacheModel.dati_autorizzaz = null;
		}

		richiestaPubblicSitiCacheModel.note_autorizzaz = getNote_autorizzaz();

		String note_autorizzaz = richiestaPubblicSitiCacheModel.note_autorizzaz;

		if ((note_autorizzaz != null) && (note_autorizzaz.length() == 0)) {
			richiestaPubblicSitiCacheModel.note_autorizzaz = null;
		}

		richiestaPubblicSitiCacheModel.lista_allegati = getLista_allegati();

		String lista_allegati = richiestaPubblicSitiCacheModel.lista_allegati;

		if ((lista_allegati != null) && (lista_allegati.length() == 0)) {
			richiestaPubblicSitiCacheModel.lista_allegati = null;
		}

		return richiestaPubblicSitiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id_rich_pubblic=");
		sb.append(getId_rich_pubblic());
		sb.append(", dati_richiedente=");
		sb.append(getDati_richiedente());
		sb.append(", dati_docum=");
		sb.append(getDati_docum());
		sb.append(", titolo=");
		sb.append(getTitolo());
		sb.append(", sottotitolo=");
		sb.append(getSottotitolo());
		sb.append(", novita_abstract=");
		sb.append(getNovita_abstract());
		sb.append(", note_riferim=");
		sb.append(getNote_riferim());
		sb.append(", dati_stampa_carta=");
		sb.append(getDati_stampa_carta());
		sb.append(", dati_altro=");
		sb.append(getDati_altro());
		sb.append(", dati_autorizzaz=");
		sb.append(getDati_autorizzaz());
		sb.append(", note_autorizzaz=");
		sb.append(getNote_autorizzaz());
		sb.append(", lista_allegati=");
		sb.append(getLista_allegati());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("service.intranet.mef.model.RichiestaPubblicSiti");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_rich_pubblic</column-name><column-value><![CDATA[");
		sb.append(getId_rich_pubblic());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dati_richiedente</column-name><column-value><![CDATA[");
		sb.append(getDati_richiedente());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dati_docum</column-name><column-value><![CDATA[");
		sb.append(getDati_docum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titolo</column-name><column-value><![CDATA[");
		sb.append(getTitolo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sottotitolo</column-name><column-value><![CDATA[");
		sb.append(getSottotitolo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>novita_abstract</column-name><column-value><![CDATA[");
		sb.append(getNovita_abstract());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note_riferim</column-name><column-value><![CDATA[");
		sb.append(getNote_riferim());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dati_stampa_carta</column-name><column-value><![CDATA[");
		sb.append(getDati_stampa_carta());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dati_altro</column-name><column-value><![CDATA[");
		sb.append(getDati_altro());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dati_autorizzaz</column-name><column-value><![CDATA[");
		sb.append(getDati_autorizzaz());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note_autorizzaz</column-name><column-value><![CDATA[");
		sb.append(getNote_autorizzaz());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lista_allegati</column-name><column-value><![CDATA[");
		sb.append(getLista_allegati());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RichiestaPubblicSiti.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RichiestaPubblicSiti.class
		};
	private long _id_rich_pubblic;
	private String _dati_richiedente;
	private String _dati_docum;
	private String _titolo;
	private String _sottotitolo;
	private String _novita_abstract;
	private String _note_riferim;
	private String _dati_stampa_carta;
	private String _dati_altro;
	private String _dati_autorizzaz;
	private String _note_autorizzaz;
	private String _lista_allegati;
	private RichiestaPubblicSiti _escapedModel;
}