/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.daily.punching.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.daily.punching.model.DailyPunching;
import com.intranet.mef.daily.punching.model.DailyPunchingModel;
import com.intranet.mef.daily.punching.model.DailyPunchingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DailyPunching service. Represents a row in the &quot;LF_TIMBRATURE_GIORNO&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DailyPunchingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DailyPunchingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DailyPunchingImpl
 * @see DailyPunching
 * @see DailyPunchingModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DailyPunchingModelImpl extends BaseModelImpl<DailyPunching>
	implements DailyPunchingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a daily punching model instance should use the {@link DailyPunching} interface instead.
	 */
	public static final String TABLE_NAME = "LF_TIMBRATURE_GIORNO";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CUSTOM_KEY", Types.VARCHAR },
			{ "CODICE", Types.BIGINT },
			{ "TIMBRATURA", Types.INTEGER },
			{ "VERSO_TIMBRATURA", Types.VARCHAR },
			{ "GIUSTIFICATIVO", Types.VARCHAR },
			{ "TERMINALE", Types.VARCHAR },
			{ "ORE", Types.INTEGER },
			{ "MINUTI", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CUSTOM_KEY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CODICE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("TIMBRATURA", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("VERSO_TIMBRATURA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GIUSTIFICATIVO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TERMINALE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ORE", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MINUTI", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LF_TIMBRATURE_GIORNO (CUSTOM_KEY VARCHAR(75) not null primary key,CODICE LONG,TIMBRATURA INTEGER,VERSO_TIMBRATURA VARCHAR(75) null,GIUSTIFICATIVO VARCHAR(75) null,TERMINALE VARCHAR(75) null,ORE INTEGER,MINUTI VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LF_TIMBRATURE_GIORNO";
	public static final String ORDER_BY_JPQL = " ORDER BY dailyPunching.custom_key ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LF_TIMBRATURE_GIORNO.CUSTOM_KEY ASC";
	public static final String DATA_SOURCE = "timbrature";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.daily.punching.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.intranet.mef.daily.punching.model.DailyPunching"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.intranet.mef.daily.punching.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.intranet.mef.daily.punching.model.DailyPunching"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.intranet.mef.daily.punching.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.intranet.mef.daily.punching.model.DailyPunching"),
			true);
	public static final long PERSONID_COLUMN_BITMASK = 1L;
	public static final long CUSTOM_KEY_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DailyPunching toModel(DailyPunchingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DailyPunching model = new DailyPunchingImpl();

		model.setCustom_key(soapModel.getCustom_key());
		model.setPersonId(soapModel.getPersonId());
		model.setPunchingId(soapModel.getPunchingId());
		model.setDirection(soapModel.getDirection());
		model.setVoucher(soapModel.getVoucher());
		model.setTerminal(soapModel.getTerminal());
		model.setHours(soapModel.getHours());
		model.setMinute(soapModel.getMinute());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DailyPunching> toModels(DailyPunchingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DailyPunching> models = new ArrayList<DailyPunching>(soapModels.length);

		for (DailyPunchingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.intranet.mef.daily.punching.service.util.PropsUtil.get(
				"lock.expiration.time.com.intranet.mef.daily.punching.model.DailyPunching"));

	public DailyPunchingModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _custom_key;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCustom_key(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _custom_key;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DailyPunching.class;
	}

	@Override
	public String getModelClassName() {
		return DailyPunching.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("custom_key", getCustom_key());
		attributes.put("personId", getPersonId());
		attributes.put("punchingId", getPunchingId());
		attributes.put("direction", getDirection());
		attributes.put("voucher", getVoucher());
		attributes.put("terminal", getTerminal());
		attributes.put("hours", getHours());
		attributes.put("minute", getMinute());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String custom_key = (String)attributes.get("custom_key");

		if (custom_key != null) {
			setCustom_key(custom_key);
		}

		Long personId = (Long)attributes.get("personId");

		if (personId != null) {
			setPersonId(personId);
		}

		Integer punchingId = (Integer)attributes.get("punchingId");

		if (punchingId != null) {
			setPunchingId(punchingId);
		}

		String direction = (String)attributes.get("direction");

		if (direction != null) {
			setDirection(direction);
		}

		String voucher = (String)attributes.get("voucher");

		if (voucher != null) {
			setVoucher(voucher);
		}

		String terminal = (String)attributes.get("terminal");

		if (terminal != null) {
			setTerminal(terminal);
		}

		Integer hours = (Integer)attributes.get("hours");

		if (hours != null) {
			setHours(hours);
		}

		String minute = (String)attributes.get("minute");

		if (minute != null) {
			setMinute(minute);
		}
	}

	@JSON
	@Override
	public String getCustom_key() {
		if (_custom_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _custom_key;
		}
	}

	@Override
	public void setCustom_key(String custom_key) {
		_custom_key = custom_key;
	}

	@JSON
	@Override
	public long getPersonId() {
		return _personId;
	}

	@Override
	public void setPersonId(long personId) {
		_columnBitmask |= PERSONID_COLUMN_BITMASK;

		if (!_setOriginalPersonId) {
			_setOriginalPersonId = true;

			_originalPersonId = _personId;
		}

		_personId = personId;
	}

	public long getOriginalPersonId() {
		return _originalPersonId;
	}

	@JSON
	@Override
	public int getPunchingId() {
		return _punchingId;
	}

	@Override
	public void setPunchingId(int punchingId) {
		_punchingId = punchingId;
	}

	@JSON
	@Override
	public String getDirection() {
		if (_direction == null) {
			return StringPool.BLANK;
		}
		else {
			return _direction;
		}
	}

	@Override
	public void setDirection(String direction) {
		_direction = direction;
	}

	@JSON
	@Override
	public String getVoucher() {
		if (_voucher == null) {
			return StringPool.BLANK;
		}
		else {
			return _voucher;
		}
	}

	@Override
	public void setVoucher(String voucher) {
		_voucher = voucher;
	}

	@JSON
	@Override
	public String getTerminal() {
		if (_terminal == null) {
			return StringPool.BLANK;
		}
		else {
			return _terminal;
		}
	}

	@Override
	public void setTerminal(String terminal) {
		_terminal = terminal;
	}

	@JSON
	@Override
	public int getHours() {
		return _hours;
	}

	@Override
	public void setHours(int hours) {
		_hours = hours;
	}

	@JSON
	@Override
	public String getMinute() {
		if (_minute == null) {
			return StringPool.BLANK;
		}
		else {
			return _minute;
		}
	}

	@Override
	public void setMinute(String minute) {
		_minute = minute;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DailyPunching toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DailyPunching)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DailyPunchingImpl dailyPunchingImpl = new DailyPunchingImpl();

		dailyPunchingImpl.setCustom_key(getCustom_key());
		dailyPunchingImpl.setPersonId(getPersonId());
		dailyPunchingImpl.setPunchingId(getPunchingId());
		dailyPunchingImpl.setDirection(getDirection());
		dailyPunchingImpl.setVoucher(getVoucher());
		dailyPunchingImpl.setTerminal(getTerminal());
		dailyPunchingImpl.setHours(getHours());
		dailyPunchingImpl.setMinute(getMinute());

		dailyPunchingImpl.resetOriginalValues();

		return dailyPunchingImpl;
	}

	@Override
	public int compareTo(DailyPunching dailyPunching) {
		String primaryKey = dailyPunching.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DailyPunching)) {
			return false;
		}

		DailyPunching dailyPunching = (DailyPunching)obj;

		String primaryKey = dailyPunching.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DailyPunchingModelImpl dailyPunchingModelImpl = this;

		dailyPunchingModelImpl._originalPersonId = dailyPunchingModelImpl._personId;

		dailyPunchingModelImpl._setOriginalPersonId = false;

		dailyPunchingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DailyPunching> toCacheModel() {
		DailyPunchingCacheModel dailyPunchingCacheModel = new DailyPunchingCacheModel();

		dailyPunchingCacheModel.custom_key = getCustom_key();

		String custom_key = dailyPunchingCacheModel.custom_key;

		if ((custom_key != null) && (custom_key.length() == 0)) {
			dailyPunchingCacheModel.custom_key = null;
		}

		dailyPunchingCacheModel.personId = getPersonId();

		dailyPunchingCacheModel.punchingId = getPunchingId();

		dailyPunchingCacheModel.direction = getDirection();

		String direction = dailyPunchingCacheModel.direction;

		if ((direction != null) && (direction.length() == 0)) {
			dailyPunchingCacheModel.direction = null;
		}

		dailyPunchingCacheModel.voucher = getVoucher();

		String voucher = dailyPunchingCacheModel.voucher;

		if ((voucher != null) && (voucher.length() == 0)) {
			dailyPunchingCacheModel.voucher = null;
		}

		dailyPunchingCacheModel.terminal = getTerminal();

		String terminal = dailyPunchingCacheModel.terminal;

		if ((terminal != null) && (terminal.length() == 0)) {
			dailyPunchingCacheModel.terminal = null;
		}

		dailyPunchingCacheModel.hours = getHours();

		dailyPunchingCacheModel.minute = getMinute();

		String minute = dailyPunchingCacheModel.minute;

		if ((minute != null) && (minute.length() == 0)) {
			dailyPunchingCacheModel.minute = null;
		}

		return dailyPunchingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{custom_key=");
		sb.append(getCustom_key());
		sb.append(", personId=");
		sb.append(getPersonId());
		sb.append(", punchingId=");
		sb.append(getPunchingId());
		sb.append(", direction=");
		sb.append(getDirection());
		sb.append(", voucher=");
		sb.append(getVoucher());
		sb.append(", terminal=");
		sb.append(getTerminal());
		sb.append(", hours=");
		sb.append(getHours());
		sb.append(", minute=");
		sb.append(getMinute());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.intranet.mef.daily.punching.model.DailyPunching");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>custom_key</column-name><column-value><![CDATA[");
		sb.append(getCustom_key());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personId</column-name><column-value><![CDATA[");
		sb.append(getPersonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>punchingId</column-name><column-value><![CDATA[");
		sb.append(getPunchingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>direction</column-name><column-value><![CDATA[");
		sb.append(getDirection());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>voucher</column-name><column-value><![CDATA[");
		sb.append(getVoucher());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>terminal</column-name><column-value><![CDATA[");
		sb.append(getTerminal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hours</column-name><column-value><![CDATA[");
		sb.append(getHours());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minute</column-name><column-value><![CDATA[");
		sb.append(getMinute());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DailyPunching.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DailyPunching.class
		};
	private String _custom_key;
	private long _personId;
	private long _originalPersonId;
	private boolean _setOriginalPersonId;
	private int _punchingId;
	private String _direction;
	private String _voucher;
	private String _terminal;
	private int _hours;
	private String _minute;
	private long _columnBitmask;
	private DailyPunching _escapedModel;
}