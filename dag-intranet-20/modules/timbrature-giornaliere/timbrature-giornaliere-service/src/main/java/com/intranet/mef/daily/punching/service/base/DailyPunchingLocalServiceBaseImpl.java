/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.intranet.mef.daily.punching.service.base;

import aQute.bnd.annotation.ProviderType;

import com.intranet.mef.daily.punching.model.DailyPunching;
import com.intranet.mef.daily.punching.service.DailyPunchingLocalService;
import com.intranet.mef.daily.punching.service.persistence.DailyPunchingPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the daily punching local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.intranet.mef.daily.punching.service.impl.DailyPunchingLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.intranet.mef.daily.punching.service.impl.DailyPunchingLocalServiceImpl
 * @see com.intranet.mef.daily.punching.service.DailyPunchingLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class DailyPunchingLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements DailyPunchingLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.intranet.mef.daily.punching.service.DailyPunchingLocalServiceUtil} to access the daily punching local service.
	 */

	/**
	 * Adds the daily punching to the database. Also notifies the appropriate model listeners.
	 *
	 * @param dailyPunching the daily punching
	 * @return the daily punching that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DailyPunching addDailyPunching(DailyPunching dailyPunching) {
		dailyPunching.setNew(true);

		return dailyPunchingPersistence.update(dailyPunching);
	}

	/**
	 * Creates a new daily punching with the primary key. Does not add the daily punching to the database.
	 *
	 * @param custom_key the primary key for the new daily punching
	 * @return the new daily punching
	 */
	@Override
	public DailyPunching createDailyPunching(String custom_key) {
		return dailyPunchingPersistence.create(custom_key);
	}

	/**
	 * Deletes the daily punching with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param custom_key the primary key of the daily punching
	 * @return the daily punching that was removed
	 * @throws PortalException if a daily punching with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DailyPunching deleteDailyPunching(String custom_key)
		throws PortalException {
		return dailyPunchingPersistence.remove(custom_key);
	}

	/**
	 * Deletes the daily punching from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dailyPunching the daily punching
	 * @return the daily punching that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DailyPunching deleteDailyPunching(DailyPunching dailyPunching) {
		return dailyPunchingPersistence.remove(dailyPunching);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(DailyPunching.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return dailyPunchingPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.intranet.mef.daily.punching.model.impl.DailyPunchingModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return dailyPunchingPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.intranet.mef.daily.punching.model.impl.DailyPunchingModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return dailyPunchingPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return dailyPunchingPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return dailyPunchingPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public DailyPunching fetchDailyPunching(String custom_key) {
		return dailyPunchingPersistence.fetchByPrimaryKey(custom_key);
	}

	/**
	 * Returns the daily punching with the primary key.
	 *
	 * @param custom_key the primary key of the daily punching
	 * @return the daily punching
	 * @throws PortalException if a daily punching with the primary key could not be found
	 */
	@Override
	public DailyPunching getDailyPunching(String custom_key)
		throws PortalException {
		return dailyPunchingPersistence.findByPrimaryKey(custom_key);
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return dailyPunchingLocalService.deleteDailyPunching((DailyPunching)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return dailyPunchingPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the daily punchings.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.intranet.mef.daily.punching.model.impl.DailyPunchingModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of daily punchings
	 * @param end the upper bound of the range of daily punchings (not inclusive)
	 * @return the range of daily punchings
	 */
	@Override
	public List<DailyPunching> getDailyPunchings(int start, int end) {
		return dailyPunchingPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of daily punchings.
	 *
	 * @return the number of daily punchings
	 */
	@Override
	public int getDailyPunchingsCount() {
		return dailyPunchingPersistence.countAll();
	}

	/**
	 * Updates the daily punching in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param dailyPunching the daily punching
	 * @return the daily punching that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DailyPunching updateDailyPunching(DailyPunching dailyPunching) {
		return dailyPunchingPersistence.update(dailyPunching);
	}

	/**
	 * Returns the daily punching local service.
	 *
	 * @return the daily punching local service
	 */
	public DailyPunchingLocalService getDailyPunchingLocalService() {
		return dailyPunchingLocalService;
	}

	/**
	 * Sets the daily punching local service.
	 *
	 * @param dailyPunchingLocalService the daily punching local service
	 */
	public void setDailyPunchingLocalService(
		DailyPunchingLocalService dailyPunchingLocalService) {
		this.dailyPunchingLocalService = dailyPunchingLocalService;
	}

	/**
	 * Returns the daily punching persistence.
	 *
	 * @return the daily punching persistence
	 */
	public DailyPunchingPersistence getDailyPunchingPersistence() {
		return dailyPunchingPersistence;
	}

	/**
	 * Sets the daily punching persistence.
	 *
	 * @param dailyPunchingPersistence the daily punching persistence
	 */
	public void setDailyPunchingPersistence(
		DailyPunchingPersistence dailyPunchingPersistence) {
		this.dailyPunchingPersistence = dailyPunchingPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.intranet.mef.daily.punching.model.DailyPunching",
			dailyPunchingLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.intranet.mef.daily.punching.model.DailyPunching");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return DailyPunchingLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return DailyPunching.class;
	}

	protected String getModelClassName() {
		return DailyPunching.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = dailyPunchingPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = DailyPunchingLocalService.class)
	protected DailyPunchingLocalService dailyPunchingLocalService;
	@BeanReference(type = DailyPunchingPersistence.class)
	protected DailyPunchingPersistence dailyPunchingPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}