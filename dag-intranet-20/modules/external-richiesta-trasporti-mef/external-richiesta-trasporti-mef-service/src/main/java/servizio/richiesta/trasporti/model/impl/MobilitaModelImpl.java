/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servizio.richiesta.trasporti.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import servizio.richiesta.trasporti.model.Mobilita;
import servizio.richiesta.trasporti.model.MobilitaModel;
import servizio.richiesta.trasporti.model.MobilitaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Mobilita service. Represents a row in the &quot;LF_MOBILITA&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MobilitaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MobilitaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MobilitaImpl
 * @see Mobilita
 * @see MobilitaModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class MobilitaModelImpl extends BaseModelImpl<Mobilita>
	implements MobilitaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mobilita model instance should use the {@link Mobilita} interface instead.
	 */
	public static final String TABLE_NAME = "LF_MOBILITA";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CUSTOM_KEY", Types.VARCHAR },
			{ "PERSON_ID", Types.BIGINT },
			{ "TIPO_MOBILITA", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CUSTOM_KEY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PERSON_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("TIPO_MOBILITA", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LF_MOBILITA (CUSTOM_KEY VARCHAR(75) not null primary key,PERSON_ID LONG,TIPO_MOBILITA VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LF_MOBILITA";
	public static final String ORDER_BY_JPQL = " ORDER BY mobilita.custom_key ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LF_MOBILITA.CUSTOM_KEY ASC";
	public static final String DATA_SOURCE = "stage";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(servizio.richiesta.trasporti.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.servizio.richiesta.trasporti.model.Mobilita"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(servizio.richiesta.trasporti.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.servizio.richiesta.trasporti.model.Mobilita"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(servizio.richiesta.trasporti.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.servizio.richiesta.trasporti.model.Mobilita"),
			true);
	public static final long PERSON_ID_COLUMN_BITMASK = 1L;
	public static final long CUSTOM_KEY_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Mobilita toModel(MobilitaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Mobilita model = new MobilitaImpl();

		model.setCustom_key(soapModel.getCustom_key());
		model.setPerson_id(soapModel.getPerson_id());
		model.setTipo_mobilita(soapModel.getTipo_mobilita());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Mobilita> toModels(MobilitaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Mobilita> models = new ArrayList<Mobilita>(soapModels.length);

		for (MobilitaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(servizio.richiesta.trasporti.service.util.PropsUtil.get(
				"lock.expiration.time.servizio.richiesta.trasporti.model.Mobilita"));

	public MobilitaModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _custom_key;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCustom_key(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _custom_key;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Mobilita.class;
	}

	@Override
	public String getModelClassName() {
		return Mobilita.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("custom_key", getCustom_key());
		attributes.put("person_id", getPerson_id());
		attributes.put("tipo_mobilita", getTipo_mobilita());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String custom_key = (String)attributes.get("custom_key");

		if (custom_key != null) {
			setCustom_key(custom_key);
		}

		Long person_id = (Long)attributes.get("person_id");

		if (person_id != null) {
			setPerson_id(person_id);
		}

		String tipo_mobilita = (String)attributes.get("tipo_mobilita");

		if (tipo_mobilita != null) {
			setTipo_mobilita(tipo_mobilita);
		}
	}

	@JSON
	@Override
	public String getCustom_key() {
		if (_custom_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _custom_key;
		}
	}

	@Override
	public void setCustom_key(String custom_key) {
		_custom_key = custom_key;
	}

	@JSON
	@Override
	public long getPerson_id() {
		return _person_id;
	}

	@Override
	public void setPerson_id(long person_id) {
		_columnBitmask |= PERSON_ID_COLUMN_BITMASK;

		if (!_setOriginalPerson_id) {
			_setOriginalPerson_id = true;

			_originalPerson_id = _person_id;
		}

		_person_id = person_id;
	}

	public long getOriginalPerson_id() {
		return _originalPerson_id;
	}

	@JSON
	@Override
	public String getTipo_mobilita() {
		if (_tipo_mobilita == null) {
			return StringPool.BLANK;
		}
		else {
			return _tipo_mobilita;
		}
	}

	@Override
	public void setTipo_mobilita(String tipo_mobilita) {
		_tipo_mobilita = tipo_mobilita;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Mobilita toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Mobilita)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MobilitaImpl mobilitaImpl = new MobilitaImpl();

		mobilitaImpl.setCustom_key(getCustom_key());
		mobilitaImpl.setPerson_id(getPerson_id());
		mobilitaImpl.setTipo_mobilita(getTipo_mobilita());

		mobilitaImpl.resetOriginalValues();

		return mobilitaImpl;
	}

	@Override
	public int compareTo(Mobilita mobilita) {
		String primaryKey = mobilita.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Mobilita)) {
			return false;
		}

		Mobilita mobilita = (Mobilita)obj;

		String primaryKey = mobilita.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MobilitaModelImpl mobilitaModelImpl = this;

		mobilitaModelImpl._originalPerson_id = mobilitaModelImpl._person_id;

		mobilitaModelImpl._setOriginalPerson_id = false;

		mobilitaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Mobilita> toCacheModel() {
		MobilitaCacheModel mobilitaCacheModel = new MobilitaCacheModel();

		mobilitaCacheModel.custom_key = getCustom_key();

		String custom_key = mobilitaCacheModel.custom_key;

		if ((custom_key != null) && (custom_key.length() == 0)) {
			mobilitaCacheModel.custom_key = null;
		}

		mobilitaCacheModel.person_id = getPerson_id();

		mobilitaCacheModel.tipo_mobilita = getTipo_mobilita();

		String tipo_mobilita = mobilitaCacheModel.tipo_mobilita;

		if ((tipo_mobilita != null) && (tipo_mobilita.length() == 0)) {
			mobilitaCacheModel.tipo_mobilita = null;
		}

		return mobilitaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{custom_key=");
		sb.append(getCustom_key());
		sb.append(", person_id=");
		sb.append(getPerson_id());
		sb.append(", tipo_mobilita=");
		sb.append(getTipo_mobilita());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("servizio.richiesta.trasporti.model.Mobilita");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>custom_key</column-name><column-value><![CDATA[");
		sb.append(getCustom_key());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>person_id</column-name><column-value><![CDATA[");
		sb.append(getPerson_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tipo_mobilita</column-name><column-value><![CDATA[");
		sb.append(getTipo_mobilita());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Mobilita.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Mobilita.class
		};
	private String _custom_key;
	private long _person_id;
	private long _originalPerson_id;
	private boolean _setOriginalPerson_id;
	private String _tipo_mobilita;
	private long _columnBitmask;
	private Mobilita _escapedModel;
}