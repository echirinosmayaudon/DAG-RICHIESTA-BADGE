/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.accenture.istanza.interpello.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.accenture.istanza.interpello.model.TextRich;
import com.accenture.istanza.interpello.model.TextRichModel;
import com.accenture.istanza.interpello.model.TextRichSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TextRich service. Represents a row in the &quot;MEFINTERPELLO_TextRich&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TextRichModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TextRichImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TextRichImpl
 * @see TextRich
 * @see TextRichModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TextRichModelImpl extends BaseModelImpl<TextRich>
	implements TextRichModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a text rich model instance should use the {@link TextRich} interface instead.
	 */
	public static final String TABLE_NAME = "MEFINTERPELLO_TextRich";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_text", Types.BIGINT },
			{ "label_text", Types.VARCHAR },
			{ "testo_text", Types.VARCHAR },
			{ "data_in", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_text", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("label_text", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testo_text", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_in", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFINTERPELLO_TextRich (id_text LONG not null primary key,label_text VARCHAR(100) null,testo_text VARCHAR(2000) null,data_in DATE null)";
	public static final String TABLE_SQL_DROP = "drop table MEFINTERPELLO_TextRich";
	public static final String ORDER_BY_JPQL = " ORDER BY textRich.data_in DESC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFINTERPELLO_TextRich.data_in DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.accenture.istanza.interpello.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.accenture.istanza.interpello.model.TextRich"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.accenture.istanza.interpello.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.accenture.istanza.interpello.model.TextRich"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.accenture.istanza.interpello.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.accenture.istanza.interpello.model.TextRich"),
			true);
	public static final long LABEL_TEXT_COLUMN_BITMASK = 1L;
	public static final long DATA_IN_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TextRich toModel(TextRichSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TextRich model = new TextRichImpl();

		model.setId_text(soapModel.getId_text());
		model.setLabel_text(soapModel.getLabel_text());
		model.setTesto_text(soapModel.getTesto_text());
		model.setData_in(soapModel.getData_in());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TextRich> toModels(TextRichSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TextRich> models = new ArrayList<TextRich>(soapModels.length);

		for (TextRichSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.accenture.istanza.interpello.service.util.PropsUtil.get(
				"lock.expiration.time.com.accenture.istanza.interpello.model.TextRich"));

	public TextRichModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_text;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_text(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_text;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TextRich.class;
	}

	@Override
	public String getModelClassName() {
		return TextRich.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_text", getId_text());
		attributes.put("label_text", getLabel_text());
		attributes.put("testo_text", getTesto_text());
		attributes.put("data_in", getData_in());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_text = (Long)attributes.get("id_text");

		if (id_text != null) {
			setId_text(id_text);
		}

		String label_text = (String)attributes.get("label_text");

		if (label_text != null) {
			setLabel_text(label_text);
		}

		String testo_text = (String)attributes.get("testo_text");

		if (testo_text != null) {
			setTesto_text(testo_text);
		}

		Date data_in = (Date)attributes.get("data_in");

		if (data_in != null) {
			setData_in(data_in);
		}
	}

	@JSON
	@Override
	public long getId_text() {
		return _id_text;
	}

	@Override
	public void setId_text(long id_text) {
		_id_text = id_text;
	}

	@JSON
	@Override
	public String getLabel_text() {
		if (_label_text == null) {
			return "";
		}
		else {
			return _label_text;
		}
	}

	@Override
	public void setLabel_text(String label_text) {
		_columnBitmask |= LABEL_TEXT_COLUMN_BITMASK;

		if (_originalLabel_text == null) {
			_originalLabel_text = _label_text;
		}

		_label_text = label_text;
	}

	public String getOriginalLabel_text() {
		return GetterUtil.getString(_originalLabel_text);
	}

	@JSON
	@Override
	public String getTesto_text() {
		if (_testo_text == null) {
			return "";
		}
		else {
			return _testo_text;
		}
	}

	@Override
	public void setTesto_text(String testo_text) {
		_testo_text = testo_text;
	}

	@JSON
	@Override
	public Date getData_in() {
		return _data_in;
	}

	@Override
	public void setData_in(Date data_in) {
		_columnBitmask = -1L;

		_data_in = data_in;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TextRich.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TextRich toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TextRich)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TextRichImpl textRichImpl = new TextRichImpl();

		textRichImpl.setId_text(getId_text());
		textRichImpl.setLabel_text(getLabel_text());
		textRichImpl.setTesto_text(getTesto_text());
		textRichImpl.setData_in(getData_in());

		textRichImpl.resetOriginalValues();

		return textRichImpl;
	}

	@Override
	public int compareTo(TextRich textRich) {
		int value = 0;

		value = DateUtil.compareTo(getData_in(), textRich.getData_in());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TextRich)) {
			return false;
		}

		TextRich textRich = (TextRich)obj;

		long primaryKey = textRich.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TextRichModelImpl textRichModelImpl = this;

		textRichModelImpl._originalLabel_text = textRichModelImpl._label_text;

		textRichModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TextRich> toCacheModel() {
		TextRichCacheModel textRichCacheModel = new TextRichCacheModel();

		textRichCacheModel.id_text = getId_text();

		textRichCacheModel.label_text = getLabel_text();

		String label_text = textRichCacheModel.label_text;

		if ((label_text != null) && (label_text.length() == 0)) {
			textRichCacheModel.label_text = null;
		}

		textRichCacheModel.testo_text = getTesto_text();

		String testo_text = textRichCacheModel.testo_text;

		if ((testo_text != null) && (testo_text.length() == 0)) {
			textRichCacheModel.testo_text = null;
		}

		Date data_in = getData_in();

		if (data_in != null) {
			textRichCacheModel.data_in = data_in.getTime();
		}
		else {
			textRichCacheModel.data_in = Long.MIN_VALUE;
		}

		return textRichCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id_text=");
		sb.append(getId_text());
		sb.append(", label_text=");
		sb.append(getLabel_text());
		sb.append(", testo_text=");
		sb.append(getTesto_text());
		sb.append(", data_in=");
		sb.append(getData_in());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.accenture.istanza.interpello.model.TextRich");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_text</column-name><column-value><![CDATA[");
		sb.append(getId_text());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>label_text</column-name><column-value><![CDATA[");
		sb.append(getLabel_text());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testo_text</column-name><column-value><![CDATA[");
		sb.append(getTesto_text());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_in</column-name><column-value><![CDATA[");
		sb.append(getData_in());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TextRich.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TextRich.class, ModelWrapper.class
		};
	private long _id_text;
	private String _label_text;
	private String _originalLabel_text;
	private String _testo_text;
	private Date _data_in;
	private long _columnBitmask;
	private TextRich _escapedModel;
}