/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.accenture.istanza.interpello.service.base;

import aQute.bnd.annotation.ProviderType;

import com.accenture.istanza.interpello.model.TextRich;
import com.accenture.istanza.interpello.service.TextRichLocalService;
import com.accenture.istanza.interpello.service.persistence.EmailPersistence;
import com.accenture.istanza.interpello.service.persistence.RichInterpelloFinder;
import com.accenture.istanza.interpello.service.persistence.RichInterpelloPersistence;
import com.accenture.istanza.interpello.service.persistence.TextRichPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the text rich local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.accenture.istanza.interpello.service.impl.TextRichLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.accenture.istanza.interpello.service.impl.TextRichLocalServiceImpl
 * @see com.accenture.istanza.interpello.service.TextRichLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class TextRichLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements TextRichLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.accenture.istanza.interpello.service.TextRichLocalServiceUtil} to access the text rich local service.
	 */

	/**
	 * Adds the text rich to the database. Also notifies the appropriate model listeners.
	 *
	 * @param textRich the text rich
	 * @return the text rich that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TextRich addTextRich(TextRich textRich) {
		textRich.setNew(true);

		return textRichPersistence.update(textRich);
	}

	/**
	 * Creates a new text rich with the primary key. Does not add the text rich to the database.
	 *
	 * @param id_text the primary key for the new text rich
	 * @return the new text rich
	 */
	@Override
	@Transactional(enabled = false)
	public TextRich createTextRich(long id_text) {
		return textRichPersistence.create(id_text);
	}

	/**
	 * Deletes the text rich with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id_text the primary key of the text rich
	 * @return the text rich that was removed
	 * @throws PortalException if a text rich with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TextRich deleteTextRich(long id_text) throws PortalException {
		return textRichPersistence.remove(id_text);
	}

	/**
	 * Deletes the text rich from the database. Also notifies the appropriate model listeners.
	 *
	 * @param textRich the text rich
	 * @return the text rich that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TextRich deleteTextRich(TextRich textRich) {
		return textRichPersistence.remove(textRich);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TextRich.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return textRichPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.accenture.istanza.interpello.model.impl.TextRichModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return textRichPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.accenture.istanza.interpello.model.impl.TextRichModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return textRichPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return textRichPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return textRichPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public TextRich fetchTextRich(long id_text) {
		return textRichPersistence.fetchByPrimaryKey(id_text);
	}

	/**
	 * Returns the text rich with the primary key.
	 *
	 * @param id_text the primary key of the text rich
	 * @return the text rich
	 * @throws PortalException if a text rich with the primary key could not be found
	 */
	@Override
	public TextRich getTextRich(long id_text) throws PortalException {
		return textRichPersistence.findByPrimaryKey(id_text);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(textRichLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TextRich.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id_text");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(textRichLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(TextRich.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id_text");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(textRichLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TextRich.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id_text");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return textRichLocalService.deleteTextRich((TextRich)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return textRichPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the text richs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.accenture.istanza.interpello.model.impl.TextRichModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of text richs
	 * @param end the upper bound of the range of text richs (not inclusive)
	 * @return the range of text richs
	 */
	@Override
	public List<TextRich> getTextRichs(int start, int end) {
		return textRichPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of text richs.
	 *
	 * @return the number of text richs
	 */
	@Override
	public int getTextRichsCount() {
		return textRichPersistence.countAll();
	}

	/**
	 * Updates the text rich in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param textRich the text rich
	 * @return the text rich that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TextRich updateTextRich(TextRich textRich) {
		return textRichPersistence.update(textRich);
	}

	/**
	 * Returns the email local service.
	 *
	 * @return the email local service
	 */
	public com.accenture.istanza.interpello.service.EmailLocalService getEmailLocalService() {
		return emailLocalService;
	}

	/**
	 * Sets the email local service.
	 *
	 * @param emailLocalService the email local service
	 */
	public void setEmailLocalService(
		com.accenture.istanza.interpello.service.EmailLocalService emailLocalService) {
		this.emailLocalService = emailLocalService;
	}

	/**
	 * Returns the email persistence.
	 *
	 * @return the email persistence
	 */
	public EmailPersistence getEmailPersistence() {
		return emailPersistence;
	}

	/**
	 * Sets the email persistence.
	 *
	 * @param emailPersistence the email persistence
	 */
	public void setEmailPersistence(EmailPersistence emailPersistence) {
		this.emailPersistence = emailPersistence;
	}

	/**
	 * Returns the rich interpello local service.
	 *
	 * @return the rich interpello local service
	 */
	public com.accenture.istanza.interpello.service.RichInterpelloLocalService getRichInterpelloLocalService() {
		return richInterpelloLocalService;
	}

	/**
	 * Sets the rich interpello local service.
	 *
	 * @param richInterpelloLocalService the rich interpello local service
	 */
	public void setRichInterpelloLocalService(
		com.accenture.istanza.interpello.service.RichInterpelloLocalService richInterpelloLocalService) {
		this.richInterpelloLocalService = richInterpelloLocalService;
	}

	/**
	 * Returns the rich interpello persistence.
	 *
	 * @return the rich interpello persistence
	 */
	public RichInterpelloPersistence getRichInterpelloPersistence() {
		return richInterpelloPersistence;
	}

	/**
	 * Sets the rich interpello persistence.
	 *
	 * @param richInterpelloPersistence the rich interpello persistence
	 */
	public void setRichInterpelloPersistence(
		RichInterpelloPersistence richInterpelloPersistence) {
		this.richInterpelloPersistence = richInterpelloPersistence;
	}

	/**
	 * Returns the rich interpello finder.
	 *
	 * @return the rich interpello finder
	 */
	public RichInterpelloFinder getRichInterpelloFinder() {
		return richInterpelloFinder;
	}

	/**
	 * Sets the rich interpello finder.
	 *
	 * @param richInterpelloFinder the rich interpello finder
	 */
	public void setRichInterpelloFinder(
		RichInterpelloFinder richInterpelloFinder) {
		this.richInterpelloFinder = richInterpelloFinder;
	}

	/**
	 * Returns the text rich local service.
	 *
	 * @return the text rich local service
	 */
	public TextRichLocalService getTextRichLocalService() {
		return textRichLocalService;
	}

	/**
	 * Sets the text rich local service.
	 *
	 * @param textRichLocalService the text rich local service
	 */
	public void setTextRichLocalService(
		TextRichLocalService textRichLocalService) {
		this.textRichLocalService = textRichLocalService;
	}

	/**
	 * Returns the text rich persistence.
	 *
	 * @return the text rich persistence
	 */
	public TextRichPersistence getTextRichPersistence() {
		return textRichPersistence;
	}

	/**
	 * Sets the text rich persistence.
	 *
	 * @param textRichPersistence the text rich persistence
	 */
	public void setTextRichPersistence(TextRichPersistence textRichPersistence) {
		this.textRichPersistence = textRichPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.accenture.istanza.interpello.model.TextRich",
			textRichLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.accenture.istanza.interpello.model.TextRich");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return TextRichLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return TextRich.class;
	}

	protected String getModelClassName() {
		return TextRich.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = textRichPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.accenture.istanza.interpello.service.EmailLocalService.class)
	protected com.accenture.istanza.interpello.service.EmailLocalService emailLocalService;
	@BeanReference(type = EmailPersistence.class)
	protected EmailPersistence emailPersistence;
	@BeanReference(type = com.accenture.istanza.interpello.service.RichInterpelloLocalService.class)
	protected com.accenture.istanza.interpello.service.RichInterpelloLocalService richInterpelloLocalService;
	@BeanReference(type = RichInterpelloPersistence.class)
	protected RichInterpelloPersistence richInterpelloPersistence;
	@BeanReference(type = RichInterpelloFinder.class)
	protected RichInterpelloFinder richInterpelloFinder;
	@BeanReference(type = TextRichLocalService.class)
	protected TextRichLocalService textRichLocalService;
	@BeanReference(type = TextRichPersistence.class)
	protected TextRichPersistence textRichPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}