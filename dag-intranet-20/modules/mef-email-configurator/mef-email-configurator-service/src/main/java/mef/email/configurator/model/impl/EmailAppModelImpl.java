/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mef.email.configurator.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import mef.email.configurator.model.EmailApp;
import mef.email.configurator.model.EmailAppModel;
import mef.email.configurator.model.EmailAppSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmailApp service. Represents a row in the &quot;MEFEMAILC_EmailApp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EmailAppModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmailAppImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmailAppImpl
 * @see EmailApp
 * @see EmailAppModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EmailAppModelImpl extends BaseModelImpl<EmailApp>
	implements EmailAppModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a email app model instance should use the {@link EmailApp} interface instead.
	 */
	public static final String TABLE_NAME = "MEFEMAILC_EmailApp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "appid", Types.BIGINT },
			{ "struttura", Types.BIGINT },
			{ "email", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("struttura", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFEMAILC_EmailApp (id_ LONG not null primary key,appid LONG,struttura LONG,email VARCHAR(1000) null)";
	public static final String TABLE_SQL_DROP = "drop table MEFEMAILC_EmailApp";
	public static final String ORDER_BY_JPQL = " ORDER BY emailApp.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFEMAILC_EmailApp.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(mef.email.configurator.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.mef.email.configurator.model.EmailApp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(mef.email.configurator.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.mef.email.configurator.model.EmailApp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(mef.email.configurator.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.mef.email.configurator.model.EmailApp"),
			true);
	public static final long APPID_COLUMN_BITMASK = 1L;
	public static final long STRUTTURA_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmailApp toModel(EmailAppSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmailApp model = new EmailAppImpl();

		model.setId(soapModel.getId());
		model.setAppid(soapModel.getAppid());
		model.setStruttura(soapModel.getStruttura());
		model.setEmail(soapModel.getEmail());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmailApp> toModels(EmailAppSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmailApp> models = new ArrayList<EmailApp>(soapModels.length);

		for (EmailAppSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(mef.email.configurator.service.util.PropsUtil.get(
				"lock.expiration.time.mef.email.configurator.model.EmailApp"));

	public EmailAppModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmailApp.class;
	}

	@Override
	public String getModelClassName() {
		return EmailApp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("appid", getAppid());
		attributes.put("struttura", getStruttura());
		attributes.put("email", getEmail());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long appid = (Long)attributes.get("appid");

		if (appid != null) {
			setAppid(appid);
		}

		Long struttura = (Long)attributes.get("struttura");

		if (struttura != null) {
			setStruttura(struttura);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getAppid() {
		return _appid;
	}

	@Override
	public void setAppid(long appid) {
		_columnBitmask |= APPID_COLUMN_BITMASK;

		if (!_setOriginalAppid) {
			_setOriginalAppid = true;

			_originalAppid = _appid;
		}

		_appid = appid;
	}

	public long getOriginalAppid() {
		return _originalAppid;
	}

	@JSON
	@Override
	public long getStruttura() {
		return _struttura;
	}

	@Override
	public void setStruttura(long struttura) {
		_columnBitmask |= STRUTTURA_COLUMN_BITMASK;

		if (!_setOriginalStruttura) {
			_setOriginalStruttura = true;

			_originalStruttura = _struttura;
		}

		_struttura = struttura;
	}

	public long getOriginalStruttura() {
		return _originalStruttura;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmailApp.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmailApp toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmailApp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmailAppImpl emailAppImpl = new EmailAppImpl();

		emailAppImpl.setId(getId());
		emailAppImpl.setAppid(getAppid());
		emailAppImpl.setStruttura(getStruttura());
		emailAppImpl.setEmail(getEmail());

		emailAppImpl.resetOriginalValues();

		return emailAppImpl;
	}

	@Override
	public int compareTo(EmailApp emailApp) {
		long primaryKey = emailApp.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmailApp)) {
			return false;
		}

		EmailApp emailApp = (EmailApp)obj;

		long primaryKey = emailApp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EmailAppModelImpl emailAppModelImpl = this;

		emailAppModelImpl._originalAppid = emailAppModelImpl._appid;

		emailAppModelImpl._setOriginalAppid = false;

		emailAppModelImpl._originalStruttura = emailAppModelImpl._struttura;

		emailAppModelImpl._setOriginalStruttura = false;

		emailAppModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmailApp> toCacheModel() {
		EmailAppCacheModel emailAppCacheModel = new EmailAppCacheModel();

		emailAppCacheModel.id = getId();

		emailAppCacheModel.appid = getAppid();

		emailAppCacheModel.struttura = getStruttura();

		emailAppCacheModel.email = getEmail();

		String email = emailAppCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			emailAppCacheModel.email = null;
		}

		return emailAppCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", appid=");
		sb.append(getAppid());
		sb.append(", struttura=");
		sb.append(getStruttura());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("mef.email.configurator.model.EmailApp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appid</column-name><column-value><![CDATA[");
		sb.append(getAppid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>struttura</column-name><column-value><![CDATA[");
		sb.append(getStruttura());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EmailApp.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EmailApp.class
		};
	private long _id;
	private long _appid;
	private long _originalAppid;
	private boolean _setOriginalAppid;
	private long _struttura;
	private long _originalStruttura;
	private boolean _setOriginalStruttura;
	private String _email;
	private long _columnBitmask;
	private EmailApp _escapedModel;
}