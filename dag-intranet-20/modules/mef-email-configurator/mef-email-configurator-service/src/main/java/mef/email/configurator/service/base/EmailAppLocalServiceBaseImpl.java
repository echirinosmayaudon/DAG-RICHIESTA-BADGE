/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mef.email.configurator.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import mef.email.configurator.model.EmailApp;
import mef.email.configurator.service.EmailAppLocalService;
import mef.email.configurator.service.persistence.AppNamesPersistence;
import mef.email.configurator.service.persistence.EmailAppPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the email app local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link mef.email.configurator.service.impl.EmailAppLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see mef.email.configurator.service.impl.EmailAppLocalServiceImpl
 * @see mef.email.configurator.service.EmailAppLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class EmailAppLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements EmailAppLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link mef.email.configurator.service.EmailAppLocalServiceUtil} to access the email app local service.
	 */

	/**
	 * Adds the email app to the database. Also notifies the appropriate model listeners.
	 *
	 * @param emailApp the email app
	 * @return the email app that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EmailApp addEmailApp(EmailApp emailApp) {
		emailApp.setNew(true);

		return emailAppPersistence.update(emailApp);
	}

	/**
	 * Creates a new email app with the primary key. Does not add the email app to the database.
	 *
	 * @param id the primary key for the new email app
	 * @return the new email app
	 */
	@Override
	public EmailApp createEmailApp(long id) {
		return emailAppPersistence.create(id);
	}

	/**
	 * Deletes the email app with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the email app
	 * @return the email app that was removed
	 * @throws PortalException if a email app with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EmailApp deleteEmailApp(long id) throws PortalException {
		return emailAppPersistence.remove(id);
	}

	/**
	 * Deletes the email app from the database. Also notifies the appropriate model listeners.
	 *
	 * @param emailApp the email app
	 * @return the email app that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EmailApp deleteEmailApp(EmailApp emailApp) {
		return emailAppPersistence.remove(emailApp);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(EmailApp.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return emailAppPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link mef.email.configurator.model.impl.EmailAppModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return emailAppPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link mef.email.configurator.model.impl.EmailAppModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return emailAppPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return emailAppPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return emailAppPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public EmailApp fetchEmailApp(long id) {
		return emailAppPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the email app with the primary key.
	 *
	 * @param id the primary key of the email app
	 * @return the email app
	 * @throws PortalException if a email app with the primary key could not be found
	 */
	@Override
	public EmailApp getEmailApp(long id) throws PortalException {
		return emailAppPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(emailAppLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(EmailApp.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(emailAppLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(EmailApp.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(emailAppLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(EmailApp.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return emailAppLocalService.deleteEmailApp((EmailApp)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return emailAppPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the email apps.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link mef.email.configurator.model.impl.EmailAppModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of email apps
	 * @param end the upper bound of the range of email apps (not inclusive)
	 * @return the range of email apps
	 */
	@Override
	public List<EmailApp> getEmailApps(int start, int end) {
		return emailAppPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of email apps.
	 *
	 * @return the number of email apps
	 */
	@Override
	public int getEmailAppsCount() {
		return emailAppPersistence.countAll();
	}

	/**
	 * Updates the email app in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param emailApp the email app
	 * @return the email app that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EmailApp updateEmailApp(EmailApp emailApp) {
		return emailAppPersistence.update(emailApp);
	}

	/**
	 * Returns the app names local service.
	 *
	 * @return the app names local service
	 */
	public mef.email.configurator.service.AppNamesLocalService getAppNamesLocalService() {
		return appNamesLocalService;
	}

	/**
	 * Sets the app names local service.
	 *
	 * @param appNamesLocalService the app names local service
	 */
	public void setAppNamesLocalService(
		mef.email.configurator.service.AppNamesLocalService appNamesLocalService) {
		this.appNamesLocalService = appNamesLocalService;
	}

	/**
	 * Returns the app names persistence.
	 *
	 * @return the app names persistence
	 */
	public AppNamesPersistence getAppNamesPersistence() {
		return appNamesPersistence;
	}

	/**
	 * Sets the app names persistence.
	 *
	 * @param appNamesPersistence the app names persistence
	 */
	public void setAppNamesPersistence(AppNamesPersistence appNamesPersistence) {
		this.appNamesPersistence = appNamesPersistence;
	}

	/**
	 * Returns the email app local service.
	 *
	 * @return the email app local service
	 */
	public EmailAppLocalService getEmailAppLocalService() {
		return emailAppLocalService;
	}

	/**
	 * Sets the email app local service.
	 *
	 * @param emailAppLocalService the email app local service
	 */
	public void setEmailAppLocalService(
		EmailAppLocalService emailAppLocalService) {
		this.emailAppLocalService = emailAppLocalService;
	}

	/**
	 * Returns the email app persistence.
	 *
	 * @return the email app persistence
	 */
	public EmailAppPersistence getEmailAppPersistence() {
		return emailAppPersistence;
	}

	/**
	 * Sets the email app persistence.
	 *
	 * @param emailAppPersistence the email app persistence
	 */
	public void setEmailAppPersistence(EmailAppPersistence emailAppPersistence) {
		this.emailAppPersistence = emailAppPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("mef.email.configurator.model.EmailApp",
			emailAppLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"mef.email.configurator.model.EmailApp");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return EmailAppLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return EmailApp.class;
	}

	protected String getModelClassName() {
		return EmailApp.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = emailAppPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = mef.email.configurator.service.AppNamesLocalService.class)
	protected mef.email.configurator.service.AppNamesLocalService appNamesLocalService;
	@BeanReference(type = AppNamesPersistence.class)
	protected AppNamesPersistence appNamesPersistence;
	@BeanReference(type = EmailAppLocalService.class)
	protected EmailAppLocalService emailAppLocalService;
	@BeanReference(type = EmailAppPersistence.class)
	protected EmailAppPersistence emailAppPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}