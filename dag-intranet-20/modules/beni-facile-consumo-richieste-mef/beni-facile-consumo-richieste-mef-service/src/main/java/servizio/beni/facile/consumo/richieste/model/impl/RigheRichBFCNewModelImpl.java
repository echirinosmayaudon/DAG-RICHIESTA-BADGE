/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servizio.beni.facile.consumo.richieste.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import servizio.beni.facile.consumo.richieste.model.RigheRichBFCNew;
import servizio.beni.facile.consumo.richieste.model.RigheRichBFCNewModel;
import servizio.beni.facile.consumo.richieste.model.RigheRichBFCNewSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RigheRichBFCNew service. Represents a row in the &quot;MEFRICHBFC_RigheRichBFCNew&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RigheRichBFCNewModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RigheRichBFCNewImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RigheRichBFCNewImpl
 * @see RigheRichBFCNew
 * @see RigheRichBFCNewModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RigheRichBFCNewModelImpl extends BaseModelImpl<RigheRichBFCNew>
	implements RigheRichBFCNewModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a righe rich b f c new model instance should use the {@link RigheRichBFCNew} interface instead.
	 */
	public static final String TABLE_NAME = "MEFRICHBFC_RigheRichBFCNew";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "id_rich", Types.BIGINT },
			{ "dipartimento", Types.VARCHAR },
			{ "dati1", Types.VARCHAR },
			{ "dati2", Types.VARCHAR },
			{ "dati3", Types.VARCHAR },
			{ "dati4", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_rich", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dipartimento", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dati1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dati2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dati3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dati4", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFRICHBFC_RigheRichBFCNew (id_ LONG not null primary key,id_rich LONG,dipartimento VARCHAR(75) null,dati1 STRING null,dati2 STRING null,dati3 STRING null,dati4 STRING null)";
	public static final String TABLE_SQL_DROP = "drop table MEFRICHBFC_RigheRichBFCNew";
	public static final String ORDER_BY_JPQL = " ORDER BY righeRichBFCNew.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFRICHBFC_RigheRichBFCNew.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(servizio.beni.facile.consumo.richieste.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.servizio.beni.facile.consumo.richieste.model.RigheRichBFCNew"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(servizio.beni.facile.consumo.richieste.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.servizio.beni.facile.consumo.richieste.model.RigheRichBFCNew"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(servizio.beni.facile.consumo.richieste.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.servizio.beni.facile.consumo.richieste.model.RigheRichBFCNew"),
			true);
	public static final long DIPARTIMENTO_COLUMN_BITMASK = 1L;
	public static final long ID_RICH_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RigheRichBFCNew toModel(RigheRichBFCNewSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RigheRichBFCNew model = new RigheRichBFCNewImpl();

		model.setId(soapModel.getId());
		model.setId_rich(soapModel.getId_rich());
		model.setDipartimento(soapModel.getDipartimento());
		model.setDati1(soapModel.getDati1());
		model.setDati2(soapModel.getDati2());
		model.setDati3(soapModel.getDati3());
		model.setDati4(soapModel.getDati4());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RigheRichBFCNew> toModels(
		RigheRichBFCNewSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RigheRichBFCNew> models = new ArrayList<RigheRichBFCNew>(soapModels.length);

		for (RigheRichBFCNewSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(servizio.beni.facile.consumo.richieste.service.util.PropsUtil.get(
				"lock.expiration.time.servizio.beni.facile.consumo.richieste.model.RigheRichBFCNew"));

	public RigheRichBFCNewModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RigheRichBFCNew.class;
	}

	@Override
	public String getModelClassName() {
		return RigheRichBFCNew.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("id_rich", getId_rich());
		attributes.put("dipartimento", getDipartimento());
		attributes.put("dati1", getDati1());
		attributes.put("dati2", getDati2());
		attributes.put("dati3", getDati3());
		attributes.put("dati4", getDati4());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long id_rich = (Long)attributes.get("id_rich");

		if (id_rich != null) {
			setId_rich(id_rich);
		}

		String dipartimento = (String)attributes.get("dipartimento");

		if (dipartimento != null) {
			setDipartimento(dipartimento);
		}

		String dati1 = (String)attributes.get("dati1");

		if (dati1 != null) {
			setDati1(dati1);
		}

		String dati2 = (String)attributes.get("dati2");

		if (dati2 != null) {
			setDati2(dati2);
		}

		String dati3 = (String)attributes.get("dati3");

		if (dati3 != null) {
			setDati3(dati3);
		}

		String dati4 = (String)attributes.get("dati4");

		if (dati4 != null) {
			setDati4(dati4);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getId_rich() {
		return _id_rich;
	}

	@Override
	public void setId_rich(long id_rich) {
		_columnBitmask |= ID_RICH_COLUMN_BITMASK;

		if (!_setOriginalId_rich) {
			_setOriginalId_rich = true;

			_originalId_rich = _id_rich;
		}

		_id_rich = id_rich;
	}

	public long getOriginalId_rich() {
		return _originalId_rich;
	}

	@JSON
	@Override
	public String getDipartimento() {
		if (_dipartimento == null) {
			return StringPool.BLANK;
		}
		else {
			return _dipartimento;
		}
	}

	@Override
	public void setDipartimento(String dipartimento) {
		_columnBitmask |= DIPARTIMENTO_COLUMN_BITMASK;

		if (_originalDipartimento == null) {
			_originalDipartimento = _dipartimento;
		}

		_dipartimento = dipartimento;
	}

	public String getOriginalDipartimento() {
		return GetterUtil.getString(_originalDipartimento);
	}

	@JSON
	@Override
	public String getDati1() {
		if (_dati1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _dati1;
		}
	}

	@Override
	public void setDati1(String dati1) {
		_dati1 = dati1;
	}

	@JSON
	@Override
	public String getDati2() {
		if (_dati2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _dati2;
		}
	}

	@Override
	public void setDati2(String dati2) {
		_dati2 = dati2;
	}

	@JSON
	@Override
	public String getDati3() {
		if (_dati3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _dati3;
		}
	}

	@Override
	public void setDati3(String dati3) {
		_dati3 = dati3;
	}

	@JSON
	@Override
	public String getDati4() {
		if (_dati4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _dati4;
		}
	}

	@Override
	public void setDati4(String dati4) {
		_dati4 = dati4;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RigheRichBFCNew.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RigheRichBFCNew toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RigheRichBFCNew)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RigheRichBFCNewImpl righeRichBFCNewImpl = new RigheRichBFCNewImpl();

		righeRichBFCNewImpl.setId(getId());
		righeRichBFCNewImpl.setId_rich(getId_rich());
		righeRichBFCNewImpl.setDipartimento(getDipartimento());
		righeRichBFCNewImpl.setDati1(getDati1());
		righeRichBFCNewImpl.setDati2(getDati2());
		righeRichBFCNewImpl.setDati3(getDati3());
		righeRichBFCNewImpl.setDati4(getDati4());

		righeRichBFCNewImpl.resetOriginalValues();

		return righeRichBFCNewImpl;
	}

	@Override
	public int compareTo(RigheRichBFCNew righeRichBFCNew) {
		long primaryKey = righeRichBFCNew.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RigheRichBFCNew)) {
			return false;
		}

		RigheRichBFCNew righeRichBFCNew = (RigheRichBFCNew)obj;

		long primaryKey = righeRichBFCNew.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RigheRichBFCNewModelImpl righeRichBFCNewModelImpl = this;

		righeRichBFCNewModelImpl._originalId_rich = righeRichBFCNewModelImpl._id_rich;

		righeRichBFCNewModelImpl._setOriginalId_rich = false;

		righeRichBFCNewModelImpl._originalDipartimento = righeRichBFCNewModelImpl._dipartimento;

		righeRichBFCNewModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RigheRichBFCNew> toCacheModel() {
		RigheRichBFCNewCacheModel righeRichBFCNewCacheModel = new RigheRichBFCNewCacheModel();

		righeRichBFCNewCacheModel.id = getId();

		righeRichBFCNewCacheModel.id_rich = getId_rich();

		righeRichBFCNewCacheModel.dipartimento = getDipartimento();

		String dipartimento = righeRichBFCNewCacheModel.dipartimento;

		if ((dipartimento != null) && (dipartimento.length() == 0)) {
			righeRichBFCNewCacheModel.dipartimento = null;
		}

		righeRichBFCNewCacheModel.dati1 = getDati1();

		String dati1 = righeRichBFCNewCacheModel.dati1;

		if ((dati1 != null) && (dati1.length() == 0)) {
			righeRichBFCNewCacheModel.dati1 = null;
		}

		righeRichBFCNewCacheModel.dati2 = getDati2();

		String dati2 = righeRichBFCNewCacheModel.dati2;

		if ((dati2 != null) && (dati2.length() == 0)) {
			righeRichBFCNewCacheModel.dati2 = null;
		}

		righeRichBFCNewCacheModel.dati3 = getDati3();

		String dati3 = righeRichBFCNewCacheModel.dati3;

		if ((dati3 != null) && (dati3.length() == 0)) {
			righeRichBFCNewCacheModel.dati3 = null;
		}

		righeRichBFCNewCacheModel.dati4 = getDati4();

		String dati4 = righeRichBFCNewCacheModel.dati4;

		if ((dati4 != null) && (dati4.length() == 0)) {
			righeRichBFCNewCacheModel.dati4 = null;
		}

		return righeRichBFCNewCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", id_rich=");
		sb.append(getId_rich());
		sb.append(", dipartimento=");
		sb.append(getDipartimento());
		sb.append(", dati1=");
		sb.append(getDati1());
		sb.append(", dati2=");
		sb.append(getDati2());
		sb.append(", dati3=");
		sb.append(getDati3());
		sb.append(", dati4=");
		sb.append(getDati4());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append(
			"servizio.beni.facile.consumo.richieste.model.RigheRichBFCNew");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_rich</column-name><column-value><![CDATA[");
		sb.append(getId_rich());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dipartimento</column-name><column-value><![CDATA[");
		sb.append(getDipartimento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dati1</column-name><column-value><![CDATA[");
		sb.append(getDati1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dati2</column-name><column-value><![CDATA[");
		sb.append(getDati2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dati3</column-name><column-value><![CDATA[");
		sb.append(getDati3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dati4</column-name><column-value><![CDATA[");
		sb.append(getDati4());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RigheRichBFCNew.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RigheRichBFCNew.class
		};
	private long _id;
	private long _id_rich;
	private long _originalId_rich;
	private boolean _setOriginalId_rich;
	private String _dipartimento;
	private String _originalDipartimento;
	private String _dati1;
	private String _dati2;
	private String _dati3;
	private String _dati4;
	private long _columnBitmask;
	private RigheRichBFCNew _escapedModel;
}