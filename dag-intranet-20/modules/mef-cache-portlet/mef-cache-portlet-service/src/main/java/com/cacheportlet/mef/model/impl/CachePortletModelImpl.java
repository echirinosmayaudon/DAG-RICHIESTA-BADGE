/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cacheportlet.mef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.cacheportlet.mef.model.CachePortlet;
import com.cacheportlet.mef.model.CachePortletModel;
import com.cacheportlet.mef.model.CachePortletSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CachePortlet service. Represents a row in the &quot;CACHEPORTLET_CachePortlet&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CachePortletModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CachePortletImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CachePortletImpl
 * @see CachePortlet
 * @see CachePortletModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CachePortletModelImpl extends BaseModelImpl<CachePortlet>
	implements CachePortletModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cache portlet model instance should use the {@link CachePortlet} interface instead.
	 */
	public static final String TABLE_NAME = "CACHEPORTLET_CachePortlet";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "portletId", Types.VARCHAR },
			{ "jsonData", Types.CLOB },
			{ "timestamp", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("portletId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jsonData", Types.CLOB);
		TABLE_COLUMNS_MAP.put("timestamp", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table CACHEPORTLET_CachePortlet (uuid_ VARCHAR(75) null,portletId VARCHAR(75) not null primary key,jsonData TEXT null,timestamp VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CACHEPORTLET_CachePortlet";
	public static final String ORDER_BY_JPQL = " ORDER BY cachePortlet.portletId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CACHEPORTLET_CachePortlet.portletId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.cacheportlet.mef.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.cacheportlet.mef.model.CachePortlet"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.cacheportlet.mef.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.cacheportlet.mef.model.CachePortlet"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.cacheportlet.mef.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.cacheportlet.mef.model.CachePortlet"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long PORTLETID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CachePortlet toModel(CachePortletSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CachePortlet model = new CachePortletImpl();

		model.setUuid(soapModel.getUuid());
		model.setPortletId(soapModel.getPortletId());
		model.setJsonData(soapModel.getJsonData());
		model.setTimestamp(soapModel.getTimestamp());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CachePortlet> toModels(CachePortletSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CachePortlet> models = new ArrayList<CachePortlet>(soapModels.length);

		for (CachePortletSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.cacheportlet.mef.service.util.PropsUtil.get(
				"lock.expiration.time.com.cacheportlet.mef.model.CachePortlet"));

	public CachePortletModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _portletId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setPortletId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _portletId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return CachePortlet.class;
	}

	@Override
	public String getModelClassName() {
		return CachePortlet.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("portletId", getPortletId());
		attributes.put("jsonData", getJsonData());
		attributes.put("timestamp", getTimestamp());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String portletId = (String)attributes.get("portletId");

		if (portletId != null) {
			setPortletId(portletId);
		}

		String jsonData = (String)attributes.get("jsonData");

		if (jsonData != null) {
			setJsonData(jsonData);
		}

		String timestamp = (String)attributes.get("timestamp");

		if (timestamp != null) {
			setTimestamp(timestamp);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getPortletId() {
		if (_portletId == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletId;
		}
	}

	@Override
	public void setPortletId(String portletId) {
		_portletId = portletId;
	}

	@JSON
	@Override
	public String getJsonData() {
		if (_jsonData == null) {
			return StringPool.BLANK;
		}
		else {
			return _jsonData;
		}
	}

	@Override
	public void setJsonData(String jsonData) {
		_jsonData = jsonData;
	}

	@JSON
	@Override
	public String getTimestamp() {
		if (_timestamp == null) {
			return StringPool.BLANK;
		}
		else {
			return _timestamp;
		}
	}

	@Override
	public void setTimestamp(String timestamp) {
		_timestamp = timestamp;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public CachePortlet toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CachePortlet)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CachePortletImpl cachePortletImpl = new CachePortletImpl();

		cachePortletImpl.setUuid(getUuid());
		cachePortletImpl.setPortletId(getPortletId());
		cachePortletImpl.setJsonData(getJsonData());
		cachePortletImpl.setTimestamp(getTimestamp());

		cachePortletImpl.resetOriginalValues();

		return cachePortletImpl;
	}

	@Override
	public int compareTo(CachePortlet cachePortlet) {
		String primaryKey = cachePortlet.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CachePortlet)) {
			return false;
		}

		CachePortlet cachePortlet = (CachePortlet)obj;

		String primaryKey = cachePortlet.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CachePortletModelImpl cachePortletModelImpl = this;

		cachePortletModelImpl._originalUuid = cachePortletModelImpl._uuid;

		cachePortletModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CachePortlet> toCacheModel() {
		CachePortletCacheModel cachePortletCacheModel = new CachePortletCacheModel();

		cachePortletCacheModel.uuid = getUuid();

		String uuid = cachePortletCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cachePortletCacheModel.uuid = null;
		}

		cachePortletCacheModel.portletId = getPortletId();

		String portletId = cachePortletCacheModel.portletId;

		if ((portletId != null) && (portletId.length() == 0)) {
			cachePortletCacheModel.portletId = null;
		}

		cachePortletCacheModel.jsonData = getJsonData();

		String jsonData = cachePortletCacheModel.jsonData;

		if ((jsonData != null) && (jsonData.length() == 0)) {
			cachePortletCacheModel.jsonData = null;
		}

		cachePortletCacheModel.timestamp = getTimestamp();

		String timestamp = cachePortletCacheModel.timestamp;

		if ((timestamp != null) && (timestamp.length() == 0)) {
			cachePortletCacheModel.timestamp = null;
		}

		return cachePortletCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", portletId=");
		sb.append(getPortletId());
		sb.append(", jsonData=");
		sb.append(getJsonData());
		sb.append(", timestamp=");
		sb.append(getTimestamp());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.cacheportlet.mef.model.CachePortlet");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portletId</column-name><column-value><![CDATA[");
		sb.append(getPortletId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jsonData</column-name><column-value><![CDATA[");
		sb.append(getJsonData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timestamp</column-name><column-value><![CDATA[");
		sb.append(getTimestamp());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CachePortlet.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CachePortlet.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _portletId;
	private String _jsonData;
	private String _timestamp;
	private long _columnBitmask;
	private CachePortlet _escapedModel;
}