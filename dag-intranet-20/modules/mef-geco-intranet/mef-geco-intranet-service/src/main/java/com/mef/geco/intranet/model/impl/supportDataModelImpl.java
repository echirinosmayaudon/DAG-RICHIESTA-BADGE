/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.mef.geco.intranet.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.mef.geco.intranet.model.supportData;
import com.mef.geco.intranet.model.supportDataModel;
import com.mef.geco.intranet.model.supportDataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the supportData service. Represents a row in the &quot;MEFGECO_supportData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link supportDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link supportDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see supportDataImpl
 * @see supportData
 * @see supportDataModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class supportDataModelImpl extends BaseModelImpl<supportData>
	implements supportDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a support data model instance should use the {@link supportData} interface instead.
	 */
	public static final String TABLE_NAME = "MEFGECO_supportData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "id_", Types.BIGINT },
			{ "data_", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFGECO_supportData (uuid_ VARCHAR(75) null,id_ LONG not null primary key,data_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MEFGECO_supportData";
	public static final String ORDER_BY_JPQL = " ORDER BY supportData.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFGECO_supportData.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.mef.geco.intranet.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.mef.geco.intranet.model.supportData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.mef.geco.intranet.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.mef.geco.intranet.model.supportData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.mef.geco.intranet.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.mef.geco.intranet.model.supportData"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static supportData toModel(supportDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		supportData model = new supportDataImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setData(soapModel.getData());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<supportData> toModels(supportDataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<supportData> models = new ArrayList<supportData>(soapModels.length);

		for (supportDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.mef.geco.intranet.service.util.PropsUtil.get(
				"lock.expiration.time.com.mef.geco.intranet.model.supportData"));

	public supportDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return supportData.class;
	}

	@Override
	public String getModelClassName() {
		return supportData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("id", getId());
		attributes.put("data", getData());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String data = (String)attributes.get("data");

		if (data != null) {
			setData(data);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getData() {
		if (_data == null) {
			return StringPool.BLANK;
		}
		else {
			return _data;
		}
	}

	@Override
	public void setData(String data) {
		_data = data;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			supportData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public supportData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (supportData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		supportDataImpl supportDataImpl = new supportDataImpl();

		supportDataImpl.setUuid(getUuid());
		supportDataImpl.setId(getId());
		supportDataImpl.setData(getData());

		supportDataImpl.resetOriginalValues();

		return supportDataImpl;
	}

	@Override
	public int compareTo(supportData supportData) {
		int value = 0;

		if (getId() < supportData.getId()) {
			value = -1;
		}
		else if (getId() > supportData.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof supportData)) {
			return false;
		}

		supportData supportData = (supportData)obj;

		long primaryKey = supportData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		supportDataModelImpl supportDataModelImpl = this;

		supportDataModelImpl._originalUuid = supportDataModelImpl._uuid;

		supportDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<supportData> toCacheModel() {
		supportDataCacheModel supportDataCacheModel = new supportDataCacheModel();

		supportDataCacheModel.uuid = getUuid();

		String uuid = supportDataCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			supportDataCacheModel.uuid = null;
		}

		supportDataCacheModel.id = getId();

		supportDataCacheModel.data = getData();

		String data = supportDataCacheModel.data;

		if ((data != null) && (data.length() == 0)) {
			supportDataCacheModel.data = null;
		}

		return supportDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", id=");
		sb.append(getId());
		sb.append(", data=");
		sb.append(getData());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.mef.geco.intranet.model.supportData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data</column-name><column-value><![CDATA[");
		sb.append(getData());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = supportData.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			supportData.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _id;
	private String _data;
	private long _columnBitmask;
	private supportData _escapedModel;
}