/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bookmarks.model.impl;

import aQute.bnd.annotation.ProviderType;

import bookmarks.model.Favourites;
import bookmarks.model.FavouritesModel;
import bookmarks.model.FavouritesSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Favourites service. Represents a row in the &quot;MEFINTRANET_Favourites&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FavouritesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FavouritesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FavouritesImpl
 * @see Favourites
 * @see FavouritesModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FavouritesModelImpl extends BaseModelImpl<Favourites>
	implements FavouritesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a favourites model instance should use the {@link Favourites} interface instead.
	 */
	public static final String TABLE_NAME = "MEFINTRANET_Favourites";
	public static final Object[][] TABLE_COLUMNS = {
			{ "favourite_id", Types.BIGINT },
			{ "user_id", Types.BIGINT },
			{ "title_favourite", Types.VARCHAR },
			{ "description_favourite", Types.VARCHAR },
			{ "tag_favourite", Types.VARCHAR },
			{ "url_favourite", Types.VARCHAR },
			{ "save_date", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("favourite_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title_favourite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description_favourite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tag_favourite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url_favourite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("save_date", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table MEFINTRANET_Favourites (favourite_id LONG not null primary key,user_id LONG,title_favourite VARCHAR(75) null,description_favourite VARCHAR(75) null,tag_favourite VARCHAR(75) null,url_favourite VARCHAR(75) null,save_date VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MEFINTRANET_Favourites";
	public static final String ORDER_BY_JPQL = " ORDER BY favourites.favourite_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MEFINTRANET_Favourites.favourite_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(bookmarks.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.bookmarks.model.Favourites"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(bookmarks.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.bookmarks.model.Favourites"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(bookmarks.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.bookmarks.model.Favourites"),
			true);
	public static final long USER_ID_COLUMN_BITMASK = 1L;
	public static final long FAVOURITE_ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Favourites toModel(FavouritesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Favourites model = new FavouritesImpl();

		model.setFavourite_id(soapModel.getFavourite_id());
		model.setUser_id(soapModel.getUser_id());
		model.setTitle_favourite(soapModel.getTitle_favourite());
		model.setDescription_favourite(soapModel.getDescription_favourite());
		model.setTag_favourite(soapModel.getTag_favourite());
		model.setUrl_favourite(soapModel.getUrl_favourite());
		model.setSave_date(soapModel.getSave_date());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Favourites> toModels(FavouritesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Favourites> models = new ArrayList<Favourites>(soapModels.length);

		for (FavouritesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(bookmarks.service.util.ServiceProps.get(
				"lock.expiration.time.bookmarks.model.Favourites"));

	public FavouritesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _favourite_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFavourite_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _favourite_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Favourites.class;
	}

	@Override
	public String getModelClassName() {
		return Favourites.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("favourite_id", getFavourite_id());
		attributes.put("user_id", getUser_id());
		attributes.put("title_favourite", getTitle_favourite());
		attributes.put("description_favourite", getDescription_favourite());
		attributes.put("tag_favourite", getTag_favourite());
		attributes.put("url_favourite", getUrl_favourite());
		attributes.put("save_date", getSave_date());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long favourite_id = (Long)attributes.get("favourite_id");

		if (favourite_id != null) {
			setFavourite_id(favourite_id);
		}

		Long user_id = (Long)attributes.get("user_id");

		if (user_id != null) {
			setUser_id(user_id);
		}

		String title_favourite = (String)attributes.get("title_favourite");

		if (title_favourite != null) {
			setTitle_favourite(title_favourite);
		}

		String description_favourite = (String)attributes.get(
				"description_favourite");

		if (description_favourite != null) {
			setDescription_favourite(description_favourite);
		}

		String tag_favourite = (String)attributes.get("tag_favourite");

		if (tag_favourite != null) {
			setTag_favourite(tag_favourite);
		}

		String url_favourite = (String)attributes.get("url_favourite");

		if (url_favourite != null) {
			setUrl_favourite(url_favourite);
		}

		String save_date = (String)attributes.get("save_date");

		if (save_date != null) {
			setSave_date(save_date);
		}
	}

	@JSON
	@Override
	public long getFavourite_id() {
		return _favourite_id;
	}

	@Override
	public void setFavourite_id(long favourite_id) {
		_favourite_id = favourite_id;
	}

	@JSON
	@Override
	public long getUser_id() {
		return _user_id;
	}

	@Override
	public void setUser_id(long user_id) {
		_columnBitmask |= USER_ID_COLUMN_BITMASK;

		if (!_setOriginalUser_id) {
			_setOriginalUser_id = true;

			_originalUser_id = _user_id;
		}

		_user_id = user_id;
	}

	public long getOriginalUser_id() {
		return _originalUser_id;
	}

	@JSON
	@Override
	public String getTitle_favourite() {
		if (_title_favourite == null) {
			return StringPool.BLANK;
		}
		else {
			return _title_favourite;
		}
	}

	@Override
	public void setTitle_favourite(String title_favourite) {
		_title_favourite = title_favourite;
	}

	@JSON
	@Override
	public String getDescription_favourite() {
		if (_description_favourite == null) {
			return StringPool.BLANK;
		}
		else {
			return _description_favourite;
		}
	}

	@Override
	public void setDescription_favourite(String description_favourite) {
		_description_favourite = description_favourite;
	}

	@JSON
	@Override
	public String getTag_favourite() {
		if (_tag_favourite == null) {
			return StringPool.BLANK;
		}
		else {
			return _tag_favourite;
		}
	}

	@Override
	public void setTag_favourite(String tag_favourite) {
		_tag_favourite = tag_favourite;
	}

	@JSON
	@Override
	public String getUrl_favourite() {
		if (_url_favourite == null) {
			return StringPool.BLANK;
		}
		else {
			return _url_favourite;
		}
	}

	@Override
	public void setUrl_favourite(String url_favourite) {
		_url_favourite = url_favourite;
	}

	@JSON
	@Override
	public String getSave_date() {
		if (_save_date == null) {
			return StringPool.BLANK;
		}
		else {
			return _save_date;
		}
	}

	@Override
	public void setSave_date(String save_date) {
		_save_date = save_date;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Favourites.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Favourites toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Favourites)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FavouritesImpl favouritesImpl = new FavouritesImpl();

		favouritesImpl.setFavourite_id(getFavourite_id());
		favouritesImpl.setUser_id(getUser_id());
		favouritesImpl.setTitle_favourite(getTitle_favourite());
		favouritesImpl.setDescription_favourite(getDescription_favourite());
		favouritesImpl.setTag_favourite(getTag_favourite());
		favouritesImpl.setUrl_favourite(getUrl_favourite());
		favouritesImpl.setSave_date(getSave_date());

		favouritesImpl.resetOriginalValues();

		return favouritesImpl;
	}

	@Override
	public int compareTo(Favourites favourites) {
		long primaryKey = favourites.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Favourites)) {
			return false;
		}

		Favourites favourites = (Favourites)obj;

		long primaryKey = favourites.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FavouritesModelImpl favouritesModelImpl = this;

		favouritesModelImpl._originalUser_id = favouritesModelImpl._user_id;

		favouritesModelImpl._setOriginalUser_id = false;

		favouritesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Favourites> toCacheModel() {
		FavouritesCacheModel favouritesCacheModel = new FavouritesCacheModel();

		favouritesCacheModel.favourite_id = getFavourite_id();

		favouritesCacheModel.user_id = getUser_id();

		favouritesCacheModel.title_favourite = getTitle_favourite();

		String title_favourite = favouritesCacheModel.title_favourite;

		if ((title_favourite != null) && (title_favourite.length() == 0)) {
			favouritesCacheModel.title_favourite = null;
		}

		favouritesCacheModel.description_favourite = getDescription_favourite();

		String description_favourite = favouritesCacheModel.description_favourite;

		if ((description_favourite != null) &&
				(description_favourite.length() == 0)) {
			favouritesCacheModel.description_favourite = null;
		}

		favouritesCacheModel.tag_favourite = getTag_favourite();

		String tag_favourite = favouritesCacheModel.tag_favourite;

		if ((tag_favourite != null) && (tag_favourite.length() == 0)) {
			favouritesCacheModel.tag_favourite = null;
		}

		favouritesCacheModel.url_favourite = getUrl_favourite();

		String url_favourite = favouritesCacheModel.url_favourite;

		if ((url_favourite != null) && (url_favourite.length() == 0)) {
			favouritesCacheModel.url_favourite = null;
		}

		favouritesCacheModel.save_date = getSave_date();

		String save_date = favouritesCacheModel.save_date;

		if ((save_date != null) && (save_date.length() == 0)) {
			favouritesCacheModel.save_date = null;
		}

		return favouritesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{favourite_id=");
		sb.append(getFavourite_id());
		sb.append(", user_id=");
		sb.append(getUser_id());
		sb.append(", title_favourite=");
		sb.append(getTitle_favourite());
		sb.append(", description_favourite=");
		sb.append(getDescription_favourite());
		sb.append(", tag_favourite=");
		sb.append(getTag_favourite());
		sb.append(", url_favourite=");
		sb.append(getUrl_favourite());
		sb.append(", save_date=");
		sb.append(getSave_date());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("bookmarks.model.Favourites");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>favourite_id</column-name><column-value><![CDATA[");
		sb.append(getFavourite_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>user_id</column-name><column-value><![CDATA[");
		sb.append(getUser_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title_favourite</column-name><column-value><![CDATA[");
		sb.append(getTitle_favourite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description_favourite</column-name><column-value><![CDATA[");
		sb.append(getDescription_favourite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tag_favourite</column-name><column-value><![CDATA[");
		sb.append(getTag_favourite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url_favourite</column-name><column-value><![CDATA[");
		sb.append(getUrl_favourite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>save_date</column-name><column-value><![CDATA[");
		sb.append(getSave_date());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Favourites.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Favourites.class
		};
	private long _favourite_id;
	private long _user_id;
	private long _originalUser_id;
	private boolean _setOriginalUser_id;
	private String _title_favourite;
	private String _description_favourite;
	private String _tag_favourite;
	private String _url_favourite;
	private String _save_date;
	private long _columnBitmask;
	private Favourites _escapedModel;
}